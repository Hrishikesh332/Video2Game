{
  "metadata": {
    "version": "1.0",
    "created_at": "2025-06-29 14:50:52 UTC",
    "total_entries": 11,
    "last_updated": "2025-07-01 10:32:55 UTC"
  },
  "entries": {
    "ed463b330e0c117d": {
      "video_id": "686182c2da8b16ab27af8c64",
      "video_analysis": "```json\n{\n  \"spec\": \"In machine learning, linear regression is a supervised algorithm used to predict continuous numerical data based on labeled datasets. This app aims to help learners understand the concept of linear regression through interactive and engaging design.\\n\\nSPECIFICATIONS:\\n\\n1. The app must feature an interactive graph with a horizontal axis labeled 'Height in Inches' and a vertical axis labeled 'Shoe Size [US]'.\\n2. The app must allow users to input data points representing different heights and corresponding shoe sizes.\\n3. The app must automatically plot these data points on the graph.\\n4. The app must provide a feature to draw a best fit line through the plotted data points, indicating the positive correlation between height and shoe size.\\n5. The app must allow users to identify outliers by highlighting specific data points.\\n6. The app must include a section to explain the concept of labeled datasets and the difference between continuous and categorical data.\\n7. The app must provide examples of continuous data (height, age, foot size) and categorical data (color, gender).\\n8. The app must allow users to toggle between different types of data to see how they affect the best fit line.\\n9. The app must include a section to explain the importance of linear regression in machine learning and how it can be used to make predictions.\\n10. The app must have a playful design with clear instructions and feedback to enhance user engagement and understanding.\"\n}\n```",
      "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Linear Regression Explorer</title>\n    <style>\n        * {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n\n        body {\n            background-color: #ffffff;\n            color: #333333;\n            line-height: 1.6;\n            padding: 20px;\n            max-width: 1200px;\n            margin: 0 auto;\n        }\n\n        header {\n            text-align: center;\n            margin-bottom: 30px;\n            padding: 20px;\n            background-color: #f8f9fa;\n            border-radius: 8px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n        }\n\n        h1 {\n            color: #2c3e50;\n            margin-bottom: 10px;\n        }\n\n        .container {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 20px;\n            margin-bottom: 30px;\n        }\n\n        .graph-container {\n            flex: 1 1 600px;\n            background-color: #f8f9fa;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n            min-height: 400px;\n        }\n\n        .controls {\n            flex: 1 1 300px;\n            background-color: #f8f9fa;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n        }\n\n        canvas {\n            background-color: white;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            width: 100%;\n            height: 100%;\n            min-height: 350px;\n        }\n\n        .form-group {\n            margin-bottom: 15px;\n        }\n\n        label {\n            display: block;\n            margin-bottom: 5px;\n            font-weight: 600;\n        }\n\n        input {\n            width: 100%;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            font-size: 16px;\n        }\n\n        button {\n            background-color: #4a5568;\n            color: white;\n            border: none;\n            padding: 10px 15px;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 16px;\n            transition: background-color 0.3s;\n            margin-right: 10px;\n            margin-bottom: 10px;\n        }\n\n        button:hover {\n            background-color: #2d3748;\n        }\n\n        .button-group {\n            display: flex;\n            flex-wrap: wrap;\n            margin-top: 20px;\n        }\n\n        .explanation {\n            background-color: #f8f9fa;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n            margin-bottom: 30px;\n        }\n\n        .explanation h2 {\n            margin-bottom: 15px;\n            color: #2c3e50;\n        }\n\n        .data-types {\n            display: flex;\n            gap: 15px;\n            margin-top: 15px;\n            flex-wrap: wrap;\n        }\n\n        .data-card {\n            background-color: white;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            padding: 15px;\n            flex: 1;\n            min-width: 200px;\n        }\n\n        .data-card h3 {\n            margin-bottom: 10px;\n            color: #2c3e50;\n        }\n\n        .points-list {\n            margin-top: 20px;\n            max-height: 200px;\n            overflow-y: auto;\n        }\n\n        .point-item {\n            background-color: white;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            padding: 10px;\n            margin-bottom: 10px;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n\n        .point-item button {\n            padding: 5px 10px;\n            font-size: 14px;\n        }\n\n        .progress-container {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 20px;\n            background-color: #f8f9fa;\n            padding: 15px;\n            border-radius: 8px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n        }\n\n        .progress-step {\n            text-align: center;\n            flex: 1;\n            padding: 10px;\n            position: relative;\n        }\n\n        .progress-step.active {\n            font-weight: bold;\n            color: #2d3748;\n        }\n\n        .progress-step:not(:last-child)::after {\n            content: '';\n            position: absolute;\n            top: 50%;\n            right: 0;\n            width: 50%;\n            height: 2px;\n            background-color: #cbd5e0;\n            transform: translateY(-50%);\n        }\n\n        .feedback {\n            margin-top: 15px;\n            padding: 10px;\n            border-radius: 4px;\n            display: none;\n        }\n\n        .feedback.success {\n            background-color: #f0fff4;\n            border: 1px solid #c6f6d5;\n            color: #2f855a;\n            display: block;\n        }\n\n        .feedback.error {\n            background-color: #fff5f5;\n            border: 1px solid #fed7d7;\n            color: #c53030;\n            display: block;\n        }\n\n        @media (max-width: 768px) {\n            .container {\n                flex-direction: column;\n            }\n            \n            .progress-step:not(:last-child)::after {\n                width: 40%;\n            }\n        }\n    </style>\n</head>\n<body>\n    <header>\n        <h1>Linear Regression Explorer</h1>\n        <p>Understand how machine learning predicts continuous data through interactive exploration</p>\n    </header>\n\n    <div class=\"progress-container\">\n        <div class=\"progress-step active\">1. Add Data Points</div>\n        <div class=\"progress-step\">2. Draw Best Fit Line</div>\n        <div class=\"progress-step\">3. Identify Outliers</div>\n        <div class=\"progress-step\">4. Explore Concepts</div>\n    </div>\n\n    <div class=\"container\">\n        <div class=\"graph-container\">\n            <canvas id=\"regressionCanvas\"></canvas>\n        </div>\n        \n        <div class=\"controls\">\n            <h2>Data Input</h2>\n            <div class=\"form-group\">\n                <label for=\"height\">Height (inches):</label>\n                <input type=\"number\" id=\"height\" min=\"50\" max=\"90\" placeholder=\"Enter height (50-90 inches)\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"shoeSize\">Shoe Size (US):</label>\n                <input type=\"number\" id=\"shoeSize\" min=\"4\" max=\"15\" placeholder=\"Enter shoe size (4-15)\">\n            </div>\n            \n            <button id=\"addPoint\">Add Data Point</button>\n            <button id=\"drawLine\">Draw Best Fit Line</button>\n            <button id=\"reset\">Reset Graph</button>\n            \n            <div class=\"points-list\" id=\"pointsList\">\n                <!-- Points will be added here dynamically -->\n            </div>\n            \n            <div class=\"feedback\" id=\"feedback\"></div>\n        </div>\n    </div>\n\n    <div class=\"explanation\">\n        <h2>Understanding Linear Regression</h2>\n        <p>Linear regression is a supervised machine learning algorithm used to predict continuous numerical values based on labeled datasets. It finds the best straight line (regression line) that represents the relationship between input and output variables.</p>\n        \n        <div class=\"data-types\">\n            <div class=\"data-card\">\n                <h3>Continuous Data</h3>\n                <p>Numerical values that can be measured:</p>\n                <ul>\n                    <li>Height (inches)</li>\n                    <li>Shoe Size</li>\n                    <li>Age</li>\n                    <li>Temperature</li>\n                </ul>\n            </div>\n            \n            <div class=\"data-card\">\n                <h3>Categorical Data</h3>\n                <p>Values that represent categories:</p>\n                <ul>\n                    <li>Gender (Male/Female)</li>\n                    <li>Color (Red/Blue/Green)</li>\n                    <li>Vehicle Type (Car/Truck)</li>\n                    <li>Country</li>\n                </ul>\n            </div>\n        </div>\n        \n        <div style=\"margin-top: 20px;\">\n            <h3>Why Linear Regression Matters</h3>\n            <p>Linear regression helps us make predictions based on existing data. For example, we can predict someone's shoe size based on their height, or estimate house prices based on square footage. It's fundamental in data science for understanding relationships between variables.</p>\n        </div>\n    </div>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', function() {\n            // Canvas setup\n            const canvas = document.getElementById('regressionCanvas');\n            const ctx = canvas.getContext('2d');\n            const pointsList = document.getElementById('pointsList');\n            const feedback = document.getElementById('feedback');\n            \n            // Set canvas dimensions\n            function resizeCanvas() {\n                const container = canvas.parentElement;\n                canvas.width = container.clientWidth;\n                canvas.height = container.clientHeight;\n                drawGraph();\n            }\n            \n            // Initialize canvas\n            resizeCanvas();\n            window.addEventListener('resize', resizeCanvas);\n            \n            // Data storage\n            let dataPoints = [];\n            let bestFitLine = null;\n            let outlierIndex = -1;\n            \n            // DOM elements\n            const heightInput = document.getElementById('height');\n            const shoeSizeInput = document.getElementById('shoeSize');\n            const addPointBtn = document.getElementById('addPoint');\n            const drawLineBtn = document.getElementById('drawLine');\n            const resetBtn = document.getElementById('reset');\n            \n            // Draw graph with axes\n            function drawGraph() {\n                const width = canvas.width;\n                const height = canvas.height;\n                const padding = 40;\n                \n                // Clear canvas\n                ctx.clearRect(0, 0, width, height);\n                \n                // Draw axes\n                ctx.beginPath();\n                ctx.strokeStyle = '#4a5568';\n                ctx.lineWidth = 2;\n                \n                // X-axis\n                ctx.moveTo(padding, height - padding);\n                ctx.lineTo(width - padding, height - padding);\n                \n                // Y-axis\n                ctx.moveTo(padding, padding);\n                ctx.lineTo(padding, height - padding);\n                \n                ctx.stroke();\n                \n                // Draw axis labels\n                ctx.font = '14px Arial';\n                ctx.fillStyle = '#4a5568';\n                ctx.textAlign = 'center';\n                \n                // X-axis label\n                ctx.fillText('Height in Inches', width / 2, height - 10);\n                \n                // Y-axis label\n                ctx.save();\n                ctx.translate(15, height / 2);\n                ctx.rotate(-Math.PI / 2);\n                ctx.fillText('Shoe Size [US]', 0, 0);\n                ctx.restore();\n                \n                // Draw grid lines\n                ctx.strokeStyle = '#e2e8f0';\n                ctx.lineWidth = 1;\n                \n                // Vertical grid lines\n                for (let i = 1; i < 10; i++) {\n                    const x = padding + (i * (width - 2 * padding) / 10);\n                    ctx.beginPath();\n                    ctx.moveTo(x, padding);\n                    ctx.lineTo(x, height - padding);\n                    ctx.stroke();\n                }\n                \n                // Horizontal grid lines\n                for (let i = 1; i < 10; i++) {\n                    const y = height - padding - (i * (height - 2 * padding) / 10);\n                    ctx.beginPath();\n                    ctx.moveTo(padding, y);\n                    ctx.lineTo(width - padding, y);\n                    ctx.stroke();\n                }\n                \n                // Draw data points\n                dataPoints.forEach((point, index) => {\n                    const x = padding + (point.height - 50) * (width - 2 * padding) / 40;\n                    const y = height - padding - (point.shoeSize - 4) * (height - 2 * padding) / 11;\n                    \n                    ctx.beginPath();\n                    ctx.fillStyle = index === outlierIndex ? '#e53e3e' : '#3182ce';\n                    ctx.arc(x, y, 6, 0, Math.PI * 2);\n                    ctx.fill();\n                    \n                    // Add point label\n                    ctx.fillStyle = '#4a5568';\n                    ctx.font = '12px Arial';\n                    ctx.fillText(`(${point.height}, ${point.shoeSize})`, x + 10, y - 10);\n                });\n                \n                // Draw best fit line\n                if (bestFitLine) {\n                    const x1 = padding;\n                    const y1 = height - padding - (bestFitLine(50) - 4) * (height - 2 * padding) / 11;\n                    const x2 = width - padding;\n                    const y2 = height - padding - (bestFitLine(90) - 4) * (height - 2 * padding) / 11;\n                    \n                    ctx.beginPath();\n                    ctx.strokeStyle = '#38a169';\n                    ctx.lineWidth = 2;\n                    ctx.moveTo(x1, y1);\n                    ctx.lineTo(x2, y2);\n                    ctx.stroke();\n                }\n            }\n            \n            // Add data point\n            function addDataPoint() {\n                const height = parseFloat(heightInput.value);\n                const shoeSize = parseFloat(shoeSizeInput.value);\n                \n                if (isNaN(height) || isNaN(shoeSize)) {\n                    showFeedback('Please enter valid numbers for both fields', 'error');\n                    return;\n                }\n                \n                if (height < 50 || height > 90 || shoeSize < 4 || shoeSize > 15) {\n                    showFeedback('Height must be between 50-90 inches. Shoe size between 4-15.', 'error');\n                    return;\n                }\n                \n                dataPoints.push({ height, shoeSize });\n                updatePointsList();\n                drawGraph();\n                showFeedback(`Point added: (${height}, ${shoeSize})`, 'success');\n                \n                // Clear inputs\n                heightInput.value = '';\n                shoeSizeInput.value = '';\n                heightInput.focus();\n            }\n            \n            // Update points list display\n            function updatePointsList() {\n                pointsList.innerHTML = '';\n                \n                dataPoints.forEach((point, index) => {\n                    const pointItem = document.createElement('div');\n                    pointItem.className = 'point-item';\n                    pointItem.innerHTML = `\n                        <span>Height: ${point.height}\", Shoe: ${point.shoeSize}</span>\n                        <button class=\"remove-point\" data-index=\"${index}\">Remove</button>\n                    `;\n                    pointsList.appendChild(pointItem);\n                });\n                \n                // Add event listeners to remove buttons\n                document.querySelectorAll('.remove-point').forEach(button => {\n                    button.addEventListener('click', function() {\n                        const index = parseInt(this.getAttribute('data-index'));\n                        dataPoints.splice(index, 1);\n                        updatePointsList();\n                        drawGraph();\n                        \n                        if (index === outlierIndex) {\n                            outlierIndex = -1;\n                        }\n                    });\n                });\n            }\n            \n            // Calculate best fit line\n            function calculateBestFitLine() {\n                if (dataPoints.length < 2) {\n                    showFeedback('Add at least 2 points to draw a line', 'error');\n                    return null;\n                }\n                \n                // Calculate means\n                const n = dataPoints.length;\n                let sumX = 0, sumY = 0, sumXY = 0, sumXX = 0;\n                \n                dataPoints.forEach(point => {\n                    sumX += point.height;\n                    sumY += point.shoeSize;\n                    sumXY += point.height * point.shoeSize;\n                    sumXX += point.height * point.height;\n                });\n                \n                // Calculate slope (m) and intercept (b)\n                const m = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n                const b = (sumY - m * sumX) / n;\n                \n                return x => m * x + b;\n            }\n            \n            // Draw best fit line\n            function drawBestFitLine() {\n                bestFitLine = calculateBestFitLine();\n                \n                if (bestFitLine) {\n                    drawGraph();\n                    showFeedback('Best fit line drawn! Notice the positive correlation', 'success');\n                    \n                    // Add an outlier for the next step\n                    if (dataPoints.length >= 3 && outlierIndex === -1) {\n                        setTimeout(() => {\n                            dataPoints.push({ height: 70, shoeSize: 15 });\n                            outlierIndex = dataPoints.length - 1;\n                            updatePointsList();\n                            drawGraph();\n                            showFeedback('An outlier has been added. Click on it to identify!', 'success');\n                        }, 1500);\n                    }\n                }\n            }\n            \n            // Reset graph\n            function resetGraph() {\n                dataPoints = [];\n                bestFitLine = null;\n                outlierIndex = -1;\n                updatePointsList();\n                drawGraph();\n                showFeedback('Graph has been reset', 'success');\n            }\n            \n            // Show feedback message\n            function showFeedback(message, type) {\n                feedback.textContent = message;\n                feedback.className = 'feedback ' + type;\n                \n                // Auto-hide after 3 seconds\n                setTimeout(() => {\n                    feedback.style.display = 'none';\n                }, 3000);\n            }\n            \n            // Handle canvas click to identify outliers\n            canvas.addEventListener('click', function(event) {\n                if (outlierIndex === -1) return;\n                \n                const rect = canvas.getBoundingClientRect();\n                const x = event.clientX - rect.left;\n                const y = event.clientY - rect.top;\n                const padding = 40;\n                const width = canvas.width;\n                const height = canvas.height;\n                \n                // Check if clicked on the outlier\n                const point = dataPoints[outlierIndex];\n                const pointX = padding + (point.height - 50) * (width - 2 * padding) / 40;\n                const pointY = height - padding - (point.shoeSize - 4) * (height - 2 * padding) / 11;\n                \n                const distance = Math.sqrt(Math.pow(x - pointX, 2) + Math.pow(y - pointY, 2));\n                \n                if (distance < 15) {\n                    showFeedback('Correct! This point is an outlier that doesn\\'t follow the general trend', 'success');\n                    outlierIndex = -1;\n                }\n            });\n            \n            // Event listeners\n            addPointBtn.addEventListener('click', addDataPoint);\n            drawLineBtn.addEventListener('click', drawBestFitLine);\n            resetBtn.addEventListener('click', resetGraph);\n            \n            // Allow Enter key to add point\n            heightInput.addEventListener('keypress', function(e) {\n                if (e.key === 'Enter') addDataPoint();\n            });\n            \n            shoeSizeInput.addEventListener('keypress', function(e) {\n                if (e.key === 'Enter') addDataPoint();\n            });\n            \n            // Initial draw\n            drawGraph();\n        });\n    </script>\n</body>\n</html>",
      "html_file_path": "generated_games/video_game_686182c2da8b16ab27af8c64_1751321613.html",
      "created_at": "2025-06-30 22:13:33 UTC",
      "cached": true,
      "youtube_url": "https://www.youtube.com/watch?v=qxo8p8PtFeA",
      "video_title": "Why Linear regression for Machine Learning?",
      "twelvelabs_video_ids": [
        "686182c2da8b16ab27af8c64"
      ],
      "primary_video_id": "686182c2da8b16ab27af8c64",
      "total_chunks": null,
      "cache_key": "ed463b330e0c117d",
      "cached_at": "2025-06-30 22:13:33 UTC"
    },
    "0cd6e502bd723141": {
      "video_id": "0cd6e502bd723141",
      "video_analysis": "```json\n{\n  \"spec\": \"In the video, a yoga instructor named Michelle leads a 3-minute stretching routine that includes breathing exercises, arm stretches, elbow rotations, and torso twists. The routine is designed to be a quick and effective way to start the day with a bit of exercise and mindfulness.\\n\\nBuild an interactive web app to help learners understand and practice the stretching routine.\\n\\nSPECIFICATIONS:\\n\\n1. The app must feature a simple, user-friendly interface with clear instructions and visual aids.\\n2. The app must include a series of interactive steps that mirror the stretching routine demonstrated by Michelle.\\n3. The app must allow users to follow along with the routine, with each step clearly labeled and accompanied by a visual representation of the pose.\\n4. The app must include a breathing exercise section where users can practice inhaling and exhaling in sync with visual cues.\\n5. The app must provide feedback on the user's progress, such as a timer to ensure each stretch is held for the appropriate duration.\\n6. The app must allow users to pause, restart, or skip steps as needed.\\n7. The app must include a final section where users can review the entire routine and practice it again if desired.\\n8. The app must be accessible and include options for users with different levels of flexibility and fitness.\\n9. The app must be responsive and work well on both desktop and mobile devices.\\n10. The app must include motivational messages and encouragement to keep users engaged and motivated throughout the routine.\"\n}\n```",
      "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Morning Stretch Routine</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n        \n        body {\n            background-color: #ffffff;\n            color: #333333;\n            line-height: 1.6;\n            min-height: 100vh;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            padding: 20px;\n        }\n        \n        #app {\n            width: 100%;\n            max-width: 600px;\n            background-color: #f8f8f8;\n            border-radius: 12px;\n            box-shadow: 0 4px 20px rgba(0,0,0,0.08);\n            overflow: hidden;\n            position: relative;\n        }\n        \n        .screen {\n            padding: 30px;\n            display: none;\n            flex-direction: column;\n            min-height: 500px;\n        }\n        \n        .screen.active {\n            display: flex;\n        }\n        \n        h1 {\n            font-size: 28px;\n            margin-bottom: 20px;\n            text-align: center;\n            color: #222222;\n        }\n        \n        h2 {\n            font-size: 22px;\n            margin-bottom: 15px;\n            color: #222222;\n        }\n        \n        p {\n            margin-bottom: 20px;\n            text-align: center;\n        }\n        \n        .progress-container {\n            width: 100%;\n            background-color: #e0e0e0;\n            border-radius: 10px;\n            margin: 20px 0;\n            height: 12px;\n        }\n        \n        .progress-bar {\n            height: 100%;\n            background-color: #4a4a4a;\n            border-radius: 10px;\n            width: 0%;\n            transition: width 0.3s ease;\n        }\n        \n        .pose-container {\n            display: flex;\n            justify-content: center;\n            margin: 25px 0;\n            height: 200px;\n        }\n        \n        .pose {\n            width: 150px;\n            height: 150px;\n            background-color: #e9e9e9;\n            border-radius: 50%;\n            position: relative;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            overflow: hidden;\n        }\n        \n        .pose-figure {\n            position: relative;\n            width: 80px;\n            height: 120px;\n        }\n        \n        .head {\n            position: absolute;\n            top: 0;\n            left: 50%;\n            transform: translateX(-50%);\n            width: 30px;\n            height: 30px;\n            background-color: #333;\n            border-radius: 50%;\n        }\n        \n        .body {\n            position: absolute;\n            top: 30px;\n            left: 50%;\n            transform: translateX(-50%);\n            width: 8px;\n            height: 50px;\n            background-color: #333;\n        }\n        \n        .arm {\n            position: absolute;\n            width: 40px;\n            height: 8px;\n            background-color: #333;\n            top: 40px;\n        }\n        \n        .arm.left {\n            left: -20px;\n            transform-origin: right center;\n        }\n        \n        .arm.right {\n            right: -20px;\n            transform-origin: left center;\n        }\n        \n        .leg {\n            position: absolute;\n            width: 8px;\n            height: 40px;\n            background-color: #333;\n            top: 80px;\n        }\n        \n        .leg.left {\n            left: 35px;\n        }\n        \n        .leg.right {\n            right: 35px;\n        }\n        \n        .timer {\n            font-size: 36px;\n            font-weight: bold;\n            text-align: center;\n            margin: 20px 0;\n            color: #333;\n        }\n        \n        .breathing-circle {\n            width: 120px;\n            height: 120px;\n            border-radius: 50%;\n            background-color: #e0e0e0;\n            margin: 0 auto;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            font-size: 20px;\n            font-weight: bold;\n            transition: all 1.5s ease;\n        }\n        \n        .instructions {\n            background-color: #e9e9e9;\n            padding: 15px;\n            border-radius: 8px;\n            margin: 15px 0;\n            text-align: center;\n        }\n        \n        .controls {\n            display: flex;\n            justify-content: center;\n            gap: 15px;\n            margin-top: 20px;\n            flex-wrap: wrap;\n        }\n        \n        button {\n            padding: 12px 25px;\n            border: none;\n            border-radius: 30px;\n            background-color: #4a4a4a;\n            color: white;\n            font-size: 16px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: background-color 0.3s;\n            min-width: 120px;\n        }\n        \n        button:hover {\n            background-color: #333;\n        }\n        \n        button.secondary {\n            background-color: #b0b0b0;\n        }\n        \n        button.secondary:hover {\n            background-color: #999;\n        }\n        \n        .step-indicator {\n            text-align: center;\n            margin: 10px 0;\n            font-weight: 500;\n            color: #555;\n        }\n        \n        .motivation {\n            text-align: center;\n            font-style: italic;\n            margin: 15px 0;\n            color: #555;\n        }\n        \n        .completion-screen {\n            text-align: center;\n        }\n        \n        .completion-screen h1 {\n            margin-bottom: 10px;\n        }\n        \n        .completion-screen p {\n            margin-bottom: 30px;\n        }\n        \n        @media (max-width: 480px) {\n            .screen {\n                padding: 20px 15px;\n            }\n            \n            h1 {\n                font-size: 24px;\n            }\n            \n            h2 {\n                font-size: 20px;\n            }\n            \n            .pose {\n                width: 130px;\n                height: 130px;\n            }\n            \n            button {\n                padding: 10px 20px;\n                font-size: 14px;\n                min-width: 100px;\n            }\n            \n            .controls {\n                gap: 10px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div id=\"app\">\n        <!-- Welcome Screen -->\n        <div id=\"welcome-screen\" class=\"screen active\">\n            <h1>Morning Stretch Routine</h1>\n            <p>Start your day with this 3-minute stretching routine to energize your body and mind.</p>\n            <div class=\"pose-container\">\n                <div class=\"pose\">\n                    <div class=\"pose-figure\">\n                        <div class=\"head\"></div>\n                        <div class=\"body\"></div>\n                        <div class=\"arm left\" style=\"transform: rotate(45deg);\"></div>\n                        <div class=\"arm right\" style=\"transform: rotate(-45deg);\"></div>\n                        <div class=\"leg left\"></div>\n                        <div class=\"leg right\"></div>\n                    </div>\n                </div>\n            </div>\n            <p>Follow along with Michelle's guided stretches to improve flexibility and mindfulness.</p>\n            <div class=\"controls\">\n                <button id=\"start-btn\">Begin Routine</button>\n            </div>\n        </div>\n        \n        <!-- Breathing Exercise Screen -->\n        <div id=\"breathing-screen\" class=\"screen\">\n            <h2>Breathing Exercise</h2>\n            <div class=\"step-indicator\">Step 1 of 4</div>\n            <div class=\"progress-container\">\n                <div class=\"progress-bar\" id=\"breath-progress\"></div>\n            </div>\n            <div class=\"motivation\">Focus on your breath to center yourself</div>\n            <div class=\"breathing-circle\" id=\"breath-circle\">Inhale</div>\n            <div class=\"instructions\">Breathe deeply as the circle expands and contracts</div>\n            <div class=\"timer\" id=\"breath-timer\">0:30</div>\n            <div class=\"controls\">\n                <button id=\"pause-btn\" class=\"secondary\">Pause</button>\n                <button id=\"next-btn1\">Next</button>\n            </div>\n        </div>\n        \n        <!-- Arm Stretch Screen -->\n        <div id=\"arm-screen\" class=\"screen\">\n            <h2>Arm Stretch</h2>\n            <div class=\"step-indicator\">Step 2 of 4</div>\n            <div class=\"progress-container\">\n                <div class=\"progress-bar\" id=\"arm-progress\"></div>\n            </div>\n            <div class=\"motivation\">Feel the stretch through your shoulders and back</div>\n            <div class=\"pose-container\">\n                <div class=\"pose\">\n                    <div class=\"pose-figure\">\n                        <div class=\"head\"></div>\n                        <div class=\"body\"></div>\n                        <div class=\"arm left\" style=\"transform: rotate(135deg); top: 35px;\"></div>\n                        <div class=\"arm right\" style=\"transform: rotate(-135deg); top: 35px;\"></div>\n                        <div class=\"leg left\"></div>\n                        <div class=\"leg right\"></div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"instructions\">Reach both arms straight up toward the ceiling</div>\n            <div class=\"timer\" id=\"arm-timer\">0:45</div>\n            <div class=\"controls\">\n                <button id=\"pause-btn2\" class=\"secondary\">Pause</button>\n                <button id=\"next-btn2\">Next</button>\n            </div>\n        </div>\n        \n        <!-- Elbow Rotation Screen -->\n        <div id=\"elbow-screen\" class=\"screen\">\n            <h2>Elbow Rotations</h2>\n            <div class=\"step-indicator\">Step 3 of 4</div>\n            <div class=\"progress-container\">\n                <div class=\"progress-bar\" id=\"elbow-progress\"></div>\n            </div>\n            <div class=\"motivation\">Keep movements slow and controlled</div>\n            <div class=\"pose-container\">\n                <div class=\"pose\">\n                    <div class=\"pose-figure\">\n                        <div class=\"head\"></div>\n                        <div class=\"body\"></div>\n                        <div class=\"arm left\" style=\"transform: rotate(90deg); top: 45px; width: 30px;\"></div>\n                        <div class=\"arm right\" style=\"transform: rotate(-90deg); top: 45px; width: 30px;\"></div>\n                        <div class=\"leg left\"></div>\n                        <div class=\"leg right\"></div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"instructions\">Rotate elbows in large circles, forward and backward</div>\n            <div class=\"timer\" id=\"elbow-timer\">0:45</div>\n            <div class=\"controls\">\n                <button id=\"pause-btn3\" class=\"secondary\">Pause</button>\n                <button id=\"next-btn3\">Next</button>\n            </div>\n        </div>\n        \n        <!-- Torso Twist Screen -->\n        <div id=\"torso-screen\" class=\"screen\">\n            <h2>Torso Twists</h2>\n            <div class=\"step-indicator\">Step 4 of 4</div>\n            <div class=\"progress-container\">\n                <div class=\"progress-bar\" id=\"torso-progress\"></div>\n            </div>\n            <div class=\"motivation\">Engage your core as you rotate</div>\n            <div class=\"pose-container\">\n                <div class=\"pose\">\n                    <div class=\"pose-figure\" style=\"transform: rotate(-20deg);\">\n                        <div class=\"head\"></div>\n                        <div class=\"body\"></div>\n                        <div class=\"arm left\" style=\"transform: rotate(30deg);\"></div>\n                        <div class=\"arm right\" style=\"transform: rotate(-30deg);\"></div>\n                        <div class=\"leg left\"></div>\n                        <div class=\"leg right\"></div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"instructions\">Gently twist your upper body from side to side</div>\n            <div class=\"timer\" id=\"torso-timer\">0:45</div>\n            <div class=\"controls\">\n                <button id=\"pause-btn4\" class=\"secondary\">Pause</button>\n                <button id=\"next-btn4\">Complete</button>\n            </div>\n        </div>\n        \n        <!-- Completion Screen -->\n        <div id=\"completion-screen\" class=\"screen\">\n            <div class=\"completion-screen\">\n                <h1>Great Job!</h1>\n                <p>You've completed the Morning Stretch Routine.</p>\n                <div class=\"pose-container\">\n                    <div class=\"pose\">\n                        <div class=\"pose-figure\">\n                            <div class=\"head\"></div>\n                            <div class=\"body\"></div>\n                            <div class=\"arm left\" style=\"transform: rotate(45deg);\"></div>\n                            <div class=\"arm right\" style=\"transform: rotate(-45deg);\"></div>\n                            <div class=\"leg left\"></div>\n                            <div class=\"leg right\"></div>\n                        </div>\n                    </div>\n                </div>\n                <p>Take this energy with you throughout your day!</p>\n                <div class=\"controls\">\n                    <button id=\"restart-btn\">Restart Routine</button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        // DOM Elements\n        const screens = {\n            welcome: document.getElementById('welcome-screen'),\n            breathing: document.getElementById('breathing-screen'),\n            arm: document.getElementById('arm-screen'),\n            elbow: document.getElementById('elbow-screen'),\n            torso: document.getElementById('torso-screen'),\n            completion: document.getElementById('completion-screen')\n        };\n        \n        const progressBars = {\n            breath: document.getElementById('breath-progress'),\n            arm: document.getElementById('arm-progress'),\n            elbow: document.getElementById('elbow-progress'),\n            torso: document.getElementById('torso-progress')\n        };\n        \n        const timers = {\n            breath: document.getElementById('breath-timer'),\n            arm: document.getElementById('arm-timer'),\n            elbow: document.getElementById('elbow-timer'),\n            torso: document.getElementById('torso-timer')\n        };\n        \n        const breathCircle = document.getElementById('breath-circle');\n        const startBtn = document.getElementById('start-btn');\n        const nextBtns = {\n            step1: document.getElementById('next-btn1'),\n            step2: document.getElementById('next-btn2'),\n            step3: document.getElementById('next-btn3'),\n            step4: document.getElementById('next-btn4')\n        };\n        \n        const pauseBtns = {\n            step1: document.getElementById('pause-btn'),\n            step2: document.getElementById('pause-btn2'),\n            step3: document.getElementById('pause-btn3'),\n            step4: document.getElementById('pause-btn4')\n        };\n        \n        const restartBtn = document.getElementById('restart-btn');\n        \n        // State variables\n        let currentScreen = 'welcome';\n        let timersActive = {\n            breath: false,\n            arm: false,\n            elbow: false,\n            torso: false\n        };\n        let timerIntervals = {};\n        let timerValues = {\n            breath: 30,\n            arm: 45,\n            elbow: 45,\n            torso: 45\n        };\n        let isBreathingIn = true;\n        let breathingInterval;\n        \n        // Initialize progress bars\n        progressBars.breath.style.width = '0%';\n        progressBars.arm.style.width = '0%';\n        progressBars.elbow.style.width = '0%';\n        progressBars.torso.style.width = '0%';\n        \n        // Switch between screens\n        function showScreen(screenName) {\n            screens[currentScreen].classList.remove('active');\n            screens[screenName].classList.add('active');\n            currentScreen = screenName;\n            \n            // Start appropriate timer when screen is shown\n            if (screenName === 'breathing') {\n                startBreathingExercise();\n            } else if (screenName === 'arm') {\n                startTimer('arm');\n            } else if (screenName === 'elbow') {\n                startTimer('elbow');\n            } else if (screenName === 'torso') {\n                startTimer('torso');\n            }\n        }\n        \n        // Breathing exercise logic\n        function startBreathingExercise() {\n            timersActive.breath = true;\n            breathCircle.textContent = 'Inhale';\n            breathCircle.style.backgroundColor = '#d0e8f2';\n            breathCircle.style.transform = 'scale(1)';\n            isBreathingIn = true;\n            \n            // Start breathing animation\n            breathingInterval = setInterval(() => {\n                if (isBreathingIn) {\n                    breathCircle.textContent = 'Exhale';\n                    breathCircle.style.backgroundColor = '#e0e0e0';\n                    breathCircle.style.transform = 'scale(0.7)';\n                } else {\n                    breathCircle.textContent = 'Inhale';\n                    breathCircle.style.backgroundColor = '#d0e8f2';\n                    breathCircle.style.transform = 'scale(1)';\n                }\n                isBreathingIn = !isBreathingIn;\n            }, 3000);\n            \n            // Start countdown timer\n            startTimer('breath');\n        }\n        \n        // Timer logic\n        function startTimer(step) {\n            if (timerIntervals[step]) {\n                clearInterval(timerIntervals[step]);\n            }\n            \n            let timeLeft = timerValues[step];\n            updateTimerDisplay(step, timeLeft);\n            \n            timerIntervals[step] = setInterval(() => {\n                if (timersActive[step]) {\n                    timeLeft--;\n                    updateTimerDisplay(step, timeLeft);\n                    updateProgressBar(step, timeLeft);\n                    \n                    if (timeLeft <= 0) {\n                        clearInterval(timerIntervals[step]);\n                        if (step === 'breath') {\n                            clearInterval(breathingInterval);\n                        }\n                    }\n                }\n            }, 1000);\n        }\n        \n        function updateTimerDisplay(step, timeLeft) {\n            const minutes = Math.floor(timeLeft / 60);\n            const seconds = timeLeft % 60;\n            timers[step].textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n        }\n        \n        function updateProgressBar(step, timeLeft) {\n            const totalTime = timerValues[step];\n            const percentage = ((totalTime - timeLeft) / totalTime) * 100;\n            progressBars[step].style.width = `${percentage}%`;\n        }\n        \n        function togglePause(step) {\n            timersActive[step] = !timersActive[step];\n            pauseBtns[`step${step === 'breath' ? 1 : step === 'arm' ? 2 : step === 'elbow' ? 3 : 4}`].textContent = \n                timersActive[step] ? 'Pause' : 'Resume';\n        }\n        \n        // Event Listeners\n        startBtn.addEventListener('click', () => showScreen('breathing'));\n        \n        nextBtns.step1.addEventListener('click', () => showScreen('arm'));\n        nextBtns.step2.addEventListener('click', () => showScreen('elbow'));\n        nextBtns.step3.addEventListener('click', () => showScreen('torso'));\n        nextBtns.step4.addEventListener('click', () => showScreen('completion'));\n        \n        pauseBtns.step1.addEventListener('click', () => togglePause('breath'));\n        pauseBtns.step2.addEventListener('click', () => togglePause('arm'));\n        pauseBtns.step3.addEventListener('click', () => togglePause('elbow'));\n        pauseBtns.step4.addEventListener('click', () => togglePause('torso'));\n        \n        restartBtn.addEventListener('click', () => {\n            // Reset all timers and progress\n            Object.keys(timerIntervals).forEach(step => {\n                clearInterval(timerIntervals[step]);\n            });\n            \n            timerValues = {\n                breath: 30,\n                arm: 45,\n                elbow: 45,\n                torso: 45\n            };\n            \n            progressBars.breath.style.width = '0%';\n            progressBars.arm.style.width = '0%';\n            progressBars.elbow.style.width = '0%';\n            progressBars.torso.style.width = '0%';\n            \n            timersActive = {\n                breath: false,\n                arm: false,\n                elbow: false,\n                torso: false\n            };\n            \n            showScreen('welcome');\n        });\n    </script>\n</body>\n</html>",
      "html_file_path": "generated_games/video_game_0cd6e502bd723141_1751209026.html",
      "created_at": "2025-06-29 14:57:06 UTC",
      "cached": true,
      "youtube_url": "https://www.youtube.com/watch?v=_2v6Mbx5v1w",
      "video_title": "3-min Stretch | Great in the morning or between work! | Beginners | Apartment Friendly",
      "twelvelabs_video_ids": [
        "686153da21f0ea193ed033fa"
      ],
      "primary_video_id": "686153da21f0ea193ed033fa",
      "total_chunks": null,
      "cache_key": "0cd6e502bd723141",
      "cached_at": "2025-06-29 14:57:06 UTC"
    },
    "dd2f49f007938719": {
      "video_id": "dd2f49f007938719",
      "video_analysis": "```json\n{\n  \"spec\": \"In neural networks, data flows through interconnected layers of nodes, each of which can be thought of as a linear regression model. The network learns and improves its accuracy over time through training data and backpropagation. Different types of neural networks, such as CNNs and RNNs, are suited for various tasks like image recognition and time series prediction.\n\n  Build an interactive web app to help learners understand the basics of neural networks.\n\n  SPECIFICATIONS:\n\n  1. The app must feature a visual representation of a neural network with input, hidden, and output layers.\n  2. The app must allow users to input data into the input layer and see how it flows through the network to the output layer.\n  3. The app must showcase the concept of linear regression models within each node, showing how inputs are multiplied by weights and added to a bias term.\n  4. The app must include a section where users can adjust the weights and biases of the nodes and observe how these changes affect the output.\n  5. The app must explain the concept of backpropagation and allow users to simulate the process of adjusting weights and biases based on training data.\n  6. The app must include examples of different types of neural networks, such as CNNs and RNNs, and explain their unique architectures and applications.\n  7. The app must provide a simple, playful interface with clear instructions and feedback to promote understanding and engagement.\n  8. The app must allow users to experiment with different scenarios and observe the outcomes, reinforcing the concepts of data flow, linear regression, and backpropagation.\"\n}\n```",
      "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Neural Network Explorer</title>\n    <style>\n        * {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n\n        body {\n            background-color: #ffffff;\n            color: #333;\n            line-height: 1.6;\n            padding: 20px;\n            max-width: 1200px;\n            margin: 0 auto;\n        }\n\n        header {\n            text-align: center;\n            margin-bottom: 30px;\n            padding: 20px;\n            border-bottom: 1px solid #eee;\n        }\n\n        h1 {\n            font-size: 2.5rem;\n            margin-bottom: 10px;\n            color: #222;\n        }\n\n        .game-container {\n            display: flex;\n            flex-direction: column;\n            gap: 30px;\n        }\n\n        .panel {\n            background-color: #f8f8f8;\n            border-radius: 10px;\n            padding: 25px;\n            box-shadow: 0 4px 6px rgba(0,0,0,0.05);\n        }\n\n        h2 {\n            font-size: 1.8rem;\n            margin-bottom: 20px;\n            color: #444;\n        }\n\n        h3 {\n            font-size: 1.4rem;\n            margin: 15px 0;\n            color: #555;\n        }\n\n        .network-container {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 300px;\n            margin: 20px 0;\n            position: relative;\n        }\n\n        .layer {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            margin: 0 20px;\n        }\n\n        .node {\n            width: 60px;\n            height: 60px;\n            border-radius: 50%;\n            background-color: #e0e0e0;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            margin: 15px 0;\n            font-weight: bold;\n            position: relative;\n            z-index: 2;\n        }\n\n        .input-node {\n            background-color: #d1e7dd;\n        }\n\n        .output-node {\n            background-color: #f8d7da;\n        }\n\n        .connection {\n            position: absolute;\n            background-color: #bbb;\n            transform-origin: 0 0;\n            z-index: 1;\n        }\n\n        .controls {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n            gap: 20px;\n            margin: 20px 0;\n        }\n\n        .control-group {\n            background-color: #eee;\n            padding: 15px;\n            border-radius: 8px;\n        }\n\n        label {\n            display: block;\n            margin-bottom: 8px;\n            font-weight: 500;\n        }\n\n        input[type=\"range\"], input[type=\"number\"] {\n            width: 100%;\n            padding: 8px;\n            margin-bottom: 15px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n        }\n\n        button {\n            background-color: #4a4a4a;\n            color: white;\n            border: none;\n            padding: 12px 20px;\n            border-radius: 5px;\n            cursor: pointer;\n            font-size: 1rem;\n            font-weight: 500;\n            transition: background-color 0.3s;\n            margin: 5px;\n        }\n\n        button:hover {\n            background-color: #333;\n        }\n\n        .btn-primary {\n            background-color: #5c5c5c;\n        }\n\n        .levels {\n            display: flex;\n            justify-content: center;\n            gap: 10px;\n            margin: 20px 0;\n        }\n\n        .level-btn {\n            padding: 10px 20px;\n        }\n\n        .level-btn.active {\n            background-color: #333;\n        }\n\n        .output-display {\n            background-color: #e9ecef;\n            padding: 15px;\n            border-radius: 8px;\n            margin: 20px 0;\n            min-height: 80px;\n        }\n\n        .training-data {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 15px;\n            margin: 20px 0;\n        }\n\n        .data-point {\n            background-color: #e9ecef;\n            padding: 15px;\n            border-radius: 8px;\n            text-align: center;\n        }\n\n        .network-types {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n            gap: 20px;\n            margin-top: 20px;\n        }\n\n        .network-type {\n            background-color: #e9ecef;\n            padding: 20px;\n            border-radius: 8px;\n        }\n\n        .progress-container {\n            margin: 30px 0;\n        }\n\n        .progress-bar {\n            height: 20px;\n            background-color: #e0e0e0;\n            border-radius: 10px;\n            overflow: hidden;\n        }\n\n        .progress {\n            height: 100%;\n            background-color: #6c757d;\n            width: 0%;\n            transition: width 0.5s;\n        }\n\n        .feedback {\n            margin: 20px 0;\n            padding: 15px;\n            border-radius: 8px;\n            background-color: #e9ecef;\n        }\n\n        .hidden {\n            display: none;\n        }\n\n        @media (max-width: 768px) {\n            .controls {\n                grid-template-columns: 1fr;\n            }\n            \n            .network-types {\n                grid-template-columns: 1fr;\n            }\n            \n            .layer {\n                margin: 0 10px;\n            }\n            \n            .node {\n                width: 50px;\n                height: 50px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <header>\n        <h1>Neural Network Explorer</h1>\n        <p>Understand how neural networks process information through interactive experimentation</p>\n    </header>\n\n    <div class=\"game-container\">\n        <div class=\"panel\">\n            <h2>Interactive Neural Network</h2>\n            <div class=\"levels\">\n                <button class=\"level-btn active\" data-level=\"1\">Level 1: Basic Network</button>\n                <button class=\"level-btn\" data-level=\"2\">Level 2: Training</button>\n                <button class=\"level-btn\" data-level=\"3\">Level 3: Network Types</button>\n            </div>\n            \n            <div class=\"progress-container\">\n                <div class=\"progress-bar\">\n                    <div class=\"progress\" id=\"progress\"></div>\n                </div>\n            </div>\n            \n            <div id=\"level-1\">\n                <div class=\"network-container\" id=\"network\">\n                    <!-- Dynamically generated network -->\n                </div>\n                \n                <div class=\"controls\">\n                    <div class=\"control-group\">\n                        <h3>Input Values</h3>\n                        <label for=\"input1\">Input Node 1:</label>\n                        <input type=\"range\" id=\"input1\" min=\"0\" max=\"1\" step=\"0.1\" value=\"0.5\">\n                        <label for=\"input2\">Input Node 2:</label>\n                        <input type=\"range\" id=\"input2\" min=\"0\" max=\"1\" step=\"0.1\" value=\"0.5\">\n                    </div>\n                    \n                    <div class=\"control-group\">\n                        <h3>Weights & Biases</h3>\n                        <label for=\"weight1\">Weight 1 (Input1 → Hidden1):</label>\n                        <input type=\"range\" id=\"weight1\" min=\"-2\" max=\"2\" step=\"0.1\" value=\"0.7\">\n                        <label for=\"bias1\">Bias (Hidden Layer):</label>\n                        <input type=\"range\" id=\"bias1\" min=\"-1\" max=\"1\" step=\"0.1\" value=\"0.2\">\n                    </div>\n                </div>\n                \n                <div class=\"output-display\">\n                    <h3>Output: <span id=\"output-value\">0.00</span></h3>\n                    <p>Adjust inputs, weights, and biases to see how they affect the output</p>\n                </div>\n                \n                <div class=\"feedback\">\n                    <h3>How It Works</h3>\n                    <p>Each node calculates: (input1 × weight1) + (input2 × weight2) + bias</p>\n                    <p>The result passes through an activation function to produce the output</p>\n                </div>\n                \n                <button id=\"run-network\" class=\"btn-primary\">Run Network</button>\n            </div>\n            \n            <div id=\"level-2\" class=\"hidden\">\n                <h3>Training with Backpropagation</h3>\n                <div class=\"training-data\">\n                    <div class=\"data-point\">\n                        <p>Training Example 1</p>\n                        <p>Input: [0,0] → Expected: 0</p>\n                    </div>\n                    <div class=\"data-point\">\n                        <p>Training Example 2</p>\n                        <p>Input: [0,1] → Expected: 1</p>\n                    </div>\n                    <div class=\"data-point\">\n                        <p>Training Example 3</p>\n                        <p>Input: [1,0] → Expected: 1</p>\n                    </div>\n                    <div class=\"data-point\">\n                        <p>Training Example 4</p>\n                        <p>Input: [1,1] → Expected: 1</p>\n                    </div>\n                </div>\n                \n                <div class=\"controls\">\n                    <div class=\"control-group\">\n                        <h3>Training Parameters</h3>\n                        <label for=\"learning-rate\">Learning Rate:</label>\n                        <input type=\"range\" id=\"learning-rate\" min=\"0.01\" max=\"1\" step=\"0.01\" value=\"0.1\">\n                        <label for=\"epochs\">Training Epochs:</label>\n                        <input type=\"number\" id=\"epochs\" min=\"1\" max=\"1000\" value=\"100\">\n                    </div>\n                    \n                    <div class=\"control-group\">\n                        <h3>Current Error</h3>\n                        <p id=\"error-display\">0.0000</p>\n                        <div class=\"progress-bar\">\n                            <div class=\"progress\" id=\"error-progress\"></div>\n                        </div>\n                        <p>Lower error means better predictions</p>\n                    </div>\n                </div>\n                \n                <button id=\"train-network\" class=\"btn-primary\">Train Network</button>\n                <button id=\"reset-weights\">Reset Weights</button>\n                \n                <div class=\"feedback\">\n                    <h3>Backpropagation Explained</h3>\n                    <p>The network compares its output to the expected result and calculates the error</p>\n                    <p>This error is propagated backward through the network to adjust weights and biases</p>\n                </div>\n            </div>\n            \n            <div id=\"level-3\" class=\"hidden\">\n                <h3>Different Neural Network Architectures</h3>\n                <div class=\"network-types\">\n                    <div class=\"network-type\">\n                        <h4>Convolutional Neural Network (CNN)</h4>\n                        <p>Specialized for image processing</p>\n                        <p>Uses convolutional layers to detect features</p>\n                        <div class=\"mini-network\">\n                            <div class=\"layer\">\n                                <div class=\"node\">Input</div>\n                                <div class=\"node\">Conv</div>\n                                <div class=\"node\">Pool</div>\n                                <div class=\"node\">Output</div>\n                            </div>\n                        </div>\n                        <p>Applications: Image recognition, object detection</p>\n                    </div>\n                    \n                    <div class=\"network-type\">\n                        <h4>Recurrent Neural Network (RNN)</h4>\n                        <p>Designed for sequence data</p>\n                        <p>Has memory to process sequences</p>\n                        <div class=\"mini-network\">\n                            <div class=\"layer\">\n                                <div class=\"node\">Input</div>\n                                <div class=\"node\">RNN</div>\n                                <div class=\"node\">Output</div>\n                                <div class=\"node\">↩</div>\n                            </div>\n                        </div>\n                        <p>Applications: Language translation, time series prediction</p>\n                    </div>\n                </div>\n                \n                <div class=\"feedback\">\n                    <h3>Key Differences</h3>\n                    <p>CNNs use spatial hierarchies, RNNs handle temporal sequences</p>\n                    <p>Both can be combined for complex tasks like video analysis</p>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', function() {\n            // Game state\n            const gameState = {\n                currentLevel: 1,\n                progress: 0,\n                weights: [0.7, -0.5, 0.3, 0.8],\n                biases: [0.2, -0.1],\n                error: 1.0\n            };\n\n            // DOM Elements\n            const levelButtons = document.querySelectorAll('.level-btn');\n            const level1 = document.getElementById('level-1');\n            const level2 = document.getElementById('level-2');\n            const level3 = document.getElementById('level-3');\n            const progressBar = document.getElementById('progress');\n            const outputValue = document.getElementById('output-value');\n            const errorDisplay = document.getElementById('error-display');\n            const errorProgress = document.getElementById('error-progress');\n            const runButton = document.getElementById('run-network');\n            const trainButton = document.getElementById('train-network');\n            const resetButton = document.getElementById('reset-weights');\n            const networkContainer = document.getElementById('network');\n\n            // Initialize network visualization\n            createNetworkVisualization();\n\n            // Level switching\n            levelButtons.forEach(button => {\n                button.addEventListener('click', function() {\n                    const level = parseInt(this.dataset.level);\n                    switchLevel(level);\n                });\n            });\n\n            // Run network button\n            runButton.addEventListener('click', runNetwork);\n\n            // Train network button\n            trainButton.addEventListener('click', trainNetwork);\n\n            // Reset weights button\n            resetButton.addEventListener('click', resetWeights);\n\n            // Input change listeners\n            document.getElementById('input1').addEventListener('input', runNetwork);\n            document.getElementById('input2').addEventListener('input', runNetwork);\n            document.getElementById('weight1').addEventListener('input', runNetwork);\n            document.getElementById('bias1').addEventListener('input', runNetwork);\n\n            // Functions\n            function switchLevel(level) {\n                gameState.currentLevel = level;\n                \n                // Update UI\n                levelButtons.forEach(btn => {\n                    btn.classList.toggle('active', parseInt(btn.dataset.level) === level);\n                });\n                \n                level1.classList.toggle('hidden', level !== 1);\n                level2.classList.toggle('hidden', level !== 2);\n                level3.classList.toggle('hidden', level !== 3);\n                \n                // Update progress\n                gameState.progress = (level - 1) * 50;\n                progressBar.style.width = `${gameState.progress}%`;\n                \n                // Run network when switching to level 1\n                if (level === 1) {\n                    runNetwork();\n                }\n            }\n\n            function createNetworkVisualization() {\n                // Clear existing network\n                networkContainer.innerHTML = '';\n                \n                // Create layers\n                const layers = [\n                    {name: 'Input', nodes: 2, type: 'input'},\n                    {name: 'Hidden', nodes: 2, type: 'hidden'},\n                    {name: 'Output', nodes: 1, type: 'output'}\n                ];\n                \n                // Create SVG for connections\n                const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n                svg.setAttribute('width', '100%');\n                svg.setAttribute('height', '100%');\n                svg.style.position = 'absolute';\n                svg.style.top = '0';\n                svg.style.left = '0';\n                svg.style.zIndex = '1';\n                networkContainer.appendChild(svg);\n                \n                // Create layers and nodes\n                layers.forEach((layer, layerIndex) => {\n                    const layerDiv = document.createElement('div');\n                    layerDiv.className = `layer ${layer.type}-layer`;\n                    \n                    for (let i = 0; i < layer.nodes; i++) {\n                        const node = document.createElement('div');\n                        node.className = `node ${layer.type}-node`;\n                        node.id = `${layer.type}-node-${i}`;\n                        node.textContent = layer.type.charAt(0);\n                        layerDiv.appendChild(node);\n                        \n                        // Add connections to next layer\n                        if (layerIndex < layers.length - 1) {\n                            const nextLayer = layers[layerIndex + 1];\n                            for (let j = 0; j < nextLayer.nodes; j++) {\n                                setTimeout(() => {\n                                    const startNode = document.getElementById(`${layer.type}-node-${i}`);\n                                    const endNode = document.getElementById(`${nextLayer.type}-node-${j}`);\n                                    \n                                    if (startNode && endNode) {\n                                        const startRect = startNode.getBoundingClientRect();\n                                        const endRect = endNode.getBoundingClientRect();\n                                        const containerRect = networkContainer.getBoundingClientRect();\n                                        \n                                        const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n                                        line.setAttribute('x1', startRect.left + startRect.width/2 - containerRect.left);\n                                        line.setAttribute('y1', startRect.top + startRect.height/2 - containerRect.top);\n                                        line.setAttribute('x2', endRect.left + endRect.width/2 - containerRect.left);\n                                        line.setAttribute('y2', endRect.top + endRect.height/2 - containerRect.top);\n                                        line.setAttribute('stroke', '#999');\n                                        line.setAttribute('stroke-width', '2');\n                                        svg.appendChild(line);\n                                    }\n                                }, 100);\n                            }\n                        }\n                    }\n                    \n                    networkContainer.appendChild(layerDiv);\n                });\n            }\n\n            function runNetwork() {\n                // Get input values\n                const input1 = parseFloat(document.getElementById('input1').value);\n                const input2 = parseFloat(document.getElementById('input2').value);\n                \n                // Get weights and biases\n                const weight1 = parseFloat(document.getElementById('weight1').value);\n                const bias1 = parseFloat(document.getElementById('bias1').value);\n                \n                // Simple neural network calculation\n                const hidden1 = Math.tanh((input1 * weight1) + (input2 * 0.5) + bias1);\n                const output = Math.tanh((hidden1 * 0.8) + (0.3 * -0.2));\n                \n                // Display output\n                outputValue.textContent = output.toFixed(4);\n                \n                // Update node values in visualization\n                document.getElementById('input-node-0').textContent = input1.toFixed(1);\n                document.getElementById('input-node-1').textContent = input2.toFixed(1);\n                document.getElementById('hidden-node-0').textContent = hidden1.toFixed(2);\n                document.getElementById('output-node-0').textContent = output.toFixed(2);\n            }\n\n            function trainNetwork() {\n                // Simulate training process\n                let error = gameState.error;\n                const epochs = parseInt(document.getElementById('epochs').value);\n                const learningRate = parseFloat(document.getElementById('learning-rate').value);\n                \n                let progress = 0;\n                const interval = setInterval(() => {\n                    // Reduce error\n                    error = Math.max(0, error - (Math.random() * 0.05));\n                    gameState.error = error;\n                    \n                    // Update UI\n                    errorDisplay.textContent = error.toFixed(4);\n                    errorProgress.style.width = `${(1 - error) * 100}%`;\n                    \n                    // Update weights display\n                    document.getElementById('weight1').value = (0.7 - error * 0.3).toFixed(2);\n                    \n                    progress += 100 / epochs;\n                    if (progress >= 100) {\n                        clearInterval(interval);\n                        \n                        // Update progress\n                        gameState.progress = Math.min(100, gameState.progress + 25);\n                        progressBar.style.width = `${gameState.progress}%`;\n                    }\n                }, 50);\n            }\n\n            function resetWeights() {\n                // Reset weights and biases\n                document.getElementById('weight1').value = 0.7;\n                document.getElementById('bias1').value = 0.2;\n                \n                // Reset error\n                gameState.error = 1.0;\n                errorDisplay.textContent = gameState.error.toFixed(4);\n                errorProgress.style.width = '0%';\n                \n                runNetwork();\n            }\n\n            // Initialize\n            runNetwork();\n        });\n    </script>\n</body>\n</html>",
      "html_file_path": "generated_games/video_game_dd2f49f007938719_1751215276.html",
      "created_at": "2025-06-29 16:41:16 UTC",
      "cached": true,
      "youtube_url": "https://www.youtube.com/watch?v=jmmW0F0biz0",
      "video_title": "Neural Networks Explained in 5 minutes",
      "twelvelabs_video_ids": [
        "68616c3a042f13dfd543c91f"
      ],
      "primary_video_id": "68616c3a042f13dfd543c91f",
      "total_chunks": null,
      "cache_key": "dd2f49f007938719",
      "cached_at": "2025-06-29 16:41:16 UTC"
    },
    "e0f30888d8ae998d": {
      "video_id": "e0f30888d8ae998d",
      "video_analysis": "```json\n{\n  \"spec\": \"Build an interactive web app to help learners understand SHAP values and their application in machine learning models.\\n\\nSPECIFICATIONS:\\n\\n1. The app must feature a simple, user-friendly interface with clear navigation.\\n2. The app must include an interactive section where users can input different feature values for a hypothetical employee, such as years of experience, degree status, sales performance, and days late.\\n3. The app must display a bar chart that shows the SHAP values for each input feature, illustrating how each feature contributes to the predicted bonus.\\n4. The app must provide a visual explanation of SHAP values, including how they increase or decrease the prediction compared to the average prediction across all employees.\\n5. The app must include a section that explains the concept of SHAP values in the context of classification problems, using an example of predicting whether a mushroom is poisonous or edible.\\n6. The app must allow users to explore different scenarios by changing feature values and observing the impact on the predicted outcome and SHAP values.\\n7. The app must include a debugging section where users can input incorrect predictions and understand which features have caused the error.\\n8. The app must provide human-friendly explanations for predictions, highlighting the key features that influenced the outcome.\\n9. The app must include a data exploration section where users can learn about hidden patterns and interactions within the data set.\\n10. The app must offer a brief introduction to the theory behind SHAP and a guide to using the Python SHAP package, with links to further resources for learning.\"\n}\n```",
      "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>SHAP Values Explorer</title>\n    <style>\n        * {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n        \n        body {\n            background-color: #ffffff;\n            color: #333333;\n            line-height: 1.6;\n            padding: 20px;\n            max-width: 1200px;\n            margin: 0 auto;\n        }\n        \n        header {\n            text-align: center;\n            margin-bottom: 30px;\n            padding: 20px;\n            border-bottom: 1px solid #e0e0e0;\n        }\n        \n        h1 {\n            font-size: 2.2rem;\n            margin-bottom: 10px;\n            color: #222222;\n        }\n        \n        .subtitle {\n            font-size: 1.1rem;\n            color: #666666;\n            max-width: 800px;\n            margin: 0 auto;\n        }\n        \n        .game-container {\n            display: flex;\n            flex-direction: column;\n            gap: 30px;\n            background-color: #f8f8f8;\n            border-radius: 10px;\n            padding: 25px;\n            box-shadow: 0 4px 12px rgba(0,0,0,0.05);\n        }\n        \n        .section {\n            background-color: white;\n            border-radius: 8px;\n            padding: 25px;\n            box-shadow: 0 2px 8px rgba(0,0,0,0.05);\n        }\n        \n        h2 {\n            font-size: 1.6rem;\n            margin-bottom: 20px;\n            color: #222222;\n            padding-bottom: 10px;\n            border-bottom: 1px solid #eeeeee;\n        }\n        \n        .input-group {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n            gap: 20px;\n            margin-bottom: 25px;\n        }\n        \n        .input-container {\n            display: flex;\n            flex-direction: column;\n        }\n        \n        label {\n            font-weight: 600;\n            margin-bottom: 8px;\n            color: #444444;\n        }\n        \n        input[type=\"range\"] {\n            width: 100%;\n            margin-top: 5px;\n        }\n        \n        select, input[type=\"number\"] {\n            padding: 10px;\n            border: 1px solid #dddddd;\n            border-radius: 4px;\n            font-size: 1rem;\n        }\n        \n        .visualization {\n            margin: 30px 0;\n            padding: 20px;\n            background-color: #fafafa;\n            border-radius: 8px;\n        }\n        \n        .chart-container {\n            height: 300px;\n            display: flex;\n            align-items: flex-end;\n            justify-content: space-around;\n            margin-top: 20px;\n            padding: 20px 0;\n            border-top: 1px solid #eeeeee;\n        }\n        \n        .bar {\n            width: 60px;\n            background-color: #4a90e2;\n            margin: 0 10px;\n            position: relative;\n            transition: height 0.3s ease;\n        }\n        \n        .bar-label {\n            position: absolute;\n            bottom: -25px;\n            width: 100%;\n            text-align: center;\n            font-size: 0.9rem;\n            color: #666666;\n        }\n        \n        .bar-value {\n            position: absolute;\n            top: -25px;\n            width: 100%;\n            text-align: center;\n            font-weight: 600;\n        }\n        \n        .prediction {\n            text-align: center;\n            font-size: 1.4rem;\n            font-weight: 600;\n            margin: 25px 0;\n            padding: 15px;\n            background-color: #f0f7ff;\n            border-radius: 8px;\n            border-left: 4px solid #4a90e2;\n        }\n        \n        .explanation {\n            background-color: #f9f9f9;\n            padding: 20px;\n            border-radius: 8px;\n            margin: 25px 0;\n            border-left: 4px solid #cccccc;\n        }\n        \n        .controls {\n            display: flex;\n            justify-content: space-between;\n            margin-top: 30px;\n        }\n        \n        button {\n            padding: 12px 25px;\n            background-color: #4a90e2;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            font-size: 1rem;\n            font-weight: 600;\n            cursor: pointer;\n            transition: background-color 0.2s;\n        }\n        \n        button:hover {\n            background-color: #3a7bc8;\n        }\n        \n        button:disabled {\n            background-color: #cccccc;\n            cursor: not-allowed;\n        }\n        \n        .step-indicator {\n            display: flex;\n            justify-content: center;\n            margin: 20px 0;\n        }\n        \n        .step {\n            width: 12px;\n            height: 12px;\n            border-radius: 50%;\n            background-color: #cccccc;\n            margin: 0 8px;\n        }\n        \n        .step.active {\n            background-color: #4a90e2;\n        }\n        \n        .debug-section {\n            background-color: #fff8f8;\n            border-left: 4px solid #e74c3c;\n        }\n        \n        .debug-input {\n            display: flex;\n            gap: 15px;\n            margin: 20px 0;\n            flex-wrap: wrap;\n        }\n        \n        .debug-result {\n            margin-top: 20px;\n            padding: 15px;\n            background-color: #fef2f2;\n            border-radius: 6px;\n        }\n        \n        .feature-impact {\n            margin: 10px 0;\n            padding: 10px;\n            background-color: white;\n            border-radius: 4px;\n            display: flex;\n            justify-content: space-between;\n        }\n        \n        @media (max-width: 768px) {\n            .input-group {\n                grid-template-columns: 1fr;\n            }\n            \n            .controls {\n                flex-direction: column;\n                gap: 15px;\n            }\n            \n            button {\n                width: 100%;\n            }\n        }\n    </style>\n</head>\n<body>\n    <header>\n        <h1>SHAP Values Explorer</h1>\n        <p class=\"subtitle\">Understand how machine learning models make decisions through interactive exploration of SHAP values</p>\n    </header>\n    \n    <main class=\"game-container\">\n        <section class=\"section\" id=\"step1\">\n            <h2>Employee Bonus Prediction</h2>\n            <p>Adjust the employee features to see how each factor influences their predicted bonus. The SHAP values show how each feature moves the prediction from the average bonus.</p>\n            \n            <div class=\"input-group\">\n                <div class=\"input-container\">\n                    <label for=\"experience\">Years of Experience</label>\n                    <input type=\"range\" id=\"experience\" min=\"0\" max=\"20\" value=\"5\">\n                    <span id=\"experience-value\">5 years</span>\n                </div>\n                \n                <div class=\"input-container\">\n                    <label for=\"degree\">Highest Degree</label>\n                    <select id=\"degree\">\n                        <option value=\"0\">High School</option>\n                        <option value=\"1\" selected>Bachelor's</option>\n                        <option value=\"2\">Master's</option>\n                        <option value=\"3\">PhD</option>\n                    </select>\n                </div>\n                \n                <div class=\"input-container\">\n                    <label for=\"sales\">Sales Performance ($)</label>\n                    <input type=\"range\" id=\"sales\" min=\"0\" max=\"100000\" value=\"50000\" step=\"5000\">\n                    <span id=\"sales-value\">$50,000</span>\n                </div>\n                \n                <div class=\"input-container\">\n                    <label for=\"late\">Days Late (Last Year)</label>\n                    <input type=\"range\" id=\"late\" min=\"0\" max=\"20\" value=\"3\">\n                    <span id=\"late-value\">3 days</span>\n                </div>\n            </div>\n            \n            <div class=\"visualization\">\n                <h3>SHAP Value Impact</h3>\n                <div class=\"chart-container\" id=\"shap-chart\">\n                    <!-- Bars will be generated by JavaScript -->\n                </div>\n                \n                <div class=\"prediction\">\n                    Predicted Bonus: <span id=\"prediction-value\">$7,200</span>\n                </div>\n                \n                <div class=\"explanation\">\n                    <p>The base value (average bonus) is $5,000. Each feature either increases or decreases this base value:</p>\n                    <ul>\n                        <li>Positive SHAP values (blue bars) increase the bonus prediction</li>\n                        <li>Negative SHAP values (red bars) decrease the bonus prediction</li>\n                    </ul>\n                </div>\n            </div>\n        </section>\n        \n        <section class=\"section\" id=\"step2\">\n            <h2>Mushroom Classification</h2>\n            <p>In this classification example, we predict whether a mushroom is poisonous or edible based on its features. SHAP values show how each feature contributes to the prediction.</p>\n            \n            <div class=\"input-group\">\n                <div class=\"input-container\">\n                    <label for=\"odor\">Odor</label>\n                    <select id=\"odor\">\n                        <option value=\"0\">None</option>\n                        <option value=\"1\">Almond</option>\n                        <option value=\"2\">Pungent</option>\n                        <option value=\"3\">Creosote</option>\n                    </select>\n                </div>\n                \n                <div class=\"input-container\">\n                    <label for=\"cap-color\">Cap Color</label>\n                    <select id=\"cap-color\">\n                        <option value=\"0\">Brown</option>\n                        <option value=\"1\">Yellow</option>\n                        <option value=\"2\">White</option>\n                        <option value=\"3\">Green</option>\n                    </select>\n                </div>\n            </div>\n            \n            <div class=\"visualization\">\n                <div class=\"prediction\">\n                    Prediction: <span id=\"mushroom-prediction\">Edible (82% probability)</span>\n                </div>\n                \n                <div class=\"chart-container\" id=\"mushroom-chart\">\n                    <!-- Bars will be generated by JavaScript -->\n                </div>\n                \n                <div class=\"explanation\">\n                    <p>SHAP values for classification show how each feature moves the prediction from the base probability (50% in this case). Features can push the prediction toward \"poisonous\" or \"edible\".</p>\n                </div>\n            </div>\n        </section>\n        \n        <section class=\"section debug-section\" id=\"step3\">\n            <h2>Model Debugging</h2>\n            <p>Enter a case where the model made an incorrect prediction. We'll analyze which features contributed to the error.</p>\n            \n            <div class=\"debug-input\">\n                <div class=\"input-container\">\n                    <label>Actual Status</label>\n                    <select id=\"actual-status\">\n                        <option value=\"poisonous\">Poisonous</option>\n                        <option value=\"edible\" selected>Edible</option>\n                    </select>\n                </div>\n                \n                <div class=\"input-container\">\n                    <label>Model Prediction</label>\n                    <select id=\"predicted-status\">\n                        <option value=\"poisonous\" selected>Poisonous</option>\n                        <option value=\"edible\">Edible</option>\n                    </select>\n                </div>\n            </div>\n            \n            <div class=\"debug-result\">\n                <h3>Debugging Analysis</h3>\n                <p>The model incorrectly predicted <strong>poisonous</strong> when the mushroom was actually <strong>edible</strong>.</p>\n                \n                <div class=\"feature-impact\">\n                    <span>Odor (Almond)</span>\n                    <span>+0.25 (contributed to error)</span>\n                </div>\n                \n                <div class=\"feature-impact\">\n                    <span>Cap Color (White)</span>\n                    <span>-0.18 (partially corrected)</span>\n                </div>\n                \n                <p class=\"explanation\">Features with positive SHAP values pushed the prediction toward poisonous, causing the error. The cap color feature partially corrected this but wasn't sufficient.</p>\n            </div>\n        </section>\n        \n        <div class=\"step-indicator\">\n            <div class=\"step active\" data-step=\"1\"></div>\n            <div class=\"step\" data-step=\"2\"></div>\n            <div class=\"step\" data-step=\"3\"></div>\n        </div>\n        \n        <div class=\"controls\">\n            <button id=\"prev-btn\" disabled>Previous</button>\n            <button id=\"next-btn\">Next</button>\n        </div>\n    </main>\n\n    <script>\n        // Current step tracking\n        let currentStep = 1;\n        const totalSteps = 3;\n        \n        // DOM elements\n        const prevBtn = document.getElementById('prev-btn');\n        const nextBtn = document.getElementById('next-btn');\n        const stepIndicators = document.querySelectorAll('.step');\n        const sections = document.querySelectorAll('.section');\n        \n        // Employee bonus inputs\n        const experienceInput = document.getElementById('experience');\n        const degreeInput = document.getElementById('degree');\n        const salesInput = document.getElementById('sales');\n        const lateInput = document.getElementById('late');\n        \n        // Mushroom inputs\n        const odorInput = document.getElementById('odor');\n        const capColorInput = document.getElementById('cap-color');\n        \n        // Display elements\n        const experienceValue = document.getElementById('experience-value');\n        const salesValue = document.getElementById('sales-value');\n        const lateValue = document.getElementById('late-value');\n        const predictionValue = document.getElementById('prediction-value');\n        const mushroomPrediction = document.getElementById('mushroom-prediction');\n        const shapChart = document.getElementById('shap-chart');\n        const mushroomChart = document.getElementById('mushroom-chart');\n        \n        // Initialize the app\n        function init() {\n            updateInputDisplays();\n            calculateBonus();\n            calculateMushroom();\n            updateStepVisibility();\n            \n            // Event listeners\n            prevBtn.addEventListener('click', goToPreviousStep);\n            nextBtn.addEventListener('click', goToNextStep);\n            \n            experienceInput.addEventListener('input', () => {\n                experienceValue.textContent = `${experienceInput.value} years`;\n                calculateBonus();\n            });\n            \n            salesInput.addEventListener('input', () => {\n                salesValue.textContent = `$${parseInt(salesInput.value).toLocaleString()}`;\n                calculateBonus();\n            });\n            \n            lateInput.addEventListener('input', () => {\n                lateValue.textContent = `${lateInput.value} days`;\n                calculateBonus();\n            });\n            \n            degreeInput.addEventListener('change', calculateBonus);\n            odorInput.addEventListener('change', calculateMushroom);\n            capColorInput.addEventListener('change', calculateMushroom);\n        }\n        \n        // Update input value displays\n        function updateInputDisplays() {\n            experienceValue.textContent = `${experienceInput.value} years`;\n            salesValue.textContent = `$${parseInt(salesInput.value).toLocaleString()}`;\n            lateValue.textContent = `${lateInput.value} days`;\n        }\n        \n        // Calculate bonus prediction and SHAP values\n        function calculateBonus() {\n            const experience = parseInt(experienceInput.value);\n            const degree = parseInt(degreeInput.value);\n            const sales = parseInt(salesInput.value);\n            const late = parseInt(lateInput.value);\n            \n            // Base value (average bonus)\n            const baseValue = 5000;\n            \n            // Calculate feature contributions (SHAP values)\n            const experienceContribution = experience * 300;\n            const degreeContribution = degree * 1000;\n            const salesContribution = sales * 0.04;\n            const lateContribution = late * -200;\n            \n            // Total prediction\n            const prediction = baseValue + experienceContribution + degreeContribution + salesContribution + lateContribution;\n            \n            // Update display\n            predictionValue.textContent = `$${Math.round(prediction).toLocaleString()}`;\n            \n            // Update SHAP chart\n            updateShapChart([\n                { feature: 'Experience', value: experienceContribution },\n                { feature: 'Degree', value: degreeContribution },\n                { feature: 'Sales', value: salesContribution },\n                { feature: 'Days Late', value: lateContribution },\n                { feature: 'Base Value', value: baseValue }\n            ], baseValue);\n        }\n        \n        // Calculate mushroom prediction\n        function calculateMushroom() {\n            const odor = parseInt(odorInput.value);\n            const capColor = parseInt(capColorInput.value);\n            \n            // Base probability (log odds)\n            const baseValue = 0;\n            \n            // Calculate feature contributions (SHAP values)\n            const odorContributions = [0.2, -0.4, 0.6, 0.8];\n            const capColorContributions = [-0.1, 0.3, -0.2, 0.1];\n            \n            const odorContribution = odorContributions[odor];\n            const capColorContribution = capColorContributions[capColor];\n            \n            // Total prediction (log odds)\n            const logOdds = baseValue + odorContribution + capColorContribution;\n            \n            // Convert to probability\n            const probability = 1 / (1 + Math.exp(-logOdds));\n            const edibleProbability = Math.round(probability * 100);\n            const poisonousProbability = 100 - edibleProbability;\n            \n            // Update display\n            const predictionText = edibleProbability >= 50 ? \n                `Edible (${edibleProbability}% probability)` : \n                `Poisonous (${poisonousProbability}% probability)`;\n                \n            mushroomPrediction.textContent = predictionText;\n            \n            // Update mushroom SHAP chart\n            updateMushroomChart([\n                { feature: 'Odor', value: odorContribution },\n                { feature: 'Cap Color', value: capColorContribution },\n                { feature: 'Base Value', value: baseValue }\n            ]);\n        }\n        \n        // Update SHAP value chart for employee bonus\n        function updateShapChart(features, baseValue) {\n            shapChart.innerHTML = '';\n            \n            // Find max absolute value for scaling\n            const maxValue = Math.max(...features.map(f => Math.abs(f.value)), 5000);\n            const scale = 120 / maxValue;\n            \n            features.forEach(feature => {\n                const barHeight = Math.abs(feature.value) * scale;\n                const isPositive = feature.value >= 0;\n                const isBase = feature.feature === 'Base Value';\n                \n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = `${barHeight}px`;\n                bar.style.backgroundColor = isBase ? '#aaaaaa' : (isPositive ? '#4a90e2' : '#e74c3c');\n                bar.style.marginTop = isPositive ? 'auto' : '0';\n                \n                const barLabel = document.createElement('div');\n                barLabel.className = 'bar-label';\n                barLabel.textContent = feature.feature;\n                \n                const barValue = document.createElement('div');\n                barValue.className = 'bar-value';\n                barValue.textContent = Math.round(feature.value);\n                barValue.style.color = isBase ? '#333333' : (isPositive ? '#4a90e2' : '#e74c3c');\n                \n                bar.appendChild(barValue);\n                bar.appendChild(barLabel);\n                shapChart.appendChild(bar);\n            });\n        }\n        \n        // Update SHAP value chart for mushroom classification\n        function updateMushroomChart(features) {\n            mushroomChart.innerHTML = '';\n            \n            // Find max absolute value for scaling\n            const maxValue = Math.max(...features.map(f => Math.abs(f.value)), 1);\n            const scale = 120 / maxValue;\n            \n            features.forEach(feature => {\n                const barHeight = Math.abs(feature.value) * scale;\n                const isPositive = feature.value >= 0;\n                const isBase = feature.feature === 'Base Value';\n                \n                const bar = document.createElement('div');\n                bar.className = 'bar';\n                bar.style.height = `${barHeight}px`;\n                bar.style.backgroundColor = isBase ? '#aaaaaa' : (isPositive ? '#4a90e2' : '#e74c3c');\n                bar.style.marginTop = isPositive ? 'auto' : '0';\n                \n                const barLabel = document.createElement('div');\n                barLabel.className = 'bar-label';\n                barLabel.textContent = feature.feature;\n                \n                const barValue = document.createElement('div');\n                barValue.className = 'bar-value';\n                barValue.textContent = feature.value.toFixed(2);\n                barValue.style.color = isBase ? '#333333' : (isPositive ? '#4a90e2' : '#e74c3c');\n                \n                bar.appendChild(barValue);\n                bar.appendChild(barLabel);\n                mushroomChart.appendChild(bar);\n            });\n        }\n        \n        // Navigation functions\n        function goToPreviousStep() {\n            if (currentStep > 1) {\n                currentStep--;\n                updateStepVisibility();\n            }\n        }\n        \n        function goToNextStep() {\n            if (currentStep < totalSteps) {\n                currentStep++;\n                updateStepVisibility();\n            }\n        }\n        \n        function updateStepVisibility() {\n            // Hide all sections\n            sections.forEach(section => {\n                section.style.display = 'none';\n            });\n            \n            // Show current section\n            document.getElementById(`step${currentStep}`).style.display = 'block';\n            \n            // Update step indicators\n            stepIndicators.forEach((indicator, index) => {\n                if (index + 1 === currentStep) {\n                    indicator.classList.add('active');\n                } else {\n                    indicator.classList.remove('active');\n                }\n            });\n            \n            // Update button states\n            prevBtn.disabled = currentStep === 1;\n            nextBtn.textContent = currentStep === totalSteps ? 'Finish' : 'Next';\n        }\n        \n        // Initialize the application\n        document.addEventListener('DOMContentLoaded', init);\n    </script>\n</body>\n</html>",
      "html_file_path": "generated_games/video_game_e0f30888d8ae998d_1751321944.html",
      "created_at": "2025-06-30 22:19:04 UTC",
      "cached": true,
      "youtube_url": "https://www.youtube.com/watch?v=MQ6fFDwjuco",
      "video_title": "SHAP values for beginners | What they mean and their applications",
      "twelvelabs_video_ids": [
        "68630ce0913f41f63f5d2380"
      ],
      "primary_video_id": "68630ce0913f41f63f5d2380",
      "total_chunks": null,
      "cache_key": "e0f30888d8ae998d",
      "cached_at": "2025-06-30 22:19:04 UTC"
    },
    "e30b1a0332f1f9ac": {
      "video_id": "68631901913f41f63f5d251b",
      "video_analysis": "I regret to inform you that the question you've asked is of such complexity that a definitive answer eludes our current knowledge and understanding.",
      "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>The Elusive Answer</title>\n    <style>\n        * {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n        \n        body {\n            background-color: #ffffff;\n            color: #333333;\n            line-height: 1.6;\n            padding: 20px;\n            max-width: 800px;\n            margin: 0 auto;\n        }\n        \n        header {\n            text-align: center;\n            margin-bottom: 30px;\n            padding: 20px;\n            border-bottom: 1px solid #e0e0e0;\n        }\n        \n        h1 {\n            font-size: 2.2rem;\n            margin-bottom: 10px;\n            color: #222222;\n        }\n        \n        .game-container {\n            background-color: #f5f5f5;\n            border-radius: 10px;\n            padding: 25px;\n            box-shadow: 0 4px 8px rgba(0,0,0,0.05);\n            margin-bottom: 25px;\n        }\n        \n        .level-indicator {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 20px;\n            font-weight: bold;\n            color: #555555;\n        }\n        \n        .progress-container {\n            height: 10px;\n            background-color: #e0e0e0;\n            border-radius: 5px;\n            margin-bottom: 25px;\n            overflow: hidden;\n        }\n        \n        .progress-bar {\n            height: 100%;\n            background-color: #4a4a4a;\n            width: 0%;\n            transition: width 0.5s ease;\n        }\n        \n        .question-container {\n            background-color: #ffffff;\n            padding: 20px;\n            border-radius: 8px;\n            margin-bottom: 25px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n            min-height: 120px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            text-align: center;\n            font-size: 1.2rem;\n        }\n        \n        .options-container {\n            display: grid;\n            grid-template-columns: repeat(2, 1fr);\n            gap: 15px;\n            margin-bottom: 25px;\n        }\n        \n        .option {\n            background-color: #e9e9e9;\n            border: none;\n            border-radius: 8px;\n            padding: 15px;\n            font-size: 1rem;\n            cursor: pointer;\n            transition: all 0.3s ease;\n            color: #333333;\n        }\n        \n        .option:hover {\n            background-color: #dcdcdc;\n            transform: translateY(-2px);\n        }\n        \n        .option.correct {\n            background-color: #4CAF50;\n            color: white;\n        }\n        \n        .option.incorrect {\n            background-color: #f44336;\n            color: white;\n        }\n        \n        .score-container {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 20px;\n            font-size: 1.1rem;\n            font-weight: bold;\n        }\n        \n        .controls {\n            display: flex;\n            justify-content: center;\n            gap: 15px;\n            margin-top: 20px;\n        }\n        \n        button {\n            padding: 12px 25px;\n            border: none;\n            border-radius: 6px;\n            font-size: 1rem;\n            font-weight: bold;\n            cursor: pointer;\n            transition: background-color 0.3s;\n        }\n        \n        #next-btn {\n            background-color: #4a4a4a;\n            color: white;\n        }\n        \n        #next-btn:disabled {\n            background-color: #b0b0b0;\n            cursor: not-allowed;\n        }\n        \n        #restart-btn {\n            background-color: #333333;\n            color: white;\n        }\n        \n        .feedback {\n            text-align: center;\n            min-height: 30px;\n            margin: 15px 0;\n            font-weight: bold;\n            font-size: 1.1rem;\n        }\n        \n        .hidden {\n            display: none;\n        }\n        \n        .level-complete {\n            text-align: center;\n            padding: 20px;\n            background-color: #f0f0f0;\n            border-radius: 8px;\n            margin: 20px 0;\n        }\n        \n        @media (max-width: 600px) {\n            .options-container {\n                grid-template-columns: 1fr;\n            }\n            \n            h1 {\n                font-size: 1.8rem;\n            }\n            \n            .question-container {\n                font-size: 1rem;\n            }\n        }\n    </style>\n</head>\n<body>\n    <header>\n        <h1>The Elusive Answer</h1>\n        <p>Navigate through complex questions where definitive answers are hard to find</p>\n    </header>\n    \n    <main>\n        <div class=\"game-container\">\n            <div class=\"level-indicator\">\n                <span>Level: <span id=\"current-level\">1</span>/3</span>\n                <span>Score: <span id=\"current-score\">0</span></span>\n            </div>\n            \n            <div class=\"progress-container\">\n                <div class=\"progress-bar\" id=\"progress-bar\"></div>\n            </div>\n            \n            <div class=\"question-container\">\n                <p id=\"question-text\">Loading question...</p>\n            </div>\n            \n            <div class=\"options-container\" id=\"options-container\">\n                <!-- Options will be generated here -->\n            </div>\n            \n            <div class=\"feedback\" id=\"feedback\"></div>\n            \n            <div class=\"score-container\">\n                <span>High Score: <span id=\"high-score\">0</span></span>\n                <span>Attempts: <span id=\"attempts\">0</span>/3</span>\n            </div>\n            \n            <div class=\"controls\">\n                <button id=\"restart-btn\">Restart Game</button>\n                <button id=\"next-btn\" disabled>Next Level</button>\n            </div>\n        </div>\n        \n        <div class=\"level-complete hidden\" id=\"level-complete\">\n            <h2>Level Complete!</h2>\n            <p>You've navigated this complex question successfully.</p>\n        </div>\n    </main>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            // Game state\n            const gameState = {\n                currentLevel: 1,\n                score: 0,\n                attempts: 0,\n                maxAttempts: 3,\n                highScore: localStorage.getItem('elusiveAnswerHighScore') || 0,\n                levels: [\n                    {\n                        question: \"What is the nature of this complex question?\",\n                        options: [\n                            \"Easily definable\",\n                            \"Subject to interpretation\",\n                            \"Absolutely knowable\",\n                            \"Beyond current understanding\"\n                        ],\n                        correct: 3\n                    },\n                    {\n                        question: \"How should we approach questions without clear answers?\",\n                        options: [\n                            \"With absolute certainty\",\n                            \"Through rigid frameworks\",\n                            \"With curiosity and humility\",\n                            \"By dismissing them entirely\"\n                        ],\n                        correct: 2\n                    },\n                    {\n                        question: \"What does it mean when an answer eludes our understanding?\",\n                        options: [\n                            \"The question is invalid\",\n                            \"Our knowledge is complete\",\n                            \"We should stop inquiring\",\n                            \"There's more to discover\"\n                        ],\n                        correct: 3\n                    }\n                ]\n            };\n\n            // DOM elements\n            const questionText = document.getElementById('question-text');\n            const optionsContainer = document.getElementById('options-container');\n            const currentLevelEl = document.getElementById('current-level');\n            const currentScoreEl = document.getElementById('current-score');\n            const highScoreEl = document.getElementById('high-score');\n            const attemptsEl = document.getElementById('attempts');\n            const nextBtn = document.getElementById('next-btn');\n            const restartBtn = document.getElementById('restart-btn');\n            const feedbackEl = document.getElementById('feedback');\n            const progressBar = document.getElementById('progress-bar');\n            const levelComplete = document.getElementById('level-complete');\n\n            // Initialize game\n            function initGame() {\n                gameState.currentLevel = 1;\n                gameState.score = 0;\n                gameState.attempts = 0;\n                updateUI();\n                loadLevel();\n            }\n\n            // Load current level\n            function loadLevel() {\n                const level = gameState.levels[gameState.currentLevel - 1];\n                questionText.textContent = level.question;\n                optionsContainer.innerHTML = '';\n                \n                level.options.forEach((option, index) => {\n                    const button = document.createElement('button');\n                    button.className = 'option';\n                    button.textContent = option;\n                    button.addEventListener('click', () => checkAnswer(index));\n                    optionsContainer.appendChild(button);\n                });\n                \n                gameState.attempts = 0;\n                updateUI();\n                levelComplete.classList.add('hidden');\n                nextBtn.disabled = true;\n                feedbackEl.textContent = '';\n            }\n\n            // Check selected answer\n            function checkAnswer(selectedIndex) {\n                const level = gameState.levels[gameState.currentLevel - 1];\n                const options = document.querySelectorAll('.option');\n                \n                // Disable all buttons after selection\n                options.forEach(option => {\n                    option.disabled = true;\n                });\n                \n                // Mark correct and incorrect answers\n                options[level.correct].classList.add('correct');\n                if (selectedIndex !== level.correct) {\n                    options[selectedIndex].classList.add('incorrect');\n                    gameState.attempts++;\n                    feedbackEl.textContent = \"That's not quite the elusive answer we're seeking\";\n                } else {\n                    gameState.score += 100 * gameState.currentLevel;\n                    feedbackEl.textContent = \"You've grasped the complexity!\";\n                    nextBtn.disabled = false;\n                }\n                \n                updateUI();\n                \n                // Check if level should end\n                if (gameState.attempts >= gameState.maxAttempts || selectedIndex === level.correct) {\n                    if (selectedIndex !== level.correct) {\n                        feedbackEl.textContent = \"The answer remains elusive. Try again?\";\n                    }\n                    setTimeout(() => {\n                        if (selectedIndex === level.correct) {\n                            levelComplete.classList.remove('hidden');\n                        }\n                    }, 1000);\n                }\n            }\n\n            // Update UI elements\n            function updateUI() {\n                currentLevelEl.textContent = gameState.currentLevel;\n                currentScoreEl.textContent = gameState.score;\n                attemptsEl.textContent = gameState.attempts;\n                highScoreEl.textContent = gameState.highScore;\n                \n                // Update progress bar\n                const progress = (gameState.currentLevel - 1) / 3 * 100;\n                progressBar.style.width = `${progress}%`;\n            }\n\n            // Next level handler\n            nextBtn.addEventListener('click', () => {\n                if (gameState.currentLevel < 3) {\n                    gameState.currentLevel++;\n                    loadLevel();\n                } else {\n                    // Game completed\n                    if (gameState.score > gameState.highScore) {\n                        gameState.highScore = gameState.score;\n                        localStorage.setItem('elusiveAnswerHighScore', gameState.highScore);\n                        highScoreEl.textContent = gameState.highScore;\n                        feedbackEl.textContent = \"New High Score! You've mastered the elusive!\";\n                    } else {\n                        feedbackEl.textContent = \"Game Completed! You've navigated the complexity.\";\n                    }\n                    \n                    // Show restart option\n                    nextBtn.disabled = true;\n                    levelComplete.classList.remove('hidden');\n                    levelComplete.querySelector('h2').textContent = \"Game Completed!\";\n                    levelComplete.querySelector('p').textContent = `Final Score: ${gameState.score}`;\n                }\n            });\n\n            // Restart game handler\n            restartBtn.addEventListener('click', initGame);\n\n            // Initialize the game\n            initGame();\n        });\n    </script>\n</body>\n</html>",
      "html_file_path": "generated_games/video_game_68631901913f41f63f5d251b_1751325086.html",
      "created_at": "2025-06-30 23:11:26 UTC",
      "cached": true,
      "youtube_url": "https://www.youtube.com/watch?v=T-D1OfcDW1M",
      "video_title": "What is Retrieval-Augmented Generation (RAG)?",
      "channel_name": "",
      "view_count": "",
      "cache_key": "e30b1a0332f1f9ac",
      "cached_at": "2025-06-30 23:11:26 UTC"
    },
    "c88ef2d11a87a57d": {
      "video_id": "c88ef2d11a87a57d",
      "video_analysis": "```json\n{\n  \"spec\": \"In the realm of data storage and retrieval, vector databases offer a powerful way to store and query unstructured data, such as images, text, and audio, by capturing their semantic essence through vector embeddings. This approach bridges the semantic gap between how humans understand data and how computers store it, enabling nuanced similarity searches.\\n\\nBuild an interactive web app to help learners understand vector databases and their applications.\\n\\nSPECIFICATIONS:\\n\\n1. The app must feature an interactive canvas where users can draw simple images or upload images.\\n2. The app must display a relational database model and a vector database model side by side for comparison.\\n3. The app must explain the concept of the semantic gap and how vector databases address it.\\n4. The app must allow users to convert their drawn or uploaded images into vector embeddings and display the numerical values of these embeddings.\\n5. The app must provide a feature to compare the vector embeddings of two different images and highlight the similarities and differences.\\n6. The app must showcase examples of embedding models (Clip for images, GloVe for text, and Wav2Vec for audio) and explain how they create vector embeddings.\\n7. The app must demonstrate the process of vector indexing using approximate nearest neighbor algorithms and show how it enables efficient similarity search.\\n8. The app must include a section on RAG (Retrieval Augmented Generation) and explain how vector databases are used in this context.\\n9. The app must provide a simple, playful interface with clear instructions and feedback to enhance user engagement and understanding.\"\n}\n```",
      "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Vector Database Explorer</title>\n    <style>\n        * {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n\n        body {\n            background-color: #ffffff;\n            color: #333333;\n            line-height: 1.6;\n            padding: 20px;\n            max-width: 1200px;\n            margin: 0 auto;\n        }\n\n        header {\n            text-align: center;\n            margin-bottom: 30px;\n            padding: 20px;\n            border-bottom: 1px solid #e0e0e0;\n        }\n\n        h1 {\n            font-size: 2.2rem;\n            margin-bottom: 10px;\n            color: #222222;\n        }\n\n        .container {\n            display: flex;\n            flex-direction: column;\n            gap: 30px;\n        }\n\n        .section {\n            background-color: #f8f8f8;\n            border-radius: 10px;\n            padding: 25px;\n            box-shadow: 0 3px 10px rgba(0,0,0,0.08);\n        }\n\n        h2 {\n            font-size: 1.6rem;\n            margin-bottom: 20px;\n            color: #444444;\n            padding-bottom: 10px;\n            border-bottom: 1px solid #e0e0e0;\n        }\n\n        .comparison {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 20px;\n            margin: 20px 0;\n        }\n\n        .db-model {\n            flex: 1;\n            min-width: 300px;\n            background: white;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 2px 5px rgba(0,0,0,0.05);\n        }\n\n        .db-model h3 {\n            text-align: center;\n            margin-bottom: 15px;\n            color: #555555;\n        }\n\n        .canvas-container {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            gap: 20px;\n            margin: 25px 0;\n        }\n\n        canvas {\n            border: 2px solid #e0e0e0;\n            border-radius: 8px;\n            background-color: white;\n            cursor: crosshair;\n            touch-action: none;\n        }\n\n        .controls {\n            display: flex;\n            gap: 15px;\n            flex-wrap: wrap;\n            justify-content: center;\n        }\n\n        button {\n            background-color: #e0e0e0;\n            color: #333333;\n            border: none;\n            padding: 12px 20px;\n            border-radius: 6px;\n            cursor: pointer;\n            font-weight: 600;\n            transition: all 0.2s;\n        }\n\n        button:hover {\n            background-color: #d0d0d0;\n            transform: translateY(-2px);\n        }\n\n        button:active {\n            transform: translateY(0);\n        }\n\n        .vector-display {\n            background: white;\n            padding: 15px;\n            border-radius: 8px;\n            font-family: monospace;\n            overflow-x: auto;\n            margin: 15px 0;\n            max-height: 200px;\n            overflow-y: auto;\n            border: 1px solid #e0e0e0;\n        }\n\n        .embedding-models {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n            gap: 20px;\n            margin: 20px 0;\n        }\n\n        .model-card {\n            background: white;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 2px 5px rgba(0,0,0,0.05);\n        }\n\n        .model-card h4 {\n            margin-bottom: 10px;\n            color: #555555;\n        }\n\n        .similarity-container {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 30px;\n            justify-content: center;\n            margin: 25px 0;\n        }\n\n        .image-pair {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            gap: 15px;\n        }\n\n        .similarity-score {\n            font-size: 1.4rem;\n            font-weight: bold;\n            padding: 10px 20px;\n            background: white;\n            border-radius: 30px;\n            box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n        }\n\n        .progress-container {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin: 30px 0;\n            padding: 15px;\n            background: #f0f0f0;\n            border-radius: 8px;\n        }\n\n        .progress-bar {\n            flex-grow: 1;\n            height: 20px;\n            background: #e0e0e0;\n            border-radius: 10px;\n            margin: 0 20px;\n            overflow: hidden;\n        }\n\n        .progress-fill {\n            height: 100%;\n            background: #555555;\n            width: 0%;\n            transition: width 0.5s;\n        }\n\n        .level-indicator {\n            font-weight: bold;\n            min-width: 120px;\n            text-align: center;\n        }\n\n        .game-section {\n            display: none;\n        }\n\n        .active {\n            display: block;\n        }\n\n        .instructions {\n            background: #f0f0f0;\n            padding: 15px;\n            border-radius: 8px;\n            margin: 15px 0;\n            font-style: italic;\n        }\n\n        .score-display {\n            text-align: center;\n            font-size: 1.4rem;\n            font-weight: bold;\n            margin: 20px 0;\n        }\n\n        .neighbors-demo {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 15px;\n            justify-content: center;\n            margin: 20px 0;\n        }\n\n        .neighbor-item {\n            width: 80px;\n            height: 80px;\n            background: white;\n            border: 2px solid #e0e0e0;\n            border-radius: 8px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 2rem;\n            transition: all 0.3s;\n        }\n\n        .neighbor-item.highlight {\n            border-color: #555555;\n            transform: scale(1.1);\n            box-shadow: 0 0 10px rgba(0,0,0,0.2);\n        }\n\n        @media (max-width: 768px) {\n            .comparison {\n                flex-direction: column;\n            }\n            \n            .similarity-container {\n                flex-direction: column;\n            }\n            \n            .controls {\n                flex-direction: column;\n                align-items: center;\n            }\n            \n            button {\n                width: 100%;\n                max-width: 300px;\n            }\n            \n            canvas {\n                width: 100%;\n                max-width: 400px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <header>\n        <h1>Vector Database Explorer</h1>\n        <p>Understand how vector databases bridge the semantic gap</p>\n    </header>\n\n    <div class=\"progress-container\">\n        <div class=\"level-indicator\">Level: <span id=\"level\">1</span>/3</div>\n        <div class=\"progress-bar\">\n            <div class=\"progress-fill\" id=\"progress-fill\"></div>\n        </div>\n        <div>Score: <span id=\"score\">0</span></div>\n    </div>\n\n    <div class=\"container\">\n        <!-- Level 1: Drawing and Conversion -->\n        <section id=\"level1\" class=\"game-section active\">\n            <div class=\"section\">\n                <h2>Understanding the Semantic Gap</h2>\n                <p>Humans understand images as concepts (e.g., \"cat\"), but computers only see pixels. Vector databases bridge this gap by converting data into numerical vectors that capture semantic meaning.</p>\n                \n                <div class=\"comparison\">\n                    <div class=\"db-model\">\n                        <h3>Relational Database</h3>\n                        <p>Stores structured data in tables with fixed schemas. Good for exact matches but poor for unstructured data like images.</p>\n                        <div class=\"vector-display\">\n                            Image Table<br>\n                            | ID | Filename   | Size  |<br>\n                            |----|------------|-------|<br>\n                            | 1  | cat.jpg    | 2.4MB |<br>\n                            | 2  | dog.jpg    | 3.1MB |\n                        </div>\n                    </div>\n                    \n                    <div class=\"db-model\">\n                        <h3>Vector Database</h3>\n                        <p>Stores vector embeddings that capture semantic meaning. Enables similarity searches on unstructured data.</p>\n                        <div class=\"vector-display\">\n                            Embedding Vectors:<br>\n                            cat.jpg: [0.24, -0.12, 0.87, ...]<br>\n                            dog.jpg: [0.31, 0.05, 0.92, ...]\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"section\">\n                <h2>Create Your Own Vector Embedding</h2>\n                <div class=\"instructions\">\n                    Draw an image below and convert it to a vector embedding that captures its semantic meaning.\n                </div>\n                \n                <div class=\"canvas-container\">\n                    <canvas id=\"drawingCanvas\" width=\"400\" height=\"300\"></canvas>\n                    <div class=\"controls\">\n                        <button id=\"clearBtn\">Clear Canvas</button>\n                        <button id=\"convertBtn\">Convert to Vector</button>\n                    </div>\n                </div>\n                \n                <div id=\"vectorOutput\" class=\"vector-display\">\n                    Your vector will appear here...\n                </div>\n            </div>\n        </section>\n\n        <!-- Level 2: Comparison -->\n        <section id=\"level2\" class=\"game-section\">\n            <div class=\"section\">\n                <h2>Compare Vector Embeddings</h2>\n                <p>Vector databases measure similarity between embeddings. Images with similar semantic content will have vectors that are mathematically close.</p>\n                \n                <div class=\"similarity-container\">\n                    <div class=\"image-pair\">\n                        <canvas id=\"imageA\" width=\"200\" height=\"200\"></canvas>\n                        <div id=\"vectorA\" class=\"vector-display\">Vector A</div>\n                    </div>\n                    \n                    <div class=\"similarity-score\">\n                        Similarity: <span id=\"similarityValue\">0.00</span>\n                    </div>\n                    \n                    <div class=\"image-pair\">\n                        <canvas id=\"imageB\" width=\"200\" height=\"200\"></canvas>\n                        <div id=\"vectorB\" class=\"vector-display\">Vector B</div>\n                    </div>\n                </div>\n                \n                <div class=\"controls\" style=\"justify-content: center; margin-top: 20px;\">\n                    <button id=\"compareBtn\">Compare Vectors</button>\n                    <button id=\"randomBtn\">Generate Random Images</button>\n                </div>\n            </div>\n        </section>\n\n        <!-- Level 3: Search and RAG -->\n        <section id=\"level3\" class=\"game-section\">\n            <div class=\"section\">\n                <h2>Vector Search & Retrieval Augmented Generation (RAG)</h2>\n                <p>Vector databases use Approximate Nearest Neighbor (ANN) algorithms for efficient similarity searches. This enables RAG systems to retrieve relevant information for AI models.</p>\n                \n                <div class=\"canvas-container\">\n                    <canvas id=\"queryCanvas\" width=\"300\" height=\"300\"></canvas>\n                    <div class=\"controls\">\n                        <button id=\"searchBtn\">Find Similar Images</button>\n                    </div>\n                </div>\n                \n                <h3 style=\"text-align: center; margin: 20px 0;\">Nearest Neighbors in Vector Space</h3>\n                <div class=\"neighbors-demo\" id=\"neighborsContainer\">\n                    <!-- Neighbor items will be generated here -->\n                </div>\n                \n                <div class=\"score-display\">\n                    RAG System Score: <span id=\"ragScore\">0</span>\n                </div>\n            </div>\n\n            <div class=\"section\">\n                <h2>Embedding Models</h2>\n                <div class=\"embedding-models\">\n                    <div class=\"model-card\">\n                        <h4>CLIP (Images)</h4>\n                        <p>Converts images and text into a shared vector space. Enables cross-modal search.</p>\n                    </div>\n                    <div class=\"model-card\">\n                        <h4>GloVe (Text)</h4>\n                        <p>Creates word embeddings based on global word co-occurrence statistics.</p>\n                    </div>\n                    <div class=\"model-card\">\n                        <h4>Wav2Vec (Audio)</h4>\n                        <p>Converts speech audio into vector representations for semantic understanding.</p>\n                    </div>\n                </div>\n            </div>\n        </section>\n    </div>\n\n    <div class=\"controls\" style=\"justify-content: center; margin-top: 30px;\">\n        <button id=\"prevBtn\">Previous</button>\n        <button id=\"nextBtn\">Next Level</button>\n        <button id=\"restartBtn\">Restart Game</button>\n    </div>\n\n    <script>\n        // Game state\n        const gameState = {\n            currentLevel: 1,\n            score: 0,\n            maxLevel: 3,\n            vectors: {\n                drawing: null,\n                imageA: null,\n                imageB: null,\n                query: null\n            }\n        };\n\n        // DOM Elements\n        const levelElements = [\n            document.getElementById('level1'),\n            document.getElementById('level2'),\n            document.getElementById('level3')\n        ];\n        \n        const levelDisplay = document.getElementById('level');\n        const scoreDisplay = document.getElementById('score');\n        const progressFill = document.getElementById('progress-fill');\n        const nextBtn = document.getElementById('nextBtn');\n        const prevBtn = document.getElementById('prevBtn');\n        const restartBtn = document.getElementById('restartBtn');\n\n        // Canvas elements\n        const drawingCanvas = document.getElementById('drawingCanvas');\n        const imageACanvas = document.getElementById('imageA');\n        const imageBCanvas = document.getElementById('imageB');\n        const queryCanvas = document.getElementById('queryCanvas');\n\n        // Vector displays\n        const vectorOutput = document.getElementById('vectorOutput');\n        const vectorA = document.getElementById('vectorA');\n        const vectorB = document.getElementById('vectorB');\n        const similarityValue = document.getElementById('similarityValue');\n        const ragScore = document.getElementById('ragScore');\n        const neighborsContainer = document.getElementById('neighborsContainer');\n\n        // Initialize canvases\n        function initCanvas(canvas) {\n            const ctx = canvas.getContext('2d');\n            ctx.fillStyle = 'white';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            ctx.strokeStyle = '#333333';\n            ctx.lineWidth = 4;\n            ctx.lineCap = 'round';\n            \n            let isDrawing = false;\n            let lastX = 0;\n            let lastY = 0;\n            \n            function startDrawing(e) {\n                isDrawing = true;\n                [lastX, lastY] = getCoordinates(e);\n            }\n            \n            function draw(e) {\n                if (!isDrawing) return;\n                const [x, y] = getCoordinates(e);\n                \n                ctx.beginPath();\n                ctx.moveTo(lastX, lastY);\n                ctx.lineTo(x, y);\n                ctx.stroke();\n                \n                [lastX, lastY] = [x, y];\n            }\n            \n            function stopDrawing() {\n                isDrawing = false;\n            }\n            \n            function getCoordinates(e) {\n                if (e.type.includes('touch')) {\n                    const rect = canvas.getBoundingClientRect();\n                    return [\n                        e.touches[0].clientX - rect.left,\n                        e.touches[0].clientY - rect.top\n                    ];\n                }\n                return [e.offsetX, e.offsetY];\n            }\n            \n            // Mouse events\n            canvas.addEventListener('mousedown', startDrawing);\n            canvas.addEventListener('mousemove', draw);\n            canvas.addEventListener('mouseup', stopDrawing);\n            canvas.addEventListener('mouseout', stopDrawing);\n            \n            // Touch events\n            canvas.addEventListener('touchstart', startDrawing);\n            canvas.addEventListener('touchmove', draw);\n            canvas.addEventListener('touchend', stopDrawing);\n            \n            return ctx;\n        }\n\n        // Initialize all canvases\n        const drawingCtx = initCanvas(drawingCanvas);\n        const imageACtx = initCanvas(imageACanvas);\n        const imageBCtx = initCanvas(imageBCanvas);\n        const queryCtx = initCanvas(queryCanvas);\n\n        // Generate a random vector\n        function generateVector() {\n            const vector = [];\n            for (let i = 0; i < 10; i++) {\n                vector.push(parseFloat((Math.random() * 2 - 1).toFixed(3)));\n            }\n            return vector;\n        }\n\n        // Format vector for display\n        function formatVector(vector) {\n            return '[' + vector.map(num => num.toFixed(3)).join(', ') + ']';\n        }\n\n        // Calculate cosine similarity\n        function cosineSimilarity(vecA, vecB) {\n            if (!vecA || !vecB || vecA.length !== vecB.length) return 0;\n            \n            let dotProduct = 0;\n            let magA = 0;\n            let magB = 0;\n            \n            for (let i = 0; i < vecA.length; i++) {\n                dotProduct += vecA[i] * vecB[i];\n                magA += vecA[i] * vecA[i];\n                magB += vecB[i] * vecB[i];\n            }\n            \n            magA = Math.sqrt(magA);\n            magB = Math.sqrt(magB);\n            \n            if (magA === 0 || magB === 0) return 0;\n            \n            return parseFloat((dotProduct / (magA * magB)).toFixed(3));\n        }\n\n        // Update game UI\n        function updateGameUI() {\n            // Update level display\n            levelDisplay.textContent = gameState.currentLevel;\n            \n            // Update progress bar\n            const progress = (gameState.currentLevel - 1) / (gameState.maxLevel - 1) * 100;\n            progressFill.style.width = `${progress}%`;\n            \n            // Update score\n            scoreDisplay.textContent = gameState.score;\n            \n            // Update button states\n            prevBtn.disabled = gameState.currentLevel === 1;\n            nextBtn.textContent = gameState.currentLevel === gameState.maxLevel ? \n                'Finish Game' : 'Next Level';\n            \n            // Show current level\n            levelElements.forEach((el, index) => {\n                el.classList.toggle('active', index === gameState.currentLevel - 1);\n            });\n        }\n\n        // Initialize neighbor items\n        function initNeighbors() {\n            neighborsContainer.innerHTML = '';\n            const symbols = ['🐱', '🐶', '🚗', '🏠', '🌳', '🍎', '📱', '📚'];\n            \n            for (let i = 0; i < 8; i++) {\n                const neighbor = document.createElement('div');\n                neighbor.className = 'neighbor-item';\n                neighbor.textContent = symbols[Math.floor(Math.random() * symbols.length)];\n                neighborsContainer.appendChild(neighbor);\n            }\n        }\n\n        // Highlight nearest neighbors\n        function highlightNeighbors() {\n            const neighbors = document.querySelectorAll('.neighbor-item');\n            neighbors.forEach(neighbor => neighbor.classList.remove('highlight'));\n            \n            // Randomly highlight 1-3 neighbors\n            const count = Math.floor(Math.random() * 3) + 1;\n            for (let i = 0; i < count; i++) {\n                const randomIndex = Math.floor(Math.random() * neighbors.length);\n                neighbors[randomIndex].classList.add('highlight');\n            }\n            \n            // Update RAG score\n            gameState.score += 25;\n            ragScore.textContent = gameState.score;\n        }\n\n        // Event Listeners\n        document.getElementById('clearBtn').addEventListener('click', () => {\n            drawingCtx.fillStyle = 'white';\n            drawingCtx.fillRect(0, 0, drawingCanvas.width, drawingCanvas.height);\n            vectorOutput.textContent = 'Your vector will appear here...';\n        });\n\n        document.getElementById('convertBtn').addEventListener('click', () => {\n            gameState.vectors.drawing = generateVector();\n            vectorOutput.textContent = formatVector(gameState.vectors.drawing);\n            gameState.score += 10;\n            updateGameUI();\n        });\n\n        document.getElementById('randomBtn').addEventListener('click', () => {\n            // Clear canvases\n            imageACtx.fillStyle = 'white';\n            imageACtx.fillRect(0, 0, imageACanvas.width, imageACanvas.height);\n            imageBCtx.fillStyle = 'white';\n            imageBCtx.fillRect(0, 0, imageBCanvas.width, imageBCanvas.height);\n            \n            // Draw random shapes\n            drawRandomShape(imageACtx, imageACanvas);\n            drawRandomShape(imageBCtx, imageBCanvas);\n            \n            // Generate vectors\n            gameState.vectors.imageA = generateVector();\n            gameState.vectors.imageB = generateVector();\n            \n            vectorA.textContent = formatVector(gameState.vectors.imageA);\n            vectorB.textContent = formatVector(gameState.vectors.imageB);\n    </script>\n</body>\n</html>",
      "html_file_path": "generated_games/video_game_c88ef2d11a87a57d_1751362880.html",
      "created_at": "2025-07-01 09:41:20 UTC",
      "cached": true,
      "youtube_url": "https://www.youtube.com/watch?v=gl1r1XV0SLw",
      "video_title": "What is a Vector Database? Powering Semantic Search & AI Applications",
      "twelvelabs_video_ids": [
        "6863aca366e177b742cc6724"
      ],
      "primary_video_id": "6863aca366e177b742cc6724",
      "total_chunks": null,
      "cache_key": "c88ef2d11a87a57d",
      "cached_at": "2025-07-01 09:41:20 UTC"
    },
    "5c35c36dfe1615b8": {
      "video_id": "5c35c36dfe1615b8",
      "video_analysis": "```json\n{\n  \"spec\": {\n    \"title\": \"Interactive Dance Studio\",\n    \"description\": \"An engaging web app that helps users learn and practice dance moves inspired by a dynamic dance performance.\",\n    \"features\": [\n      {\n        \"name\": \"Dance Move Library\",\n        \"description\": \"A collection of dance moves demonstrated in the performance, categorized by complexity and style.\",\n        \"mechanics\": [\n          \"Users can browse and select dance moves from the library.\",\n          \"Each move includes a step-by-step guide with visual aids.\"\n        ]\n      },\n      {\n        \"name\": \"Practice Mode\",\n        \"description\": \"Allows users to practice selected dance moves in a virtual studio environment.\",\n        \"mechanics\": [\n          \"Users can set the tempo and difficulty level.\",\n          \"The app provides real-time feedback on form and timing.\"\n        ]\n      },\n      {\n        \"name\": \"Choreography Builder\",\n        \"description\": \"Enables users to create their own dance routines using the library of moves.\",\n        \"mechanics\": [\n          \"Users can drag and drop moves into a timeline.\",\n          \"The app generates a video preview of the routine.\"\n        ]\n      }\n    ],\n    \"design\": {\n      \"colorScheme\": [\"#FFC107\", \"#2196F3\", \"#E91E63\"],\n      \"fontFamily\": \"Roboto\",\n      \"layout\": \"Responsive layout optimized for mobile and desktop\"\n    },\n    \"development\": {\n      \"technologyStack\": [\"HTML5\", \"CSS3\", \"JavaScript\"],\n      \"libraries\": [\"jQuery\", \"Bootstrap\"],\n      \"testing\": \"Unit tests and integration tests using Jest and Cypress\"\n    }\n  }\n}\n```",
      "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Dance Studio</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n        \n        body {\n            background-color: #ffffff;\n            color: #333;\n            line-height: 1.6;\n            min-height: 100vh;\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            padding: 20px;\n        }\n        \n        .container {\n            max-width: 800px;\n            width: 100%;\n            background-color: #f5f5f5;\n            border-radius: 10px;\n            box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n            padding: 20px;\n            margin-top: 20px;\n        }\n        \n        header {\n            text-align: center;\n            margin-bottom: 20px;\n            padding-bottom: 15px;\n            border-bottom: 1px solid #ddd;\n        }\n        \n        h1 {\n            font-size: 2.2rem;\n            margin-bottom: 10px;\n            color: #222;\n        }\n        \n        .description {\n            font-size: 1.1rem;\n            color: #555;\n            margin-bottom: 20px;\n        }\n        \n        .screen {\n            display: none;\n        }\n        \n        .active {\n            display: block;\n        }\n        \n        .btn {\n            background-color: #444;\n            color: white;\n            border: none;\n            padding: 12px 24px;\n            border-radius: 5px;\n            cursor: pointer;\n            font-size: 1rem;\n            transition: background-color 0.3s;\n            margin: 10px 5px;\n        }\n        \n        .btn:hover {\n            background-color: #666;\n        }\n        \n        .btn-primary {\n            background-color: #2196F3;\n        }\n        \n        .btn-primary:hover {\n            background-color: #0b7dda;\n        }\n        \n        .dance-moves {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n            gap: 15px;\n            margin: 20px 0;\n        }\n        \n        .move-card {\n            background-color: white;\n            border-radius: 8px;\n            padding: 15px;\n            text-align: center;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n            cursor: pointer;\n            transition: transform 0.2s;\n        }\n        \n        .move-card:hover {\n            transform: translateY(-5px);\n        }\n        \n        .move-icon {\n            font-size: 2.5rem;\n            margin-bottom: 10px;\n        }\n        \n        .move-name {\n            font-weight: bold;\n            margin-bottom: 5px;\n        }\n        \n        .move-desc {\n            font-size: 0.9rem;\n            color: #666;\n        }\n        \n        .practice-area {\n            background-color: white;\n            border-radius: 8px;\n            padding: 20px;\n            margin: 20px 0;\n            text-align: center;\n        }\n        \n        .dance-animation {\n            width: 150px;\n            height: 150px;\n            margin: 20px auto;\n            background-color: #eee;\n            border-radius: 50%;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 3rem;\n        }\n        \n        .feedback {\n            margin: 15px 0;\n            padding: 10px;\n            border-radius: 5px;\n            font-weight: bold;\n        }\n        \n        .good {\n            background-color: #dff0d8;\n            color: #3c763d;\n        }\n        \n        .bad {\n            background-color: #f2dede;\n            color: #a94442;\n        }\n        \n        .timeline {\n            display: flex;\n            justify-content: center;\n            margin: 20px 0;\n            min-height: 100px;\n            background-color: white;\n            border-radius: 8px;\n            padding: 15px;\n        }\n        \n        .timeline-slot {\n            width: 80px;\n            height: 80px;\n            border: 2px dashed #ccc;\n            border-radius: 8px;\n            margin: 0 10px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n        \n        .choreo-moves {\n            display: flex;\n            justify-content: center;\n            flex-wrap: wrap;\n            gap: 10px;\n            margin: 20px 0;\n        }\n        \n        .choreo-move {\n            width: 70px;\n            height: 70px;\n            background-color: white;\n            border-radius: 8px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 1.5rem;\n            cursor: move;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n        }\n        \n        .progress-container {\n            margin: 20px 0;\n        }\n        \n        .progress-bar {\n            height: 20px;\n            background-color: #e0e0e0;\n            border-radius: 10px;\n            overflow: hidden;\n        }\n        \n        .progress {\n            height: 100%;\n            background-color: #2196F3;\n            width: 0%;\n            transition: width 0.5s;\n        }\n        \n        .score-container {\n            display: flex;\n            justify-content: space-between;\n            margin: 15px 0;\n            font-size: 1.1rem;\n        }\n        \n        .instructions {\n            background-color: white;\n            padding: 15px;\n            border-radius: 8px;\n            margin: 15px 0;\n        }\n        \n        .level-indicator {\n            text-align: center;\n            font-size: 1.2rem;\n            margin: 10px 0;\n            font-weight: bold;\n        }\n        \n        @media (max-width: 600px) {\n            .dance-moves {\n                grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n            }\n            \n            .timeline-slot, .choreo-move {\n                width: 60px;\n                height: 60px;\n            }\n            \n            h1 {\n                font-size: 1.8rem;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Dance Studio</h1>\n            <p class=\"description\">Learn dance moves, practice your skills, and create choreography</p>\n        </header>\n        \n        <div id=\"home-screen\" class=\"screen active\">\n            <div class=\"instructions\">\n                <p>Welcome to the Interactive Dance Studio! Complete three levels to become a dance master:</p>\n                <ol>\n                    <li>Learn dance moves from our library</li>\n                    <li>Practice moves with rhythm timing</li>\n                    <li>Create your own choreography sequence</li>\n                </ol>\n            </div>\n            <div style=\"text-align: center; margin-top: 30px;\">\n                <button id=\"start-btn\" class=\"btn btn-primary\">Start Dancing</button>\n            </div>\n        </div>\n        \n        <div id=\"level1-screen\" class=\"screen\">\n            <div class=\"level-indicator\">Level 1: Dance Move Library</div>\n            <p>Select dance moves to learn their steps and techniques:</p>\n            \n            <div class=\"dance-moves\">\n                <div class=\"move-card\" data-move=\"moonwalk\">\n                    <div class=\"move-icon\">👣</div>\n                    <div class=\"move-name\">Moonwalk</div>\n                    <div class=\"move-desc\">Slide backward illusion</div>\n                </div>\n                <div class=\"move-card\" data-move=\"spin\">\n                    <div class=\"move-icon\">🌀</div>\n                    <div class=\"move-name\">Spin</div>\n                    <div class=\"move-desc\">Rotate on the ball of your foot</div>\n                </div>\n                <div class=\"move-card\" data-move=\"wave\">\n                    <div class=\"move-icon\">🌊</div>\n                    <div class=\"move-name\">Wave</div>\n                    <div class=\"move-desc\">Fluid arm movement</div>\n                </div>\n                <div class=\"move-card\" data-move=\"pop\">\n                    <div class=\"move-icon\">💥</div>\n                    <div class=\"move-name\">Pop</div>\n                    <div class=\"move-desc\">Sharp muscle contraction</div>\n                </div>\n            </div>\n            \n            <div class=\"instructions\" id=\"move-instructions\">\n                <p>Select a dance move to view instructions</p>\n            </div>\n            \n            <div class=\"progress-container\">\n                <div class=\"score-container\">\n                    <span>Progress: <span id=\"progress-count\">0</span>/4 moves</span>\n                </div>\n                <div class=\"progress-bar\">\n                    <div class=\"progress\" id=\"level-progress\"></div>\n                </div>\n            </div>\n            \n            <div style=\"text-align: center; margin-top: 20px;\">\n                <button id=\"next-level1\" class=\"btn btn-primary\" disabled>Next Level</button>\n            </div>\n        </div>\n        \n        <div id=\"level2-screen\" class=\"screen\">\n            <div class=\"level-indicator\">Level 2: Practice Mode</div>\n            <p>Press the button when the rhythm hits the target zone:</p>\n            \n            <div class=\"practice-area\">\n                <div class=\"dance-animation\" id=\"dance-anim\">💃</div>\n                <div id=\"rhythm-indicator\">\n                    <div style=\"height: 30px; width: 100%; background: #ddd; border-radius: 15px; position: relative; margin: 20px 0;\">\n                        <div id=\"rhythm-marker\" style=\"position: absolute; width: 20px; height: 40px; background: #2196F3; top: -5px; left: 0; border-radius: 10px;\"></div>\n                        <div id=\"target-zone\" style=\"position: absolute; width: 40px; height: 50px; border: 2px solid #4CAF50; top: -10px; left: 150px; border-radius: 5px;\"></div>\n                    </div>\n                </div>\n                <button id=\"dance-btn\" class=\"btn\">Dance Now!</button>\n                <div id=\"feedback\" class=\"feedback\">Press the button when the marker is in the green zone</div>\n            </div>\n            \n            <div class=\"progress-container\">\n                <div class=\"score-container\">\n                    <span>Score: <span id=\"score\">0</span></span>\n                    <span>Attempts: <span id=\"attempts\">0</span>/10</span>\n                </div>\n            </div>\n            \n            <div style=\"text-align: center; margin-top: 20px;\">\n                <button id=\"next-level2\" class=\"btn btn-primary\" disabled>Next Level</button>\n            </div>\n        </div>\n        \n        <div id=\"level3-screen\" class=\"screen\">\n            <div class=\"level-indicator\">Level 3: Choreography Builder</div>\n            <p>Drag dance moves to the timeline to match the target sequence:</p>\n            \n            <div class=\"instructions\">\n                <p>Target Sequence: <strong id=\"target-sequence\">Moonwalk → Spin → Wave</strong></p>\n            </div>\n            \n            <div class=\"timeline\">\n                <div class=\"timeline-slot\" data-index=\"0\"></div>\n                <div class=\"timeline-slot\" data-index=\"1\"></div>\n                <div class=\"timeline-slot\" data-index=\"2\"></div>\n            </div>\n            \n            <div class=\"choreo-moves\">\n                <div class=\"choreo-move\" draggable=\"true\" data-move=\"moonwalk\">👣</div>\n                <div class=\"choreo-move\" draggable=\"true\" data-move=\"spin\">🌀</div>\n                <div class=\"choreo-move\" draggable=\"true\" data-move=\"wave\">🌊</div>\n                <div class=\"choreo-move\" draggable=\"true\" data-move=\"pop\">💥</div>\n            </div>\n            \n            <div id=\"choreo-feedback\" class=\"feedback\"></div>\n            \n            <div style=\"text-align: center; margin-top: 20px;\">\n                <button id=\"check-choreo\" class=\"btn\">Check Sequence</button>\n                <button id=\"next-level3\" class=\"btn btn-primary\" disabled>Finish Game</button>\n            </div>\n        </div>\n        \n        <div id=\"game-over-screen\" class=\"screen\">\n            <div style=\"text-align: center; padding: 40px 20px;\">\n                <h2>Game Completed! 🎉</h2>\n                <div class=\"dance-animation\" style=\"margin: 30px auto;\">💃🕺</div>\n                <p>Final Score: <span id=\"final-score\">0</span></p>\n                <div id=\"high-score\" style=\"margin: 20px 0; font-size: 1.2rem;\"></div>\n                <button id=\"restart-btn\" class=\"btn btn-primary\">Play Again</button>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        // Game state\n        const gameState = {\n            currentScreen: 'home',\n            level: 1,\n            score: 0,\n            learnedMoves: [],\n            practiceScore: 0,\n            practiceAttempts: 0,\n            targetSequence: ['moonwalk', 'spin', 'wave'],\n            playerSequence: []\n        };\n        \n        // DOM elements\n        const screens = {\n            home: document.getElementById('home-screen'),\n            level1: document.getElementById('level1-screen'),\n            level2: document.getElementById('level2-screen'),\n            level3: document.getElementById('level3-screen'),\n            gameOver: document.getElementById('game-over-screen')\n        };\n        \n        // Initialize game\n        function initGame() {\n            // Reset game state\n            gameState.level = 1;\n            gameState.score = 0;\n            gameState.learnedMoves = [];\n            gameState.practiceScore = 0;\n            gameState.practiceAttempts = 0;\n            gameState.playerSequence = [];\n            \n            // Reset UI elements\n            document.getElementById('progress-count').textContent = '0';\n            document.getElementById('level-progress').style.width = '0%';\n            document.getElementById('score').textContent = '0';\n            document.getElementById('attempts').textContent = '0';\n            document.getElementById('next-level1').disabled = true;\n            document.getElementById('next-level2').disabled = true;\n            document.getElementById('next-level3').disabled = true;\n            document.getElementById('move-instructions').innerHTML = '<p>Select a dance move to view instructions</p>';\n            \n            // Clear timeline\n            document.querySelectorAll('.timeline-slot').forEach(slot => {\n                slot.innerHTML = '';\n                slot.dataset.move = '';\n            });\n            \n            // Show home screen\n            showScreen('home');\n        }\n        \n        // Show specific screen\n        function showScreen(screenName) {\n            // Hide all screens\n            Object.values(screens).forEach(screen => {\n                screen.classList.remove('active');\n            });\n            \n            // Show requested screen\n            screens[screenName].classList.add('active');\n            gameState.currentScreen = screenName;\n        }\n        \n        // Level 1: Dance Move Library\n        function setupLevel1() {\n            const moveCards = document.querySelectorAll('.move-card');\n            const moveInstructions = document.getElementById('move-instructions');\n            const progressCount = document.getElementById('progress-count');\n            const progressBar = document.getElementById('level-progress');\n            const nextButton = document.getElementById('next-level1');\n            \n            moveCards.forEach(card => {\n                card.addEventListener('click', () => {\n                    const move = card.dataset.move;\n                    \n                    if (!gameState.learnedMoves.includes(move)) {\n                        gameState.learnedMoves.push(move);\n                        \n                        // Update progress\n                        progressCount.textContent = gameState.learnedMoves.length;\n                        const progress = (gameState.learnedMoves.length / 4) * 100;\n                        progressBar.style.width = `${progress}%`;\n                        \n                        // Enable next button when all moves are learned\n                        if (gameState.learnedMoves.length === 4) {\n                            nextButton.disabled = false;\n                            gameState.score += 100;\n                        }\n                    }\n                    \n                    // Show instructions\n                    let instructions = '';\n                    switch(move) {\n                        case 'moonwalk':\n                            instructions = `\n                                <h3>Moonwalk Instructions</h3>\n                                <ol>\n                                    <li>Start with feet together</li>\n                                    <li>Slide right foot back while lifting left heel</li>\n                                    <li>Shift weight to right foot and slide left foot back</li>\n                                    <li>Repeat with smooth gliding motion</li>\n                                </ol>\n                            `;\n                            break;\n                        case 'spin':\n                            instructions = `\n                                <h3>Spin Instructions</h3>\n                                <ol>\n                                    <li>Stand with feet shoulder-width apart</li>\n                                    <li>Raise onto the balls of your feet</li>\n                                    <li>Use arms for momentum</li>\n                                    <li>Spot a fixed point to maintain balance</li>\n                                </ol>\n                            `;\n                            break;\n                        case 'wave':\n                            instructions = `\n                                <h3>Wave Instructions</h3>\n                                <ol>\n                                    <li>Start with arm extended</li>\n                                    <li>Create sequential motion through joints</li>\n                                    <li>Flow from shoulder to fingertips</li>\n                                    <li>Reverse direction for continuous wave</li>\n                                </ol>\n                            `;\n                            break;\n                        case 'pop':\n                            instructions = `\n                                <h3>Pop Instructions</h3>\n                                <ol>\n                                    <li>Isolate muscle group</li>\n                                    <li>Contract muscle sharply</li>\n                                    <li>Release immediately</li>\n                                    <li>Combine with other movements</li>\n                                </ol>\n                            `;\n                            break;\n                    }\n                    \n                    moveInstructions.innerHTML = instructions;\n                });\n            });\n            \n            nextButton.addEventListener('click', () => {\n                showScreen('level2');\n                setupLevel2();\n            });\n        }\n        \n        // Level 2: Practice Mode\n        function setupLevel2() {\n            const danceBtn = document.getElementById('dance-btn');\n            const feedback = document.getElementById('feedback');\n            const scoreDisplay = document.getElementById('score');\n            const attemptsDisplay = document.getElementById('attempts');\n            const nextButton = document.getElementById('next-level2');\n            const rhythmMarker = document.getElementById('rhythm-marker');\n            const targetZone = document.getElementById('target-zone');\n            \n            let rhythmInterval;\n            let markerPosition = 0;\n            let direction = 1;\n            let speed = 3;\n            let isPlaying = false;\n            let targetLeft = 150;\n            let targetWidth = 40;\n            \n            function startRhythm() {\n                if (isPlaying) return;\n                \n                isPlaying = true;\n                feedback.textContent = 'Press when the marker is in the green zone!';\n                feedback.className = 'feedback';\n                \n                rhythmInterval = setInterval(() => {\n                    markerPosition += speed * direction;\n                    \n                    // Reverse direction at boundaries\n                    if (markerPosition >= 280 || markerPosition <= 0) {\n                        direction *= -1;\n                    }\n                    \n                    rhythmMarker.style.left =\n    </script>\n</body>\n</html>",
      "html_file_path": "generated_games/video_game_5c35c36dfe1615b8_1751363291.html",
      "created_at": "2025-07-01 09:48:11 UTC",
      "cached": true,
      "youtube_url": "https://www.youtube.com/watch?v=w5cZM23PG-k",
      "video_title": "On The Floor - Jenefer Lopes (Dance Cover) | Orangie Choreography",
      "twelvelabs_video_ids": [
        "6863ae6866e177b742cc676e"
      ],
      "primary_video_id": "6863ae6866e177b742cc676e",
      "total_chunks": null,
      "cache_key": "5c35c36dfe1615b8",
      "cached_at": "2025-07-01 09:48:11 UTC"
    },
    "48cc15be84fa892e": {
      "video_id": "6863b03266e177b742cc67c6",
      "video_analysis": "```json\n{\n  \"spec\": {\n    \"title\": \"Dance Studio Interactive App\",\n    \"description\": \"An interactive web app designed to complement and reinforce the concepts of dance choreography and synchronization.\",\n    \"features\": [\n      {\n        \"name\": \"Interactive Choreography Board\",\n        \"description\": \"A visual representation of the dance studio where users can select different dancers and view their movements.\",\n        \"mechanics\": [\n          \"Users can click on individual dancers to highlight their movements.\",\n          \"The board displays the names and roles of each dancer.\"\n        ]\n      },\n      {\n        \"name\": \"Choreography Sequence Builder\",\n        \"description\": \"Allows users to build and play back sequences of dance moves.\",\n        \"mechanics\": [\n          \"Users can drag and drop dance moves into a timeline.\",\n          \"The app plays back the sequence with synchronized animations.\"\n        ]\n      },\n      {\n        \"name\": \"Synchronization Challenges\",\n        \"description\": \"Interactive challenges that test users' ability to synchronize dance moves.\",\n        \"mechanics\": [\n          \"Users must match their movements to a pre-recorded sequence.\",\n          \"The app provides feedback on synchronization accuracy.\"\n        ]\n      }\n    ],\n    \"design\": {\n      \"colorScheme\": [\"#FFC107\", \"#28A745\", \"#17A2B8\"],\n      \"fontFamily\": \"Roboto\",\n      \"layout\": \"Responsive layout with a central choreography board and side panels for features.\"\n    },\n    \"development\": {\n      \"technologyStack\": [\"HTML\", \"CSS\", \"JavaScript\"],\n      \"libraries\": [],\n      \"dependencies\": []\n    }\n  }\n}\n```",
      "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Dance Studio Interactive App</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n            font-family: 'Roboto', sans-serif;\n        }\n        \n        body {\n            background-color: #ffffff;\n            color: #333;\n            line-height: 1.6;\n            padding: 20px;\n            max-width: 1200px;\n            margin: 0 auto;\n        }\n        \n        header {\n            text-align: center;\n            margin-bottom: 30px;\n            padding: 20px;\n            background-color: #f8f9fa;\n            border-radius: 8px;\n        }\n        \n        h1 {\n            font-size: 2.5rem;\n            margin-bottom: 10px;\n            color: #212529;\n        }\n        \n        .description {\n            font-size: 1.1rem;\n            max-width: 800px;\n            margin: 0 auto;\n            color: #495057;\n        }\n        \n        .game-container {\n            display: flex;\n            flex-direction: column;\n            gap: 25px;\n        }\n        \n        .feature-tabs {\n            display: flex;\n            gap: 10px;\n            margin-bottom: 20px;\n            flex-wrap: wrap;\n        }\n        \n        .tab-btn {\n            padding: 12px 24px;\n            background-color: #e9ecef;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 1rem;\n            transition: all 0.3s ease;\n            color: #495057;\n        }\n        \n        .tab-btn.active {\n            background-color: #17A2B8;\n            color: white;\n        }\n        \n        .tab-content {\n            display: none;\n            background-color: #f8f9fa;\n            padding: 25px;\n            border-radius: 8px;\n            min-height: 400px;\n        }\n        \n        .tab-content.active {\n            display: block;\n        }\n        \n        .dance-board {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 20px;\n            margin-bottom: 30px;\n        }\n        \n        .dancer-card {\n            background-color: #ffffff;\n            border-radius: 8px;\n            padding: 20px;\n            text-align: center;\n            box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n            cursor: pointer;\n            transition: transform 0.3s ease;\n        }\n        \n        .dancer-card:hover {\n            transform: translateY(-5px);\n        }\n        \n        .dancer-card.selected {\n            outline: 3px solid #17A2B8;\n        }\n        \n        .dancer-icon {\n            width: 80px;\n            height: 80px;\n            background-color: #e9ecef;\n            border-radius: 50%;\n            margin: 0 auto 15px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 2rem;\n        }\n        \n        .dance-moves {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 15px;\n            margin-top: 20px;\n        }\n        \n        .move-card {\n            background-color: #e9ecef;\n            padding: 12px 20px;\n            border-radius: 30px;\n            cursor: grab;\n        }\n        \n        .timeline {\n            display: flex;\n            gap: 15px;\n            min-height: 80px;\n            background-color: #e9ecef;\n            padding: 20px;\n            border-radius: 8px;\n            margin: 30px 0;\n            flex-wrap: wrap;\n        }\n        \n        .timeline-slot {\n            width: 80px;\n            height: 80px;\n            background-color: #dee2e6;\n            border-radius: 8px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n        \n        .controls {\n            display: flex;\n            gap: 15px;\n            margin-top: 20px;\n        }\n        \n        .btn {\n            padding: 12px 24px;\n            background-color: #17A2B8;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 1rem;\n            transition: background-color 0.3s ease;\n        }\n        \n        .btn:hover {\n            background-color: #138496;\n        }\n        \n        .challenge-container {\n            text-align: center;\n            padding: 30px;\n        }\n        \n        .countdown {\n            font-size: 3rem;\n            margin: 30px 0;\n            height: 80px;\n        }\n        \n        .feedback {\n            font-size: 1.5rem;\n            margin: 20px 0;\n            min-height: 40px;\n        }\n        \n        .progress-container {\n            margin: 30px 0;\n        }\n        \n        .progress-bar {\n            height: 10px;\n            background-color: #e9ecef;\n            border-radius: 5px;\n            overflow: hidden;\n        }\n        \n        .progress {\n            height: 100%;\n            background-color: #28A745;\n            width: 0%;\n            transition: width 0.5s ease;\n        }\n        \n        .level-indicator {\n            margin: 20px 0;\n            font-weight: bold;\n        }\n        \n        .score-container {\n            display: flex;\n            justify-content: space-between;\n            margin-bottom: 20px;\n            padding: 15px;\n            background-color: #e9ecef;\n            border-radius: 8px;\n        }\n        \n        @media (max-width: 768px) {\n            .dance-board {\n                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n            }\n            \n            .timeline-slot {\n                width: 60px;\n                height: 60px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <header>\n        <h1>Dance Studio Interactive App</h1>\n        <p class=\"description\">Build choreography, synchronize moves, and master dance sequences</p>\n    </header>\n    \n    <div class=\"game-container\">\n        <div class=\"feature-tabs\">\n            <button class=\"tab-btn active\" data-tab=\"choreography\">Choreography Board</button>\n            <button class=\"tab-btn\" data-tab=\"sequence\">Sequence Builder</button>\n            <button class=\"tab-btn\" data-tab=\"challenge\">Synchronization Challenge</button>\n        </div>\n        \n        <div class=\"score-container\">\n            <div>Score: <span id=\"score\">0</span></div>\n            <div>Level: <span id=\"level\">1</span></div>\n            <div>High Score: <span id=\"high-score\">0</span></div>\n        </div>\n        \n        <!-- Choreography Board Tab -->\n        <div id=\"choreography\" class=\"tab-content active\">\n            <h2>Interactive Choreography Board</h2>\n            <p>Select dancers to view their movements and roles</p>\n            \n            <div class=\"dance-board\">\n                <div class=\"dancer-card\" data-dancer=\"1\">\n                    <div class=\"dancer-icon\">💃</div>\n                    <h3>Lead Dancer</h3>\n                    <p>Main performer</p>\n                </div>\n                <div class=\"dancer-card\" data-dancer=\"2\">\n                    <div class=\"dancer-icon\">🕺</div>\n                    <h3>Support Dancer</h3>\n                    <p>Secondary performer</p>\n                </div>\n                <div class=\"dancer-card\" data-dancer=\"3\">\n                    <div class=\"dancer-icon\">👯</div>\n                    <h3>Group Dancers</h3>\n                    <p>Background performers</p>\n                </div>\n            </div>\n            \n            <div id=\"dancer-details\">\n                <p>Select a dancer to view their movement details</p>\n            </div>\n        </div>\n        \n        <!-- Sequence Builder Tab -->\n        <div id=\"sequence\" class=\"tab-content\">\n            <h2>Choreography Sequence Builder</h2>\n            <p>Drag dance moves to the timeline to create your sequence</p>\n            \n            <div class=\"dance-moves\">\n                <div class=\"move-card\" draggable=\"true\" data-move=\"spin\">Spin</div>\n                <div class=\"move-card\" draggable=\"true\" data-move=\"jump\">Jump</div>\n                <div class=\"move-card\" draggable=\"true\" data-move=\"slide\">Slide</div>\n                <div class=\"move-card\" draggable=\"true\" data-move=\"kick\">Kick</div>\n                <div class=\"move-card\" draggable=\"true\" data-move=\"dip\">Dip</div>\n            </div>\n            \n            <h3>Timeline</h3>\n            <div class=\"timeline\" id=\"timeline\">\n                <div class=\"timeline-slot\" data-slot=\"1\"></div>\n                <div class=\"timeline-slot\" data-slot=\"2\"></div>\n                <div class=\"timeline-slot\" data-slot=\"3\"></div>\n                <div class=\"timeline-slot\" data-slot=\"4\"></div>\n                <div class=\"timeline-slot\" data-slot=\"5\"></div>\n            </div>\n            \n            <div class=\"controls\">\n                <button class=\"btn\" id=\"play-btn\">Play Sequence</button>\n                <button class=\"btn\" id=\"reset-btn\">Reset</button>\n            </div>\n        </div>\n        \n        <!-- Synchronization Challenge Tab -->\n        <div id=\"challenge\" class=\"tab-content\">\n            <h2>Synchronization Challenge</h2>\n            <p>Press the button when the dancer should perform the move</p>\n            \n            <div class=\"level-indicator\">Level: <span id=\"current-level\">1</span></div>\n            \n            <div class=\"progress-container\">\n                <div class=\"progress-bar\">\n                    <div class=\"progress\" id=\"challenge-progress\"></div>\n                </div>\n            </div>\n            \n            <div class=\"challenge-container\">\n                <div id=\"move-display\">Get Ready!</div>\n                <div class=\"countdown\" id=\"countdown\">3</div>\n                <div class=\"feedback\" id=\"feedback\"></div>\n                \n                <button class=\"btn\" id=\"action-btn\">Perform Move</button>\n                <button class=\"btn\" id=\"next-level-btn\">Next Level</button>\n                <button class=\"btn\" id=\"restart-btn\">Restart Challenge</button>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        // Game state\n        const gameState = {\n            currentTab: 'choreography',\n            score: 0,\n            level: 1,\n            highScore: localStorage.getItem('danceHighScore') || 0,\n            challengeProgress: 0,\n            currentMove: '',\n            countdownValue: 3,\n            challengeActive: false,\n            sequence: []\n        };\n\n        // DOM Elements\n        const tabBtns = document.querySelectorAll('.tab-btn');\n        const tabContents = document.querySelectorAll('.tab-content');\n        const dancerCards = document.querySelectorAll('.dancer-card');\n        const dancerDetails = document.getElementById('dancer-details');\n        const moveCards = document.querySelectorAll('.move-card');\n        const timelineSlots = document.querySelectorAll('.timeline-slot');\n        const playBtn = document.getElementById('play-btn');\n        const resetBtn = document.getElementById('reset-btn');\n        const scoreDisplay = document.getElementById('score');\n        const levelDisplay = document.getElementById('level');\n        const highScoreDisplay = document.getElementById('high-score');\n        const currentLevelDisplay = document.getElementById('current-level');\n        const progressBar = document.getElementById('challenge-progress');\n        const moveDisplay = document.getElementById('move-display');\n        const countdownDisplay = document.getElementById('countdown');\n        const feedbackDisplay = document.getElementById('feedback');\n        const actionBtn = document.getElementById('action-btn');\n        const nextLevelBtn = document.getElementById('next-level-btn');\n        const restartBtn = document.getElementById('restart-btn');\n\n        // Initialize game\n        function initGame() {\n            highScoreDisplay.textContent = gameState.highScore;\n            updateScore();\n            \n            // Tab switching\n            tabBtns.forEach(btn => {\n                btn.addEventListener('click', () => {\n                    const tabId = btn.dataset.tab;\n                    switchTab(tabId);\n                });\n            });\n            \n            // Choreography board\n            dancerCards.forEach(card => {\n                card.addEventListener('click', () => {\n                    dancerCards.forEach(c => c.classList.remove('selected'));\n                    card.classList.add('selected');\n                    showDancerDetails(card.dataset.dancer);\n                });\n            });\n            \n            // Sequence builder\n            moveCards.forEach(card => {\n                card.addEventListener('dragstart', dragStart);\n            });\n            \n            timelineSlots.forEach(slot => {\n                slot.addEventListener('dragover', dragOver);\n                slot.addEventListener('drop', drop);\n            });\n            \n            playBtn.addEventListener('click', playSequence);\n            resetBtn.addEventListener('click', resetSequence);\n            \n            // Challenge\n            actionBtn.addEventListener('click', performMove);\n            nextLevelBtn.addEventListener('click', nextLevel);\n            restartBtn.addEventListener('click', restartChallenge);\n            \n            // Initialize challenge UI\n            updateChallengeUI();\n        }\n        \n        // Tab switching\n        function switchTab(tabId) {\n            tabBtns.forEach(btn => {\n                btn.classList.toggle('active', btn.dataset.tab === tabId);\n            });\n            \n            tabContents.forEach(content => {\n                content.classList.toggle('active', content.id === tabId);\n            });\n            \n            gameState.currentTab = tabId;\n            \n            if (tabId === 'challenge') {\n                startChallenge();\n            }\n        }\n        \n        // Choreography board functions\n        function showDancerDetails(dancerId) {\n            const dancers = {\n                '1': {\n                    name: 'Lead Dancer',\n                    moves: ['Spin', 'Leap', 'Twirl', 'Dip'],\n                    role: 'Primary performer who leads the choreography'\n                },\n                '2': {\n                    name: 'Support Dancer',\n                    moves: ['Slide', 'Kick', 'Turn', 'Jump'],\n                    role: 'Supports the lead dancer with complementary moves'\n                },\n                '3': {\n                    name: 'Group Dancers',\n                    moves: ['Step', 'Clap', 'Wave', 'Formation Change'],\n                    role: 'Background performers who create formations'\n                }\n            };\n            \n            const dancer = dancers[dancerId];\n            let movesHTML = dancer.moves.map(move => `<li>${move}</li>`).join('');\n            \n            dancerDetails.innerHTML = `\n                <h3>${dancer.name} Details</h3>\n                <p><strong>Role:</strong> ${dancer.role}</p>\n                <p><strong>Signature Moves:</strong></p>\n                <ul>${movesHTML}</ul>\n            `;\n        }\n        \n        // Sequence builder functions\n        function dragStart(e) {\n            e.dataTransfer.setData('text/plain', e.target.dataset.move);\n        }\n        \n        function dragOver(e) {\n            e.preventDefault();\n        }\n        \n        function drop(e) {\n            e.preventDefault();\n            const move = e.dataTransfer.getData('text/plain');\n            const slot = e.target;\n            \n            if (slot.classList.contains('timeline-slot')) {\n                slot.textContent = move.charAt(0).toUpperCase() + move.slice(1);\n                slot.dataset.filled = move;\n                gameState.sequence[parseInt(slot.dataset.slot) - 1] = move;\n            }\n        }\n        \n        function playSequence() {\n            if (gameState.sequence.filter(Boolean).length === 0) {\n                alert('Please add moves to the timeline first!');\n                return;\n            }\n            \n            feedbackDisplay.textContent = 'Playing sequence...';\n            setTimeout(() => {\n                feedbackDisplay.textContent = 'Sequence complete!';\n                gameState.score += 10;\n                updateScore();\n            }, 2000);\n        }\n        \n        function resetSequence() {\n            timelineSlots.forEach(slot => {\n                slot.textContent = '';\n                delete slot.dataset.filled;\n            });\n            gameState.sequence = [];\n            feedbackDisplay.textContent = '';\n        }\n        \n        // Challenge functions\n        function startChallenge() {\n            gameState.challengeProgress = 0;\n            gameState.level = 1;\n            gameState.score = 0;\n            updateScore();\n            updateChallengeUI();\n            prepareNextMove();\n        }\n        \n        function prepareNextMove() {\n            gameState.challengeActive = false;\n            feedbackDisplay.textContent = '';\n            moveDisplay.textContent = 'Get Ready!';\n            countdownDisplay.textContent = '3';\n            gameState.countdownValue = 3;\n            \n            const countdown = setInterval(() => {\n                gameState.countdownValue--;\n                countdownDisplay.textContent = gameState.countdownValue;\n                \n                if (gameState.countdownValue <= 0) {\n                    clearInterval(countdown);\n                    startMove();\n                }\n            }, 1000);\n        }\n        \n        function startMove() {\n            const moves = ['Spin', 'Jump', 'Slide', 'Kick', 'Dip'];\n            gameState.currentMove = moves[Math.floor(Math.random() * moves.length)];\n            moveDisplay.textContent = `Perform: ${gameState.currentMove}`;\n            gameState.challengeActive = true;\n        }\n        \n        function performMove() {\n            if (!gameState.challengeActive) {\n                feedbackDisplay.textContent = 'Too early! Wait for the move';\n                return;\n            }\n            \n            const timing = Math.random();\n            let points = 0;\n            \n            if (timing > 0.7) {\n                feedbackDisplay.textContent = 'Perfect! +20 points';\n                points = 20;\n            } else if (timing > 0.4) {\n                feedbackDisplay.textContent = 'Good! +10 points';\n                points = 10;\n            } else {\n                feedbackDisplay.textContent = 'Miss! Try again';\n                points = 0;\n            }\n            \n            gameState.score += points;\n            gameState.challengeProgress += 25;\n            updateScore();\n            updateChallengeUI();\n            gameState.challengeActive = false;\n            \n            if (gameState.challengeProgress >= 100) {\n                moveDisplay.textContent = 'Level Complete!';\n                nextLevelBtn.style.display = 'inline-block';\n            } else {\n                setTimeout(prepareNextMove, 1500);\n            }\n        }\n        \n        function nextLevel() {\n            gameState.level++;\n            gameState.challengeProgress = 0;\n            nextLevelBtn.style.display = 'none';\n            updateChallengeUI();\n            prepareNextMove();\n        }\n        \n        function restartChallenge() {\n            gameState.score = 0;\n            gameState.level = 1;\n            gameState.challengeProgress = 0;\n            updateScore();\n            updateChallengeUI();\n            prepareNextMove();\n            nextLevelBtn.style.display = 'none';\n        }\n        \n        function updateChallengeUI() {\n            currentLevelDisplay.textContent = gameState.level;\n            progressBar.style.width = `${gameState.challengeProgress}%`;\n            levelDisplay.textContent = gameState.level;\n        }\n        \n        function updateScore() {\n            scoreDisplay.textContent = gameState.score;\n            \n            if (gameState.score > gameState.highScore) {\n                gameState.highScore = gameState.score;\n                localStorage.setItem('danceHighScore', gameState.highScore);\n                highScoreDisplay.textContent = gameState.highScore;\n            }\n        }\n        \n        // Initialize the game when page loads\n        window.addEventListener('DOMContentLoaded', initGame);\n    </script>\n</body>\n</html>",
      "html_file_path": "generated_games/video_game_6863b03266e177b742cc67c6_1751365720.html",
      "created_at": "2025-07-01 10:28:40 UTC",
      "cached": true,
      "youtube_url": "https://www.youtube.com/watch?v=wjzMS8FBXSk",
      "video_title": "Espresso - Sabrina Carpenter | HEXXY Choreography",
      "channel_name": "",
      "view_count": "",
      "cache_key": "48cc15be84fa892e",
      "cached_at": "2025-07-01 10:28:40 UTC"
    },
    "2f256accc18fc4e8": {
      "video_id": "6863b1fc6b30ee3bee7381a2",
      "video_analysis": "```json\n{\n  \"spec\": \"In the history of Mumbai, the city was initially formed by seven separate islands that were later joined together through land reclamation processes. This transformation played a significant role in shaping the city into a major metropolitan area and financial hub of India. The interactive web app aims to help learners understand the historical context and the process of land reclamation that led to the formation of modern-day Mumbai.\n\n  SPECIFICATIONS:\n\n  1. The app must feature an interactive map of the seven islands of Mumbai.\n  2. The app must showcase the names and locations of the seven islands: Colaba, Mazagaon, Old Woman's Island, Worli, Mahim, Parel, and the Island of Bombay.\n  3. The app must include a timeline that highlights the historical periods during which different rulers and empires controlled the islands, such as the Satavahanas, Western Satraps, Abhiras, Vakatakas, Kalachuris, Chalukyas, and Rashtrakutas.\n  4. The app must explain the process of land reclamation, including the causeways that connected the islands, such as the Duncan Causeway, Colaba Causeway, and Mahim Causeway.\n  5. The app must allow users to interact with the map by clicking on each island to reveal historical information and the timeline of its development.\n  6. The app must include a feature where users can drag and drop causeways to connect the islands, simulating the land reclamation process.\n  7. The app must provide a final view of the unified landmass of Mumbai, with the label 'Mumbai' prominently displayed.\n  8. The app must include simple, playful design elements such as animations and interactive quizzes to reinforce the learning experience.\n  9. The app must be accessible and user-friendly, with clear instructions and visual cues to guide the user through the interactive features.\"\n}\n```",
      "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Mumbai Formation Game</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n        \n        body {\n            background-color: #ffffff;\n            color: #333333;\n            line-height: 1.6;\n            padding: 20px;\n            max-width: 1000px;\n            margin: 0 auto;\n        }\n        \n        header {\n            text-align: center;\n            margin-bottom: 20px;\n            padding: 10px;\n            border-bottom: 1px solid #e0e0e0;\n        }\n        \n        h1 {\n            font-size: 2rem;\n            margin-bottom: 10px;\n            color: #222222;\n        }\n        \n        .instructions {\n            background-color: #f8f8f8;\n            padding: 15px;\n            border-radius: 8px;\n            margin-bottom: 20px;\n            border: 1px solid #e0e0e0;\n        }\n        \n        .game-container {\n            display: flex;\n            flex-direction: column;\n            gap: 20px;\n        }\n        \n        .map-container {\n            position: relative;\n            height: 500px;\n            background-color: #f0f0f0;\n            border-radius: 8px;\n            overflow: hidden;\n            border: 1px solid #e0e0e0;\n        }\n        \n        .island {\n            position: absolute;\n            border-radius: 50%;\n            background-color: #d0d0d0;\n            border: 2px solid #a0a0a0;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            cursor: pointer;\n            transition: transform 0.3s, background-color 0.3s;\n            text-align: center;\n            font-size: 14px;\n            font-weight: bold;\n            color: #333;\n            padding: 10px;\n        }\n        \n        .island:hover {\n            transform: scale(1.05);\n            background-color: #c0c0c0;\n        }\n        \n        .island.active {\n            background-color: #a0a0a0;\n            color: white;\n        }\n        \n        .info-panel {\n            background-color: #f8f8f8;\n            padding: 20px;\n            border-radius: 8px;\n            border: 1px solid #e0e0e0;\n            min-height: 200px;\n        }\n        \n        .timeline-container {\n            background-color: #f8f8f8;\n            padding: 20px;\n            border-radius: 8px;\n            border: 1px solid #e0e0e0;\n            overflow-x: auto;\n        }\n        \n        .timeline {\n            display: flex;\n            gap: 10px;\n            padding: 10px 0;\n        }\n        \n        .timeline-item {\n            background-color: #d0d0d0;\n            padding: 10px 15px;\n            border-radius: 20px;\n            white-space: nowrap;\n            font-size: 14px;\n        }\n        \n        .causeway-container {\n            display: flex;\n            gap: 10px;\n            flex-wrap: wrap;\n            margin-top: 10px;\n        }\n        \n        .causeway {\n            background-color: #d0d0d0;\n            padding: 10px 15px;\n            border-radius: 20px;\n            cursor: move;\n            user-select: none;\n        }\n        \n        .dropzone {\n            height: 60px;\n            background-color: #e8e8e8;\n            border: 2px dashed #a0a0a0;\n            border-radius: 8px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-top: 10px;\n        }\n        \n        .dropzone.active {\n            background-color: #d0d0d0;\n            border-style: solid;\n        }\n        \n        .progress-container {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin: 20px 0;\n        }\n        \n        .progress-bar {\n            flex-grow: 1;\n            height: 10px;\n            background-color: #e0e0e0;\n            border-radius: 5px;\n            margin: 0 10px;\n            overflow: hidden;\n        }\n        \n        .progress-fill {\n            height: 100%;\n            background-color: #a0a0a0;\n            width: 0%;\n            transition: width 0.5s;\n        }\n        \n        .controls {\n            display: flex;\n            justify-content: space-between;\n            margin-top: 20px;\n        }\n        \n        button {\n            padding: 10px 20px;\n            background-color: #d0d0d0;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n            font-weight: bold;\n            transition: background-color 0.3s;\n        }\n        \n        button:hover {\n            background-color: #a0a0a0;\n            color: white;\n        }\n        \n        button:disabled {\n            background-color: #e0e0e0;\n            cursor: not-allowed;\n            color: #a0a0a0;\n        }\n        \n        .score-container {\n            text-align: right;\n            font-weight: bold;\n            margin-bottom: 10px;\n        }\n        \n        .final-view {\n            text-align: center;\n            padding: 40px;\n            background-color: #f0f0f0;\n            border-radius: 8px;\n            display: none;\n        }\n        \n        .final-view h2 {\n            font-size: 2.5rem;\n            margin-bottom: 20px;\n        }\n        \n        .quiz-container {\n            background-color: #f8f8f8;\n            padding: 20px;\n            border-radius: 8px;\n            border: 1px solid #e0e0e0;\n            display: none;\n            margin-top: 20px;\n        }\n        \n        .quiz-options {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 10px;\n            margin-top: 15px;\n        }\n        \n        .quiz-option {\n            padding: 15px;\n            background-color: #e0e0e0;\n            border-radius: 5px;\n            cursor: pointer;\n            transition: background-color 0.3s;\n        }\n        \n        .quiz-option:hover {\n            background-color: #d0d0d0;\n        }\n        \n        @media (max-width: 768px) {\n            .map-container {\n                height: 400px;\n            }\n            \n            .island {\n                font-size: 12px;\n                padding: 8px;\n            }\n            \n            .quiz-options {\n                grid-template-columns: 1fr;\n            }\n        }\n    </style>\n</head>\n<body>\n    <header>\n        <h1>Mumbai Formation Game</h1>\n        <div class=\"score-container\">Score: <span id=\"score\">0</span></div>\n    </header>\n    \n    <main class=\"game-container\">\n        <div class=\"instructions\" id=\"step-instructions\">\n            Click on the islands to learn about their history and significance in Mumbai's formation.\n        </div>\n        \n        <div class=\"progress-container\">\n            <span>Step <span id=\"current-step\">1</span> of 3</span>\n            <div class=\"progress-bar\">\n                <div class=\"progress-fill\" id=\"progress-fill\"></div>\n            </div>\n            <span id=\"progress-text\">Islands: 0/7</span>\n        </div>\n        \n        <div class=\"map-container\" id=\"map\">\n            <!-- Islands will be positioned by JavaScript -->\n        </div>\n        \n        <div class=\"info-panel\" id=\"info-panel\">\n            <h2 id=\"island-name\">Select an Island</h2>\n            <p id=\"island-info\">Click on any island to see information about it.</p>\n            <div id=\"timeline-container\" style=\"display: none; margin-top: 15px;\">\n                <h3>Historical Timeline</h3>\n                <div class=\"timeline\" id=\"timeline\"></div>\n            </div>\n        </div>\n        \n        <div id=\"causeway-section\" style=\"display: none;\">\n            <div class=\"instructions\">\n                Drag and drop causeways to connect the islands and form Mumbai.\n            </div>\n            <div class=\"causeway-container\" id=\"causeways\">\n                <div class=\"causeway\" draggable=\"true\" data-causeway=\"duncan\">Duncan Causeway</div>\n                <div class=\"causeway\" draggable=\"true\" data-causeway=\"colaba\">Colaba Causeway</div>\n                <div class=\"causeway\" draggable=\"true\" data-causeway=\"mahim\">Mahim Causeway</div>\n            </div>\n            <div class=\"dropzone\" id=\"dropzone\">Drop causeway here to build</div>\n        </div>\n        \n        <div class=\"quiz-container\" id=\"quiz-container\">\n            <h2>Test Your Knowledge</h2>\n            <p id=\"quiz-question\"></p>\n            <div class=\"quiz-options\" id=\"quiz-options\"></div>\n        </div>\n        \n        <div class=\"final-view\" id=\"final-view\">\n            <h2>Mumbai</h2>\n            <p>The seven islands are now connected to form the great city of Mumbai!</p>\n            <p>Final Score: <span id=\"final-score\">0</span></p>\n            <button id=\"play-again\">Play Again</button>\n        </div>\n        \n        <div class=\"controls\">\n            <button id=\"restart\">Restart</button>\n            <button id=\"next\" disabled>Next Step</button>\n        </div>\n    </main>\n\n    <script>\n        // Game data\n        const gameData = {\n            islands: [\n                { id: 'colaba', name: 'Colaba', x: 20, y: 80, radius: 60, \n                  info: 'Southernmost island, important trading port since ancient times.',\n                  history: ['Satavahanas (230 BCE - 220 CE)', 'Western Satraps (35-405 CE)'] },\n                { id: 'mazagaon', name: 'Mazagaon', x: 80, y: 40, radius: 50, \n                  info: 'Known for its natural harbor and Portuguese influence.',\n                  history: ['Abhiras (203-370 CE)', 'Vakatakas (250-500 CE)'] },\n                { id: 'oldwoman', name: 'Old Woman\\'s Island', x: 30, y: 30, radius: 40, \n                  info: 'Small island with strategic importance for coastal defense.',\n                  history: ['Kalachuris (550-620 CE)', 'Chalukyas (6th-8th century)'] },\n                { id: 'worli', name: 'Worli', x: 50, y: 70, radius: 55, \n                  info: 'Fishing community that became a key connection point.',\n                  history: ['Rashtrakutas (753-982 CE)', 'Silharas (810-1260 CE)'] },\n                { id: 'mahim', name: 'Mahim', x: 70, y: 60, radius: 45, \n                  info: 'Site of the Mahim Fort and important Muslim settlement.',\n                  history: ['Delhi Sultanate (1348-1407)', 'Gujarat Sultanate (1407-1535)'] },\n                { id: 'parel', name: 'Parel', x: 60, y: 50, radius: 50, \n                  info: 'Industrial center with textile mills during British rule.',\n                  history: ['Portuguese (1534-1661)', 'British (1661-1947)'] },\n                { id: 'bombay', name: 'Island of Bombay', x: 40, y: 60, radius: 70, \n                  info: 'The largest island that gave the city its former name.',\n                  history: ['Marathas (1661-1739)', 'British East India Company (1668-1858)'] }\n            ],\n            causeways: [\n                { id: 'duncan', name: 'Duncan Causeway', connects: ['bombay', 'worli'], built: false },\n                { id: 'colaba', name: 'Colaba Causeway', connects: ['colaba', 'oldwoman'], built: false },\n                { id: 'mahim', name: 'Mahim Causeway', connects: ['mahim', 'bombay'], built: false }\n            ],\n            quiz: [\n                {\n                    question: \"How many original islands formed Mumbai?\",\n                    options: [\"Five\", \"Seven\", \"Ten\", \"Three\"],\n                    answer: 1\n                },\n                {\n                    question: \"Which causeway connected Bombay Island to Worli?\",\n                    options: [\"Mahim Causeway\", \"Colaba Causeway\", \"Duncan Causeway\", \"Sion Causeway\"],\n                    answer: 2\n                },\n                {\n                    question: \"Which empire controlled Mumbai before the British?\",\n                    options: [\"Mughals\", \"Portuguese\", \"Dutch\", \"French\"],\n                    answer: 1\n                }\n            ],\n            reclamationInfo: \"Land reclamation began in the 18th century, connecting the seven islands through a series of causeways and landfills. This engineering feat transformed separate islands into a unified landmass, enabling Mumbai to become India's financial capital.\"\n        };\n\n        // Game state\n        const gameState = {\n            currentStep: 1,\n            exploredIslands: [],\n            builtCauseways: [],\n            currentQuiz: 0,\n            score: 0,\n            draggedCauseway: null\n        };\n\n        // Initialize game\n        function initGame() {\n            createIslands();\n            updateProgress();\n            setupEventListeners();\n        }\n\n        // Create island elements\n        function createIslands() {\n            const map = document.getElementById('map');\n            gameData.islands.forEach(island => {\n                const islandEl = document.createElement('div');\n                islandEl.className = 'island';\n                islandEl.id = island.id;\n                islandEl.style.width = `${island.radius * 2}px`;\n                islandEl.style.height = `${island.radius * 2}px`;\n                islandEl.style.left = `${island.x}%`;\n                islandEl.style.top = `${island.y}%`;\n                islandEl.innerHTML = island.name;\n                islandEl.dataset.name = island.name;\n                islandEl.dataset.info = island.info;\n                islandEl.dataset.history = JSON.stringify(island.history);\n                \n                islandEl.addEventListener('click', () => {\n                    if (gameState.currentStep === 1) {\n                        showIslandInfo(island);\n                        if (!gameState.exploredIslands.includes(island.id)) {\n                            gameState.exploredIslands.push(island.id);\n                            updateScore(10);\n                            updateProgress();\n                        }\n                    }\n                });\n                \n                map.appendChild(islandEl);\n            });\n        }\n\n        // Show island information\n        function showIslandInfo(island) {\n            document.getElementById('island-name').textContent = island.name;\n            document.getElementById('island-info').textContent = island.info;\n            \n            const timeline = document.getElementById('timeline');\n            timeline.innerHTML = '';\n            \n            const history = JSON.parse(document.getElementById(island.id).dataset.history);\n            history.forEach(period => {\n                const periodEl = document.createElement('div');\n                periodEl.className = 'timeline-item';\n                periodEl.textContent = period;\n                timeline.appendChild(periodEl);\n            });\n            \n            document.getElementById('timeline-container').style.display = 'block';\n        }\n\n        // Update progress display\n        function updateProgress() {\n            document.getElementById('current-step').textContent = gameState.currentStep;\n            document.getElementById('progress-fill').style.width = `${(gameState.currentStep - 1) * 33}%`;\n            \n            if (gameState.currentStep === 1) {\n                document.getElementById('progress-text').textContent = \n                    `Islands: ${gameState.exploredIslands.length}/7`;\n                document.getElementById('next').disabled = gameState.exploredIslands.length < 7;\n            } else if (gameState.currentStep === 2) {\n                document.getElementById('progress-text').textContent = \n                    `Causeways: ${gameState.builtCauseways.length}/3`;\n                document.getElementById('next').disabled = gameState.builtCauseways.length < 3;\n            }\n        }\n\n        // Move to next step\n        function nextStep() {\n            gameState.currentStep++;\n            \n            if (gameState.currentStep === 2) {\n                document.getElementById('step-instructions').textContent = \n                    \"Drag and drop causeways to connect the islands and form Mumbai.\";\n                document.getElementById('causeway-section').style.display = 'block';\n                document.getElementById('timeline-container').style.display = 'none';\n                document.getElementById('info-panel').style.display = 'none';\n            } else if (gameState.currentStep === 3) {\n                document.getElementById('causeway-section').style.display = 'none';\n                document.getElementById('step-instructions').style.display = 'none';\n                document.getElementById('quiz-container').style.display = 'block';\n                showQuiz();\n            }\n            \n            updateProgress();\n            document.getElementById('next').disabled = true;\n        }\n\n        // Setup event listeners\n        function setupEventListeners() {\n            // Next button\n            document.getElementById('next').addEventListener('click', nextStep);\n            \n            // Restart button\n            document.getElementById('restart').addEventListener('click', restartGame);\n            \n            // Play again button\n            document.getElementById('play-again').addEventListener('click', restartGame);\n            \n            // Causeway drag and drop\n            const causeways = document.querySelectorAll('.causeway');\n            const dropzone = document.getElementById('dropzone');\n            \n            causeways.forEach(causeway => {\n                causeway.addEventListener('dragstart', (e) => {\n                    gameState.draggedCauseway = causeway.dataset.causeway;\n                    e.dataTransfer.setData('text/plain', causeway.dataset.causeway);\n                    dropzone.classList.add('active');\n                });\n                \n                causeway.addEventListener('dragend', () => {\n                    dropzone.classList.remove('active');\n                });\n            });\n            \n            dropzone.addEventListener('dragover', (e) => {\n                e.preventDefault();\n            });\n            \n            dropzone.addEventListener('drop', (e) => {\n                e.preventDefault();\n                dropzone.classList.remove('active');\n                \n                if (gameState.draggedCauseway && !gameState.builtCauseways.includes(gameState.draggedCauseway)) {\n                    gameState.builtCauseweys.push(gameState.draggedCauseway);\n                    updateScore(15);\n                    updateProgress();\n                    \n                    // Visual feedback\n                    dropzone.textContent = `${gameData.causeways.find(c => c.id === gameState.draggedCauseway).name} built!`;\n                    setTimeout(() => {\n                        dropzone.textContent = 'Drop causeway here to build';\n                    }, 2000);\n                }\n                \n                gameState.draggedCauseway = null;\n            });\n        }\n\n        // Show quiz\n        function showQuiz() {\n            if (gameState.currentQuiz < gameData.quiz.length) {\n                const quiz = gameData.quiz[gameState.currentQuiz];\n                document.getElementById('quiz-question').textContent = quiz.question;\n                \n                const optionsContainer = document.getElementById('quiz-options');\n                optionsContainer.innerHTML = '';\n                \n                quiz.options.forEach((option, index) => {\n                    const optionEl = document.createElement('div');\n                    optionEl.className = 'quiz-option';\n                    optionEl.textContent = option;\n                    optionEl.dataset.index = index;\n                    \n                    optionEl.addEventListener('click', () => {\n                        checkAnswer(index);\n                    });\n                    \n                    optionsContainer.appendChild(optionEl);\n                });\n            } else {\n                showFinalView();\n            }\n        }\n\n        // Check quiz answer\n        function checkAnswer(selectedIndex) {\n            const quiz = gameData.quiz[gameState.currentQuiz];\n            const options = document.querySelectorAll('.quiz-option');\n            \n            if (selectedIndex === quiz.answer) {\n                options[selectedIndex].style.backgroundColor = '#a0d0a0';\n                updateScore(20);\n            } else {\n                options[selectedIndex].style.backgroundColor = '#d0a0a0';\n                options[quiz.answer].style.backgroundColor = '#a0d0a0';\n            }\n            \n            setTimeout(() => {\n                gameState.currentQuiz++;\n                showQuiz();\n            }, 1500);\n        }\n\n        // Show final view\n        function showFinalView() {\n            document.getElementById('quiz-container').style.display = 'none';\n            document.getElementById('final-view').style.display = 'block';\n            document.getElementById('final-score').textContent = gameState.score;\n            document.getElementById('controls').style.display = 'none';\n        }\n\n        // Update score\n        function updateScore(points) {\n            gameState.score += points;\n            document.getElementById('score').textContent = gameState.score;\n        }\n\n        // Restart game\n        function restartGame() {\n            // Reset game state\n            gameState.currentStep = 1;\n            gameState.exploredIslands = [];\n            gameState.builtCauseways = [];\n            gameState.currentQuiz = 0;\n            gameState.score = 0;\n            \n            // Reset UI\n            document.getElementById('step-instructions').textContent = \n                \"Click on the islands to learn about their history and significance in Mumbai's formation.\";\n            document.getElementById('step-instructions').style.display = 'block';\n            document.getElementById('causeway-section').style.display = 'none';\n            document.getElementById('quiz-container').style.display = 'none';\n            document.getElementById('final-view').style.display = 'none';\n            document.getElementById('info-panel').style.display = 'block';\n            document.getElementById('timeline-container').style.display = 'none';\n            document.getElementById('island-name').textContent = 'Select an Island';\n            document.getElementById('island-info').textContent = 'Click on any island to see information about it.';\n            document.getElementById('dropzone').textContent = 'Drop causeway here to build';\n            document.getElementById('controls').\n    </script>\n</body>\n</html>",
      "html_file_path": "generated_games/video_game_6863b1fc6b30ee3bee7381a2_1751365641.html",
      "created_at": "2025-07-01 10:27:21 UTC",
      "cached": true,
      "youtube_url": "https://www.youtube.com/watch?v=rpMeNGfdVqk",
      "video_title": "History of Mumbai: A city of Seven Islands | General Geography | Land Reclamation | UPSC CSE",
      "channel_name": "",
      "view_count": "",
      "cache_key": "2f256accc18fc4e8",
      "cached_at": "2025-07-01 10:27:21 UTC"
    },
    "66d1ef4bb14d0638": {
      "video_id": "6863b381487d08d06eebb96f",
      "video_analysis": "```json\n{\n  \"spec\": \"In data science, Principal Component Analysis (PCA) is a technique used to reduce the number of dimensions in large datasets while retaining most of the original information. This is particularly useful for data visualization and machine learning applications.\\n\\nBuild an interactive web app to help learners understand PCA and its applications.\\n\\nSPECIFICATIONS:\\n\\n1. The app must feature an interactive table where users can input or modify data for multiple loans, including dimensions such as loan amount, credit score, annual income, and years in job.\\n2. The app must display a scatter plot that visualizes the data points based on the first two principal components (PC1 and PC2) derived from the input data.\\n3. The app must allow users to toggle the visibility of different dimensions in the scatter plot to observe how PCA reduces dimensionality and retains essential information.\\n4. The app must include a section that explains the concept of principal components, highlighting how they are linear combinations of the original variables that capture the maximum variance.\\n5. The app must provide examples of PCA use cases, such as image compression, data visualization, noise filtration, and healthcare applications, with interactive elements to demonstrate each use case.\\n6. The app must include a brief history section that mentions PCA's development in 1901 and its relevance in modern machine learning applications.\\n7. The app must have a simple, playful design with clear instructions and feedback to guide users through the interactive elements.\\n8. The app must be responsive and accessible, ensuring a smooth user experience across different devices and screen sizes.\"\n}\n```",
      "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>PCA Explorer</title>\n    <style>\n        * {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n        \n        body {\n            background-color: #ffffff;\n            color: #333333;\n            line-height: 1.6;\n            padding: 20px;\n            max-width: 1200px;\n            margin: 0 auto;\n        }\n        \n        header {\n            text-align: center;\n            margin-bottom: 30px;\n            padding: 20px;\n            border-bottom: 1px solid #e0e0e0;\n        }\n        \n        h1 {\n            font-size: 2.5rem;\n            margin-bottom: 10px;\n            color: #222222;\n        }\n        \n        .game-container {\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 30px;\n        }\n        \n        @media (min-width: 768px) {\n            .game-container {\n                grid-template-columns: 1fr 1fr;\n            }\n        }\n        \n        .panel {\n            background-color: #f8f8f8;\n            border-radius: 10px;\n            padding: 25px;\n            box-shadow: 0 4px 6px rgba(0,0,0,0.05);\n        }\n        \n        h2 {\n            font-size: 1.8rem;\n            margin-bottom: 20px;\n            color: #444444;\n            border-bottom: 2px solid #e0e0e0;\n            padding-bottom: 10px;\n        }\n        \n        h3 {\n            font-size: 1.4rem;\n            margin: 20px 0 15px;\n            color: #555555;\n        }\n        \n        .instructions {\n            background-color: #f0f0f0;\n            padding: 15px;\n            border-radius: 8px;\n            margin-bottom: 20px;\n            font-size: 1.1rem;\n        }\n        \n        .data-table {\n            width: 100%;\n            border-collapse: collapse;\n            margin: 20px 0;\n        }\n        \n        .data-table th, .data-table td {\n            border: 1px solid #d0d0d0;\n            padding: 12px;\n            text-align: center;\n        }\n        \n        .data-table th {\n            background-color: #e8e8e8;\n            font-weight: 600;\n        }\n        \n        .data-table input {\n            width: 100%;\n            padding: 8px;\n            border: 1px solid #d0d0d0;\n            border-radius: 4px;\n            text-align: center;\n        }\n        \n        .controls {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 15px;\n            margin: 20px 0;\n        }\n        \n        button {\n            background-color: #e0e0e0;\n            color: #333333;\n            border: none;\n            padding: 12px 20px;\n            border-radius: 6px;\n            cursor: pointer;\n            font-size: 1rem;\n            font-weight: 600;\n            transition: all 0.2s ease;\n            flex: 1;\n            min-width: 120px;\n        }\n        \n        button:hover {\n            background-color: #d0d0d0;\n            transform: translateY(-2px);\n        }\n        \n        button:active {\n            transform: translateY(0);\n        }\n        \n        .btn-primary {\n            background-color: #4a4a4a;\n            color: white;\n        }\n        \n        .btn-primary:hover {\n            background-color: #333333;\n        }\n        \n        .dimension-toggles {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 15px;\n            margin: 20px 0;\n        }\n        \n        .toggle-container {\n            display: flex;\n            align-items: center;\n            background-color: #e8e8e8;\n            padding: 10px 15px;\n            border-radius: 30px;\n        }\n        \n        .toggle-container label {\n            margin-left: 8px;\n            font-weight: 500;\n        }\n        \n        .visualization {\n            position: relative;\n            height: 400px;\n            background-color: #f0f0f0;\n            border-radius: 8px;\n            overflow: hidden;\n            margin: 20px 0;\n        }\n        \n        canvas {\n            display: block;\n            background-color: white;\n        }\n        \n        .explanation {\n            margin: 25px 0;\n            padding: 20px;\n            background-color: #f0f0f0;\n            border-radius: 8px;\n        }\n        \n        .use-cases {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n            gap: 20px;\n            margin: 25px 0;\n        }\n        \n        .use-case {\n            background-color: #e8e8e8;\n            padding: 20px;\n            border-radius: 8px;\n            transition: all 0.3s ease;\n        }\n        \n        .use-case:hover {\n            transform: translateY(-5px);\n            box-shadow: 0 6px 12px rgba(0,0,0,0.1);\n        }\n        \n        .history {\n            margin: 25px 0;\n            padding: 20px;\n            background-color: #f0f0f0;\n            border-radius: 8px;\n            font-style: italic;\n        }\n        \n        .game-stats {\n            display: flex;\n            justify-content: space-between;\n            margin: 25px 0;\n            padding: 15px;\n            background-color: #e8e8e8;\n            border-radius: 8px;\n            font-weight: 600;\n        }\n        \n        .progress-container {\n            height: 20px;\n            background-color: #d0d0d0;\n            border-radius: 10px;\n            margin: 20px 0;\n            overflow: hidden;\n        }\n        \n        .progress-bar {\n            height: 100%;\n            background-color: #4a4a4a;\n            width: 0%;\n            transition: width 0.5s ease;\n        }\n        \n        .level-indicator {\n            text-align: center;\n            font-size: 1.2rem;\n            font-weight: 600;\n            margin: 15px 0;\n        }\n        \n        .feedback {\n            padding: 15px;\n            margin: 20px 0;\n            border-radius: 8px;\n            text-align: center;\n            font-weight: 600;\n            display: none;\n        }\n        \n        .success {\n            background-color: #e8f5e9;\n            color: #2e7d32;\n            border: 1px solid #a5d6a7;\n        }\n        \n        .error {\n            background-color: #ffebee;\n            color: #c62828;\n            border: 1px solid #ef9a9a;\n        }\n    </style>\n</head>\n<body>\n    <header>\n        <h1>PCA Explorer</h1>\n        <p>Understand Principal Component Analysis through interactive exploration</p>\n    </header>\n    \n    <div class=\"game-container\">\n        <div class=\"panel\">\n            <h2>Loan Data Input</h2>\n            <div class=\"instructions\">\n                <p>Enter loan data below. Modify values to see how PCA transforms the data.</p>\n            </div>\n            \n            <table class=\"data-table\">\n                <thead>\n                    <tr>\n                        <th>Loan ID</th>\n                        <th>Amount ($)</th>\n                        <th>Credit Score</th>\n                        <th>Income ($)</th>\n                        <th>Job Years</th>\n                    </tr>\n                </thead>\n                <tbody id=\"data-body\">\n                    <tr>\n                        <td>1</td>\n                        <td><input type=\"number\" class=\"loan-amount\" value=\"25000\"></td>\n                        <td><input type=\"number\" class=\"credit-score\" value=\"720\"></td>\n                        <td><input type=\"number\" class=\"annual-income\" value=\"65000\"></td>\n                        <td><input type=\"number\" class=\"job-years\" value=\"3\"></td>\n                    </tr>\n                    <tr>\n                        <td>2</td>\n                        <td><input type=\"number\" class=\"loan-amount\" value=\"18000\"></td>\n                        <td><input type=\"number\" class=\"credit-score\" value=\"680\"></td>\n                        <td><input type=\"number\" class=\"annual-income\" value=\"52000\"></td>\n                        <td><input type=\"number\" class=\"job-years\" value=\"5\"></td>\n                    </tr>\n                    <tr>\n                        <td>3</td>\n                        <td><input type=\"number\" class=\"loan-amount\" value=\"32000\"></td>\n                        <td><input type=\"number\" class=\"credit-score\" value=\"750\"></td>\n                        <td><input type=\"number\" class=\"annual-income\" value=\"78000\"></td>\n                        <td><input type=\"number\" class=\"job-years\" value=\"2\"></td>\n                    </tr>\n                    <tr>\n                        <td>4</td>\n                        <td><input type=\"number\" class=\"loan-amount\" value=\"42000\"></td>\n                        <td><input type=\"number\" class=\"credit-score\" value=\"690\"></td>\n                        <td><input type=\"number\" class=\"annual-income\" value=\"48000\"></td>\n                        <td><input type=\"number\" class=\"job-years\" value=\"7\"></td>\n                    </tr>\n                </tbody>\n            </table>\n            \n            <div class=\"controls\">\n                <button id=\"add-row\">Add Loan</button>\n                <button id=\"reset-data\">Reset Data</button>\n                <button id=\"calculate-pca\" class=\"btn-primary\">Calculate PCA</button>\n            </div>\n            \n            <h3>Dimensions to Include</h3>\n            <div class=\"dimension-toggles\">\n                <div class=\"toggle-container\">\n                    <input type=\"checkbox\" id=\"toggle-amount\" checked>\n                    <label for=\"toggle-amount\">Loan Amount</label>\n                </div>\n                <div class=\"toggle-container\">\n                    <input type=\"checkbox\" id=\"toggle-credit\" checked>\n                    <label for=\"toggle-credit\">Credit Score</label>\n                </div>\n                <div class=\"toggle-container\">\n                    <input type=\"checkbox\" id=\"toggle-income\" checked>\n                    <label for=\"toggle-income\">Annual Income</label>\n                </div>\n                <div class=\"toggle-container\">\n                    <input type=\"checkbox\" id=\"toggle-job\" checked>\n                    <label for=\"toggle-job\">Job Years</label>\n                </div>\n            </div>\n            \n            <div class=\"game-stats\">\n                <div>Level: <span id=\"level\">1</span>/3</div>\n                <div>Score: <span id=\"score\">0</span></div>\n            </div>\n            \n            <div class=\"progress-container\">\n                <div class=\"progress-bar\" id=\"progress-bar\"></div>\n            </div>\n            \n            <div class=\"level-indicator\">\n                Level <span id=\"current-level\">1</span>: Data Exploration\n            </div>\n            \n            <div class=\"feedback\" id=\"feedback\"></div>\n            \n            <div class=\"controls\">\n                <button id=\"prev-level\">Previous</button>\n                <button id=\"next-level\" class=\"btn-primary\">Next Level</button>\n                <button id=\"restart\">Restart Game</button>\n            </div>\n        </div>\n        \n        <div class=\"panel\">\n            <h2>PCA Visualization</h2>\n            <div class=\"visualization\">\n                <canvas id=\"pca-plot\" width=\"500\" height=\"400\"></canvas>\n            </div>\n            \n            <div class=\"explanation\">\n                <h3>Understanding Principal Components</h3>\n                <p>Principal Component Analysis (PCA) reduces multidimensional data to fewer dimensions while preserving important patterns.</p>\n                <p>PC1 and PC2 are linear combinations of original variables that capture the maximum variance in the data.</p>\n            </div>\n            \n            <h3>PCA Applications</h3>\n            <div class=\"use-cases\">\n                <div class=\"use-case\">\n                    <h4>Image Compression</h4>\n                    <p>PCA reduces storage needs while preserving visual quality by eliminating redundant pixel information.</p>\n                </div>\n                <div class=\"use-case\">\n                    <h4>Data Visualization</h4>\n                    <p>High-dimensional data becomes explorable in 2D/3D space while maintaining relationships.</p>\n                </div>\n                <div class=\"use-case\">\n                    <h4>Noise Filtration</h4>\n    </div>\n    </div>\n    </div>\n    </div>\n</body>\n</html>",
      "html_file_path": "generated_games/video_game_6863b381487d08d06eebb96f_1751364736.html",
      "created_at": "2025-07-01 10:12:16 UTC",
      "cached": true,
      "youtube_url": "https://www.youtube.com/watch?v=ZgyY3JuGQY8&t=3s",
      "video_title": "Principal Component Analysis (PCA) Explained: Simplify Complex Data for Machine Learning",
      "channel_name": "",
      "view_count": "",
      "cache_key": "66d1ef4bb14d0638",
      "cached_at": "2025-07-01 10:12:16 UTC"
    },
    "8d26e264629868c0": {
      "video_id": "8d26e264629868c0",
      "video_analysis": "```json\n{\n  \"spec\": \"In statistics, Principal Component Analysis (PCA) is a method used to reduce the dimensionality of data while retaining trends and patterns. This is achieved by scaling and centering the data and identifying principal components that capture the most variance.\\n\\nBuild an interactive web app to help learners understand PCA.\\n\\nSPECIFICATIONS:\\n\\n1. The app must feature an interactive scatter plot where users can input or adjust data points.\\n2. The app must allow users to scale the data by dividing each variable by its standard deviation, visually demonstrating the effect on the scatter plot.\\n3. The app must enable users to center the data by shifting the mean of each variable to zero, visually demonstrating the effect on the scatter plot.\\n4. The app must calculate and display the first two principal components (PC1 and PC2) as lines on the scatter plot, showing how they capture the most variance in the data.\\n5. The app must provide a table that lists the original data points and their corresponding values after scaling and centering.\\n6. The app must allow users to add or remove variables and observe how the number of principal components changes based on the number of variables and samples.\\n7. The app must include a feature to demonstrate the effect of perfect correlation between variables, showing how the principal components align with the data points.\\n8. The app must provide explanations and visual cues for each step, reinforcing the concepts of scaling, centering, and principal component determination.\\n9. The app must be designed with simple, playful elements to engage users and promote understanding of PCA concepts.\"\n}\n```",
      "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>PCA Explorer</title>\n    <style>\n        * {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n\n        body {\n            background-color: #ffffff;\n            color: #333;\n            line-height: 1.6;\n            padding: 20px;\n            max-width: 1200px;\n            margin: 0 auto;\n        }\n\n        header {\n            text-align: center;\n            margin-bottom: 20px;\n            padding: 10px;\n            border-bottom: 1px solid #eee;\n        }\n\n        h1 {\n            font-size: 2.2rem;\n            margin-bottom: 10px;\n            color: #222;\n        }\n\n        .game-container {\n            display: flex;\n            flex-direction: column;\n            gap: 20px;\n        }\n\n        .panel {\n            background-color: #f8f8f8;\n            border-radius: 8px;\n            padding: 20px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.05);\n        }\n\n        .controls {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 15px;\n            margin-bottom: 20px;\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 8px;\n        }\n\n        label {\n            font-weight: 600;\n            font-size: 0.9rem;\n        }\n\n        button, select {\n            padding: 10px 15px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            background-color: white;\n            cursor: pointer;\n            transition: all 0.2s;\n            font-size: 0.9rem;\n        }\n\n        button:hover, select:hover {\n            background-color: #f0f0f0;\n        }\n\n        button:active {\n            transform: translateY(1px);\n        }\n\n        .btn-primary {\n            background-color: #4a4a4a;\n            color: white;\n            border: none;\n        }\n\n        .btn-primary:hover {\n            background-color: #3a3a3a;\n        }\n\n        .visualization {\n            display: flex;\n            flex-wrap: wrap;\n            gap: 20px;\n        }\n\n        #scatter-plot {\n            flex: 1;\n            min-width: 300px;\n            height: 400px;\n            background-color: white;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            position: relative;\n            overflow: hidden;\n        }\n\n        .data-table {\n            flex: 1;\n            min-width: 300px;\n            overflow-x: auto;\n        }\n\n        table {\n            width: 100%;\n            border-collapse: collapse;\n            background-color: white;\n        }\n\n        th, td {\n            padding: 10px;\n            text-align: center;\n            border: 1px solid #ddd;\n        }\n\n        th {\n            background-color: #f0f0f0;\n            font-weight: 600;\n        }\n\n        .instructions {\n            margin: 20px 0;\n            padding: 15px;\n            background-color: #f0f8ff;\n            border-left: 4px solid #4a90e2;\n            border-radius: 0 4px 4px 0;\n        }\n\n        .step-indicator {\n            display: flex;\n            justify-content: center;\n            gap: 10px;\n            margin: 20px 0;\n        }\n\n        .step {\n            width: 12px;\n            height: 12px;\n            border-radius: 50%;\n            background-color: #ddd;\n        }\n\n        .step.active {\n            background-color: #4a4a4a;\n        }\n\n        .progress-container {\n            margin: 20px 0;\n        }\n\n        .progress-bar {\n            height: 8px;\n            background-color: #eee;\n            border-radius: 4px;\n            overflow: hidden;\n        }\n\n        .progress {\n            height: 100%;\n            background-color: #4a4a4a;\n            width: 0%;\n            transition: width 0.3s;\n        }\n\n        .score-display {\n            text-align: center;\n            font-size: 1.2rem;\n            font-weight: bold;\n            margin: 10px 0;\n        }\n\n        .feedback {\n            text-align: center;\n            min-height: 24px;\n            margin: 10px 0;\n            font-weight: 500;\n        }\n\n        .positive {\n            color: #2e7d32;\n        }\n\n        .negative {\n            color: #c62828;\n        }\n\n        .level-indicator {\n            text-align: center;\n            font-size: 1.1rem;\n            margin-bottom: 15px;\n            font-weight: 600;\n        }\n\n        @media (max-width: 768px) {\n            .visualization {\n                flex-direction: column;\n            }\n            \n            #scatter-plot {\n                height: 350px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <header>\n        <h1>PCA Explorer</h1>\n        <p>Understand Principal Component Analysis through interactive exploration</p>\n    </header>\n\n    <div class=\"game-container\">\n        <div class=\"panel\">\n            <div class=\"level-indicator\">Level: <span id=\"level\">1</span>/3</div>\n            <div class=\"score-display\">Score: <span id=\"score\">0</span></div>\n            <div class=\"feedback\" id=\"feedback\"></div>\n            \n            <div class=\"progress-container\">\n                <div class=\"progress-bar\">\n                    <div class=\"progress\" id=\"progress\"></div>\n                </div>\n            </div>\n            \n            <div class=\"step-indicator\">\n                <div class=\"step active\" data-step=\"1\"></div>\n                <div class=\"step\" data-step=\"2\"></div>\n                <div class=\"step\" data-step=\"3\"></div>\n            </div>\n        </div>\n\n        <div class=\"panel\">\n            <div class=\"controls\">\n                <div class=\"control-group\">\n                    <label for=\"center-toggle\">Center Data (Mean=0)</label>\n                    <button id=\"center-toggle\">Apply Centering</button>\n                </div>\n                \n                <div class=\"control-group\">\n                    <label for=\"scale-toggle\">Scale Data (Unit Variance)</label>\n                    <button id=\"scale-toggle\">Apply Scaling</button>\n                </div>\n                \n                <div class=\"control-group\">\n                    <label for=\"pca-toggle\">Show Principal Components</label>\n                    <button id=\"pca-toggle\">Show PC1 & PC2</button>\n                </div>\n                \n                <div class=\"control-group\">\n                    <label for=\"correlation\">Set Correlation</label>\n                    <select id=\"correlation\">\n                        <option value=\"random\">Random</option>\n                        <option value=\"positive\">Positive Correlation</option>\n                        <option value=\"negative\">Negative Correlation</option>\n                        <option value=\"perfect\">Perfect Correlation</option>\n                    </select>\n                </div>\n            </div>\n            \n            <div class=\"instructions\" id=\"instructions\">\n                <strong>Level 1:</strong> Click on the plot to add data points. Observe how the data distribution affects PCA.\n            </div>\n        </div>\n\n        <div class=\"panel\">\n            <div class=\"visualization\">\n                <div id=\"scatter-plot\"></div>\n                <div class=\"data-table\">\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Point</th>\n                                <th>Original X</th>\n                                <th>Original Y</th>\n                                <th>Scaled X</th>\n                                <th>Scaled Y</th>\n                                <th>PC1</th>\n                                <th>PC2</th>\n                            </tr>\n                        </thead>\n                        <tbody id=\"table-body\">\n                            <!-- Data will be populated here -->\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"panel\">\n            <div style=\"display: flex; justify-content: center; gap: 10px;\">\n                <button id=\"reset-btn\" class=\"btn-primary\">Reset Data</button>\n                <button id=\"prev-level\" class=\"btn-primary\">Previous Level</button>\n                <button id=\"next-level\" class=\"btn-primary\">Next Level</button>\n                <button id=\"restart-btn\" class=\"btn-primary\">Restart Game</button>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        // Game state\n        const gameState = {\n            currentLevel: 1,\n            score: 0,\n            dataPoints: [],\n            centered: false,\n            scaled: false,\n            showPCA: false,\n            correlation: 'random',\n            maxLevel: 3\n        };\n\n        // DOM elements\n        const scatterPlot = document.getElementById('scatter-plot');\n        const tableBody = document.getElementById('table-body');\n        const centerToggle = document.getElementById('center-toggle');\n        const scaleToggle = document.getElementById('scale-toggle');\n        const pcaToggle = document.getElementById('pca-toggle');\n        const correlationSelect = document.getElementById('correlation');\n        const resetBtn = document.getElementById('reset-btn');\n        const prevLevelBtn = document.getElementById('prev-level');\n        const nextLevelBtn = document.getElementById('next-level');\n        const restartBtn = document.getElementById('restart-btn');\n        const levelDisplay = document.getElementById('level');\n        const scoreDisplay = document.getElementById('score');\n        const feedbackDisplay = document.getElementById('feedback');\n        const progressBar = document.getElementById('progress');\n        const instructions = document.getElementById('instructions');\n        const stepIndicators = document.querySelectorAll('.step');\n\n        // Initialize game\n        function initGame() {\n            resetGameState();\n            renderScatterPlot();\n            setupEventListeners();\n            updateUI();\n        }\n\n        // Reset game state\n        function resetGameState() {\n            gameState.currentLevel = 1;\n            gameState.score = 0;\n            gameState.dataPoints = generateInitialData();\n            gameState.centered = false;\n            gameState.scaled = false;\n            gameState.showPCA = false;\n            gameState.correlation = 'random';\n        }\n\n        // Generate initial data points\n        function generateInitialData() {\n            const points = [];\n            for (let i = 0; i < 5; i++) {\n                points.push({\n                    id: i,\n                    x: Math.random() * 8 - 4,\n                    y: Math.random() * 8 - 4,\n                    scaledX: 0,\n                    scaledY: 0,\n                    pc1: 0,\n                    pc2: 0\n                });\n            }\n            return points;\n        }\n\n        // Set up event listeners\n        function setupEventListeners() {\n            scatterPlot.addEventListener('click', handlePlotClick);\n            centerToggle.addEventListener('click', toggleCentering);\n            scaleToggle.addEventListener('click', toggleScaling);\n            pcaToggle.addEventListener('click', togglePCA);\n            correlationSelect.addEventListener('change', handleCorrelationChange);\n            resetBtn.addEventListener('click', resetData);\n            prevLevelBtn.addEventListener('click', goToPreviousLevel);\n            nextLevelBtn.addEventListener('click', goToNextLevel);\n            restartBtn.addEventListener('click', restartGame);\n        }\n\n        // Handle plot click (add data point)\n        function handlePlotClick(e) {\n            if (gameState.currentLevel !== 1) return;\n            \n            const rect = scatterPlot.getBoundingClientRect();\n            const x = (e.clientX - rect.left) / rect.width * 10 - 5;\n            const y = 5 - (e.clientY - rect.top) / rect.height * 10;\n            \n            gameState.dataPoints.push({\n                id: gameState.dataPoints.length,\n                x: parseFloat(x.toFixed(2)),\n                y: parseFloat(y.toFixed(2)),\n                scaledX: 0,\n                scaledY: 0,\n                pc1: 0,\n                pc2: 0\n            });\n            \n            updateScore(5);\n            updateUI();\n        }\n\n        // Toggle data centering\n        function toggleCentering() {\n            gameState.centered = !gameState.centered;\n            centerToggle.textContent = gameState.centered ? 'Undo Centering' : 'Apply Centering';\n            updateScore(2);\n            updateUI();\n        }\n\n        // Toggle data scaling\n        function toggleScaling() {\n            gameState.scaled = !gameState.scaled;\n            scaleToggle.textContent = gameState.scaled ? 'Undo Scaling' : 'Apply Scaling';\n            updateScore(2);\n            updateUI();\n        }\n\n        // Toggle PCA display\n        function togglePCA() {\n            gameState.showPCA = !gameState.showPCA;\n            pcaToggle.textContent = gameState.showPCA ? 'Hide PC1 & PC2' : 'Show PC1 & PC2';\n            updateScore(3);\n            updateUI();\n        }\n\n        // Handle correlation change\n        function handleCorrelationChange() {\n            gameState.correlation = correlationSelect.value;\n            generateCorrelatedData();\n            updateScore(5);\n            updateUI();\n        }\n\n        // Generate correlated data based on selection\n        function generateCorrelatedData() {\n            gameState.dataPoints = [];\n            \n            if (gameState.correlation === 'random') {\n                for (let i = 0; i < 8; i++) {\n                    gameState.dataPoints.push({\n                        id: i,\n                        x: Math.random() * 8 - 4,\n                        y: Math.random() * 8 - 4,\n                        scaledX: 0,\n                        scaledY: 0,\n                        pc1: 0,\n                        pc2: 0\n                    });\n                }\n            } \n            else if (gameState.correlation === 'positive') {\n                for (let i = 0; i < 8; i++) {\n                    const base = Math.random() * 6 - 3;\n                    gameState.dataPoints.push({\n                        id: i,\n                        x: base + (Math.random() - 0.5),\n                        y: base * 0.8 + (Math.random() - 0.5),\n                        scaledX: 0,\n                        scaledY: 0,\n                        pc1: 0,\n                        pc2: 0\n                    });\n                }\n            }\n            else if (gameState.correlation === 'negative') {\n                for (let i = 0; i < 8; i++) {\n                    const base = Math.random() * 6 - 3;\n                    gameState.dataPoints.push({\n                        id: i,\n                        x: base + (Math.random() - 0.5),\n                        y: -base * 0.8 + (Math.random() - 0.5),\n                        scaledX: 0,\n                        scaledY: 0,\n                        pc1: 0,\n                        pc2: 0\n                    });\n                }\n            }\n            else if (gameState.correlation === 'perfect') {\n                for (let i = 0; i < 8; i++) {\n                    const base = Math.random() * 6 - 3;\n                    gameState.dataPoints.push({\n                        id: i,\n                        x: base,\n                        y: base * 0.9,\n                        scaledX: 0,\n                        scaledY: 0,\n                        pc1: 0,\n                        pc2: 0\n                    });\n                }\n            }\n        }\n\n        // Reset data points\n        function resetData() {\n            gameState.dataPoints = generateInitialData();\n            gameState.centered = false;\n            gameState.scaled = false;\n            gameState.showPCA = false;\n            centerToggle.textContent = 'Apply Centering';\n            scaleToggle.textContent = 'Apply Scaling';\n            pcaToggle.textContent = 'Show PC1 & PC2';\n            correlationSelect.value = 'random';\n            updateUI();\n        }\n\n        // Go to previous level\n        function goToPreviousLevel() {\n            if (gameState.currentLevel > 1) {\n                gameState.currentLevel--;\n                updateLevel();\n            }\n        }\n\n        // Go to next level\n        function goToNextLevel() {\n            if (gameState.currentLevel < gameState.maxLevel) {\n                gameState.currentLevel++;\n                updateLevel();\n            }\n        }\n\n        // Update level display and instructions\n        function updateLevel() {\n            levelDisplay.textContent = gameState.currentLevel;\n            \n            // Update step indicators\n            stepIndicators.forEach((step, index) => {\n                if (index + 1 === gameState.currentLevel) {\n                    step.classList.add('active');\n                } else {\n                    step.classList.remove('active');\n                }\n            });\n            \n            // Update instructions based on level\n            if (gameState.currentLevel === 1) {\n                instructions.innerHTML = '<strong>Level 1: Data Exploration</strong> - Click on the plot to add data points. Observe how the data distribution affects PCA.';\n            } else if (gameState.currentLevel === 2) {\n                instructions.innerHTML = '<strong>Level 2: Transformation Effects</strong> - Apply centering and scaling to see how they affect the PCA components.';\n            } else if (gameState.currentLevel === 3) {\n                instructions.innerHTML = '<strong>Level 3: Correlation Patterns</strong> - Change the correlation type to see how it impacts the principal components.';\n            }\n            \n            // Reset data for new level\n            resetData();\n        }\n\n        // Restart game\n        function restartGame() {\n            resetGameState();\n            updateLevel();\n            updateUI();\n        }\n\n        // Update score\n        function updateScore(points) {\n            gameState.score += points;\n            scoreDisplay.textContent = gameState.score;\n            \n            // Show feedback\n            feedbackDisplay.textContent = `+${points} points!`;\n            feedbackDisplay.className = 'feedback positive';\n            \n            setTimeout(() => {\n                feedbackDisplay.textContent = '';\n            }, 1500);\n        }\n\n        // Render scatter plot\n        function renderScatterPlot() {\n            scatterPlot.innerHTML = '';\n            \n            // Create canvas\n            const canvas = document.createElement('canvas');\n            canvas.width = scatterPlot.clientWidth;\n            canvas.height = scatterPlot.clientHeight;\n            scatterPlot.appendChild(canvas);\n            const ctx = canvas.getContext('2d');\n            \n            // Draw grid and axes\n            drawGrid(ctx, canvas.width, canvas.height);\n            \n            // Process data\n            const processedData = processData();\n            \n            // Draw data points\n            drawDataPoints(ctx, canvas.width, canvas.height, processedData);\n            \n            // Draw PCA components if enabled\n            if (gameState.showPCA) {\n                drawPCAComponents(ctx, canvas.width, canvas.height, processedData);\n            }\n        }\n\n        // Draw grid and axes\n        function drawGrid(ctx, width, height) {\n            ctx.clearRect(0, 0, width, height);\n            \n            // Draw grid\n            ctx.strokeStyle = '#eee';\n            ctx.lineWidth = 1;\n            \n            // Vertical lines\n            for (let x = 0.5; x < width; x += width / 10) {\n                ctx.beginPath();\n                ctx.moveTo(x, 0);\n                ctx.lineTo(x, height);\n                ctx.stroke();\n            }\n            \n            // Horizontal lines\n            for (let y = 0.5; y < height; y += height / 10) {\n                ctx.beginPath();\n                ctx.moveTo(0, y);\n                ctx.lineTo(width, y);\n                ctx.stroke();\n            }\n            \n            // Draw axes\n            ctx.strokeStyle = '#333';\n            ctx.lineWidth = 2;\n            \n            // X-axis\n            ctx.beginPath();\n            ctx.moveTo(0, height / 2);\n            ctx.lineTo(width, height / 2);\n            ctx.stroke();\n            \n            // Y-axis\n            ctx.beginPath();\n            ctx.moveTo(width / 2, 0);\n            ctx.lineTo(width / 2, height);\n            ctx.stroke();\n            \n            // Draw axis labels\n            ctx.fillStyle = '#333';\n            ctx.font = '12px Arial';\n            ctx.textAlign = 'center';\n            \n            // X-axis labels\n            for (let i = -5; i <= 5; i++) {\n                if (i === 0) continue;\n                const x = width / 2 + i * (width / 10);\n                ctx.fillText(i.toString(), x, height / 2 + 20);\n            }\n            \n            // Y-axis labels\n            for (let i = -5; i <= 5; i++) {\n                if (i === 0) continue;\n                const y = height / 2 - i * (height / 10);\n                ctx.fillText(i.toString(), width / 2 - 20, y);\n            }\n            \n            // Origin label\n            ctx.fillText('0', width / 2 - 10, height / 2 + 20);\n        }\n\n        // Process data (centering, scaling, PCA)\n        function processData() {\n            const data = JSON.parse(JSON.stringify(gameState.dataPoints));\n            \n            // Calculate means\n            let meanX = 0, meanY = 0;\n            data.forEach\n    </script>\n</body>\n</html>",
      "html_file_path": "generated_games/video_game_8d26e264629868c0_1751365975.html",
      "created_at": "2025-07-01 10:32:55 UTC",
      "cached": true,
      "youtube_url": "https://www.youtube.com/watch?v=oRvgq966yZg",
      "video_title": "StatQuest: PCA - Practical Tips",
      "twelvelabs_video_ids": [
        "6863b8d56b30ee3bee7383ef"
      ],
      "primary_video_id": "6863b8d56b30ee3bee7383ef",
      "total_chunks": null,
      "cache_key": "8d26e264629868c0",
      "cached_at": "2025-07-01 10:32:55 UTC"
    }
  },
  "indexes": {
    "youtube_urls": {
      "https://www.youtube.com/watch?v=qxo8p8PtFeA": "ed463b330e0c117d",
      "https://www.youtube.com/watch?v=_2v6Mbx5v1w": "0cd6e502bd723141",
      "https://www.youtube.com/watch?v=jmmW0F0biz0": "dd2f49f007938719",
      "https://www.youtube.com/watch?v=MQ6fFDwjuco": "e0f30888d8ae998d",
      "https://www.youtube.com/watch?v=T-D1OfcDW1M": "e30b1a0332f1f9ac",
      "https://www.youtube.com/watch?v=gl1r1XV0SLw": "c88ef2d11a87a57d",
      "https://www.youtube.com/watch?v=w5cZM23PG-k": "5c35c36dfe1615b8",
      "https://www.youtube.com/watch?v=wjzMS8FBXSk": "48cc15be84fa892e",
      "https://www.youtube.com/watch?v=rpMeNGfdVqk": "2f256accc18fc4e8",
      "https://www.youtube.com/watch?v=ZgyY3JuGQY8&t=3s": "66d1ef4bb14d0638",
      "https://www.youtube.com/watch?v=oRvgq966yZg": "8d26e264629868c0"
    },
    "video_titles": {
      "Why Linear regression for Machine Learning?": "ed463b330e0c117d",
      "3-min Stretch | Great in the morning or between work! | Beginners | Apartment Friendly": "0cd6e502bd723141",
      "Neural Networks Explained in 5 minutes": "dd2f49f007938719",
      "SHAP values for beginners | What they mean and their applications": "e0f30888d8ae998d",
      "What is Retrieval-Augmented Generation (RAG)?": "e30b1a0332f1f9ac",
      "What is a Vector Database? Powering Semantic Search & AI Applications": "c88ef2d11a87a57d",
      "On The Floor - Jenefer Lopes (Dance Cover) | Orangie Choreography": "5c35c36dfe1615b8",
      "Espresso - Sabrina Carpenter | HEXXY Choreography": "48cc15be84fa892e",
      "History of Mumbai: A city of Seven Islands | General Geography | Land Reclamation | UPSC CSE": "2f256accc18fc4e8",
      "Principal Component Analysis (PCA) Explained: Simplify Complex Data for Machine Learning": "66d1ef4bb14d0638",
      "StatQuest: PCA - Practical Tips": "8d26e264629868c0"
    },
    "video_ids": {
      "ed463b330e0c117d": "ed463b330e0c117d",
      "0cd6e502bd723141": "0cd6e502bd723141",
      "dd2f49f007938719": "dd2f49f007938719",
      "686182c2da8b16ab27af8c64": "ed463b330e0c117d",
      "e0f30888d8ae998d": "e0f30888d8ae998d",
      "e30b1a0332f1f9ac": "e30b1a0332f1f9ac",
      "68631901913f41f63f5d251b": "e30b1a0332f1f9ac",
      "c88ef2d11a87a57d": "c88ef2d11a87a57d",
      "5c35c36dfe1615b8": "5c35c36dfe1615b8",
      "48cc15be84fa892e": "48cc15be84fa892e",
      "2f256accc18fc4e8": "2f256accc18fc4e8",
      "66d1ef4bb14d0638": "66d1ef4bb14d0638",
      "6863b381487d08d06eebb96f": "66d1ef4bb14d0638",
      "6863b1fc6b30ee3bee7381a2": "2f256accc18fc4e8",
      "6863b03266e177b742cc67c6": "48cc15be84fa892e",
      "8d26e264629868c0": "8d26e264629868c0"
    },
    "twelvelabs_video_ids": {
      "686152e39eeb467404d4596e": "ed463b330e0c117d",
      "6861538c90b29e60410608c8": "0cd6e502bd723141",
      "686153da21f0ea193ed033fa": "0cd6e502bd723141",
      "68616b8390b29e6041060a25": "ed463b330e0c117d",
      "68616c3a042f13dfd543c91f": "dd2f49f007938719",
      "686181ef042f13dfd543cb86": "ed463b330e0c117d",
      "686182c2da8b16ab27af8c64": "ed463b330e0c117d",
      "68630ce0913f41f63f5d2380": "e0f30888d8ae998d",
      "68631901913f41f63f5d251b": "e30b1a0332f1f9ac",
      "6863aca366e177b742cc6724": "c88ef2d11a87a57d",
      "6863ae6866e177b742cc676e": "5c35c36dfe1615b8",
      "6863b03266e177b742cc67c6": "48cc15be84fa892e",
      "6863b1fc6b30ee3bee7381a2": "2f256accc18fc4e8",
      "6863b381487d08d06eebb96f": "66d1ef4bb14d0638",
      "6863b8d56b30ee3bee7383ef": "8d26e264629868c0"
    }
  }
}