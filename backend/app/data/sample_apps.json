{
  "metadata": {
    "version": "1.0",
    "created_at": "2025-06-29 14:50:52 UTC",
    "total_entries": 3,
    "last_updated": "2025-06-29 18:17:16 UTC"
  },
  "entries": {
    "ed463b330e0c117d": {
      "video_id": "ed463b330e0c117d",
      "video_analysis": "```json\n{\n  \"spec\": \"In machine learning, linear regression is a method used to model the relationship between a dependent variable and one or more independent variables. It is particularly useful for predicting continuous outcomes based on labeled data sets.\n\n  Build an interactive web app to help learners understand linear regression.\n\n  SPECIFICATIONS:\n\n  1. The app must feature a simple, user-friendly interface with clear instructions.\n  2. The app must include an interactive graph where users can plot data points.\n  3. The app must allow users to input values for height (in inches) and shoe size (US) as examples of independent and dependent variables.\n  4. The app must automatically draw a best fit line through the plotted data points to illustrate the linear relationship.\n  5. The app must provide a brief explanation of linear regression and its application to labeled data sets.\n  6. The app must highlight the concept of outliers by allowing users to plot a point that does not fit the general trend and explaining its significance.\n  7. The app must include a feature to clear the graph and start over for repeated practice.\n  8. The app must offer a simple quiz at the end to test the user's understanding of linear regression concepts.\n  9. The app must include visual elements such as icons and symbols to make the learning experience engaging and interactive.\n  10. The app must be designed with a playful and educational tone to encourage users to explore and learn about linear regression.\"\n}\n```",
      "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Linear Regression Explorer</title>\n    <style>\n        * {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n\n        body {\n            background-color: #ffffff;\n            color: #333;\n            line-height: 1.6;\n            padding: 20px;\n            max-width: 1000px;\n            margin: 0 auto;\n        }\n\n        header {\n            text-align: center;\n            margin-bottom: 30px;\n            padding: 20px;\n            background-color: #f8f9fa;\n            border-radius: 8px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n        }\n\n        h1 {\n            color: #2c3e50;\n            margin-bottom: 10px;\n        }\n\n        .container {\n            display: flex;\n            flex-direction: column;\n            gap: 25px;\n        }\n\n        .panel {\n            background-color: #f8f9fa;\n            border-radius: 8px;\n            padding: 20px;\n            box-shadow: 0 2px 4px rgba(0,0,0,0.05);\n        }\n\n        h2 {\n            color: #2c3e50;\n            margin-bottom: 15px;\n            border-bottom: 1px solid #e0e0e0;\n            padding-bottom: 10px;\n        }\n\n        .graph-container {\n            position: relative;\n            height: 400px;\n            background-color: white;\n            border: 1px solid #e0e0e0;\n            border-radius: 4px;\n            overflow: hidden;\n            margin-bottom: 20px;\n        }\n\n        canvas {\n            display: block;\n        }\n\n        .controls {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 15px;\n            margin-bottom: 20px;\n        }\n\n        @media (max-width: 600px) {\n            .controls {\n                grid-template-columns: 1fr;\n            }\n        }\n\n        .input-group {\n            display: flex;\n            flex-direction: column;\n        }\n\n        label {\n            margin-bottom: 5px;\n            font-weight: 500;\n            color: #555;\n        }\n\n        input {\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            font-size: 16px;\n        }\n\n        .buttons {\n            display: flex;\n            gap: 10px;\n            flex-wrap: wrap;\n        }\n\n        button {\n            padding: 10px 15px;\n            background-color: #4a6fa5;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 16px;\n            transition: background-color 0.2s;\n            flex: 1;\n            min-width: 120px;\n        }\n\n        button:hover {\n            background-color: #3a5a80;\n        }\n\n        button:disabled {\n            background-color: #cccccc;\n            cursor: not-allowed;\n        }\n\n        #clear-btn {\n            background-color: #e74c3c;\n        }\n\n        #clear-btn:hover {\n            background-color: #c0392b;\n        }\n\n        .explanation {\n            background-color: white;\n            padding: 15px;\n            border-left: 4px solid #4a6fa5;\n            border-radius: 0 4px 4px 0;\n            margin: 15px 0;\n        }\n\n        .quiz-section {\n            display: none;\n        }\n\n        .question {\n            margin-bottom: 20px;\n            padding: 15px;\n            background-color: white;\n            border-radius: 4px;\n            box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n        }\n\n        .options {\n            display: flex;\n            flex-direction: column;\n            gap: 10px;\n            margin-top: 10px;\n        }\n\n        .option {\n            display: flex;\n            align-items: center;\n            padding: 10px;\n            background-color: #f8f9fa;\n            border-radius: 4px;\n            cursor: pointer;\n            transition: background-color 0.2s;\n        }\n\n        .option:hover {\n            background-color: #e9ecef;\n        }\n\n        .option input {\n            margin-right: 10px;\n        }\n\n        .progress-container {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin: 20px 0;\n        }\n\n        .progress-bar {\n            height: 10px;\n            background-color: #e0e0e0;\n            border-radius: 5px;\n            flex-grow: 1;\n            margin: 0 15px;\n            overflow: hidden;\n        }\n\n        .progress-fill {\n            height: 100%;\n            background-color: #4a6fa5;\n            width: 0%;\n            transition: width 0.3s ease;\n        }\n\n        .feedback {\n            text-align: center;\n            padding: 15px;\n            margin: 15px 0;\n            border-radius: 4px;\n            display: none;\n        }\n\n        .correct {\n            background-color: #d4edda;\n            color: #155724;\n        }\n\n        .incorrect {\n            background-color: #f8d7da;\n            color: #721c24;\n        }\n\n        .quiz-result {\n            text-align: center;\n            padding: 30px;\n            display: none;\n        }\n\n        .highlight {\n            background-color: #fff3cd;\n            padding: 2px 5px;\n            border-radius: 3px;\n        }\n    </style>\n</head>\n<body>\n    <header>\n        <h1>Linear Regression Explorer</h1>\n        <p>Understand the relationship between height and shoe size through interactive exploration</p>\n    </header>\n\n    <div class=\"container\">\n        <div class=\"panel\">\n            <h2>Interactive Graph</h2>\n            <div class=\"graph-container\">\n                <canvas id=\"regressionCanvas\"></canvas>\n            </div>\n            \n            <div class=\"controls\">\n                <div class=\"input-group\">\n                    <label for=\"height-input\">Height (inches):</label>\n                    <input type=\"number\" id=\"height-input\" min=\"50\" max=\"90\" placeholder=\"60-80\">\n                </div>\n                \n                <div class=\"input-group\">\n                    <label for=\"shoe-input\">Shoe Size (US):</label>\n                    <input type=\"number\" id=\"shoe-input\" min=\"4\" max=\"16\" placeholder=\"6-14\">\n                </div>\n            </div>\n            \n            <div class=\"buttons\">\n                <button id=\"add-btn\">Add Data Point</button>\n                <button id=\"clear-btn\">Clear Graph</button>\n                <button id=\"quiz-btn\">Start Quiz</button>\n            </div>\n        </div>\n        \n        <div class=\"panel\">\n            <h2>Understanding Linear Regression</h2>\n            <div class=\"explanation\">\n                <p>Linear regression models the relationship between a <span class=\"highlight\">dependent variable</span> (shoe size) and one or more <span class=\"highlight\">independent variables</span> (height).</p>\n                <p>The <span class=\"highlight\">line of best fit</span> minimizes the distance between all data points and the line itself.</p>\n                <p>When you add a point that doesn't follow the pattern (an <span class=\"highlight\">outlier</span>), notice how it affects the regression line.</p>\n            </div>\n        </div>\n        \n        <div class=\"panel quiz-section\" id=\"quiz-section\">\n            <h2>Test Your Understanding</h2>\n            \n            <div class=\"progress-container\">\n                <span>Question <span id=\"current-q\">1</span> of 3</span>\n                <div class=\"progress-bar\">\n                    <div class=\"progress-fill\" id=\"progress-fill\"></div>\n                </div>\n                <span id=\"score-display\">Score: 0/3</span>\n            </div>\n            \n            <div class=\"question\" id=\"q1\">\n                <p>1. What does linear regression model?</p>\n                <div class=\"options\">\n                    <label class=\"option\">\n                        <input type=\"radio\" name=\"q1\" value=\"a\"> The relationship between two continuous variables\n                    </label>\n                    <label class=\"option\">\n                        <input type=\"radio\" name=\"q1\" value=\"b\"> The classification of categorical data\n                    </label>\n                    <label class=\"option\">\n                        <input type=\"radio\" name=\"q1\" value=\"c\"> The clustering of similar data points\n                    </label>\n                </div>\n            </div>\n            \n            <div class=\"question\" id=\"q2\" style=\"display:none;\">\n                <p>2. What does the line of best fit represent?</p>\n                <div class=\"options\">\n                    <label class=\"option\">\n                        <input type=\"radio\" name=\"q2\" value=\"a\"> The average of all data points\n                    </label>\n                    <label class=\"option\">\n                        <input type=\"radio\" name=\"q2\" value=\"b\"> The line that minimizes distance to all points\n                    </label>\n                    <label class=\"option\">\n                        <input type=\"radio\" name=\"q2\" value=\"c\"> The connection between the first and last points\n                    </label>\n                </div>\n            </div>\n            \n            <div class=\"question\" id=\"q3\" style=\"display:none;\">\n                <p>3. How do outliers affect the regression line?</p>\n                <div class=\"options\">\n                    <label class=\"option\">\n                        <input type=\"radio\" name=\"q3\" value=\"a\"> They have no effect on the line\n                    </label>\n                    <label class=\"option\">\n                        <input type=\"radio\" name=\"q3\" value=\"b\"> They make the line more accurate\n                    </label>\n                    <label class=\"option\">\n                        <input type=\"radio\" name=\"q3\" value=\"c\"> They can pull the line toward them\n                    </label>\n                </div>\n            </div>\n            \n            <div class=\"feedback\" id=\"feedback\"></div>\n            \n            <div class=\"buttons\">\n                <button id=\"next-btn\" style=\"display:none;\">Next Question</button>\n                <button id=\"submit-btn\">Check Answer</button>\n            </div>\n            \n            <div class=\"quiz-result\" id=\"quiz-result\">\n                <h2>Quiz Completed!</h2>\n                <p>Your final score: <span id=\"final-score\">0</span>/3</p>\n                <button id=\"restart-btn\">Try Again</button>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        // Canvas setup\n        const canvas = document.getElementById('regressionCanvas');\n        const ctx = canvas.getContext('2d');\n        \n        // Set canvas dimensions\n        function resizeCanvas() {\n            canvas.width = canvas.parentElement.clientWidth;\n            canvas.height = canvas.parentElement.clientHeight;\n            drawGraph();\n        }\n        \n        // Initialize canvas\n        window.addEventListener('load', resizeCanvas);\n        window.addEventListener('resize', resizeCanvas);\n        \n        // Data storage\n        let dataPoints = [];\n        let regressionLine = { slope: 0, intercept: 0 };\n        \n        // DOM Elements\n        const heightInput = document.getElementById('height-input');\n        const shoeInput = document.getElementById('shoe-input');\n        const addBtn = document.getElementById('add-btn');\n        const clearBtn = document.getElementById('clear-btn');\n        const quizBtn = document.getElementById('quiz-btn');\n        const quizSection = document.getElementById('quiz-section');\n        const nextBtn = document.getElementById('next-btn');\n        const submitBtn = document.getElementById('submit-btn');\n        const restartBtn = document.getElementById('restart-btn');\n        const feedbackDiv = document.getElementById('feedback');\n        const quizResult = document.getElementById('quiz-result');\n        const finalScore = document.getElementById('final-score');\n        const currentQ = document.getElementById('current-q');\n        const scoreDisplay = document.getElementById('score-display');\n        const progressFill = document.getElementById('progress-fill');\n        \n        // Quiz state\n        let currentQuestion = 1;\n        let score = 0;\n        const correctAnswers = { q1: 'a', q2: 'b', q3: 'c' };\n        \n        // Draw graph elements\n        function drawGraph() {\n            // Clear canvas\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            \n            // Draw grid\n            ctx.strokeStyle = '#e0e0e0';\n            ctx.lineWidth = 1;\n            \n            // Vertical grid lines\n            for (let x = 0; x <= canvas.width; x += canvas.width / 10) {\n                ctx.beginPath();\n                ctx.moveTo(x, 0);\n                ctx.lineTo(x, canvas.height);\n                ctx.stroke();\n            }\n            \n            // Horizontal grid lines\n            for (let y = 0; y <= canvas.height; y += canvas.height / 10) {\n                ctx.beginPath();\n                ctx.moveTo(0, y);\n                ctx.lineTo(canvas.width, y);\n                ctx.stroke();\n            }\n            \n            // Draw axes\n            ctx.strokeStyle = '#333';\n            ctx.lineWidth = 2;\n            \n            // X-axis\n            ctx.beginPath();\n            ctx.moveTo(50, canvas.height - 50);\n            ctx.lineTo(canvas.width - 20, canvas.height - 50);\n            ctx.stroke();\n            \n            // Y-axis\n            ctx.beginPath();\n            ctx.moveTo(50, 20);\n            ctx.lineTo(50, canvas.height - 50);\n            ctx.stroke();\n            \n            // Draw labels\n            ctx.fillStyle = '#333';\n            ctx.font = '14px Arial';\n            \n            // X-axis label\n            ctx.fillText('Height (inches)', canvas.width / 2 - 40, canvas.height - 10);\n            \n            // Y-axis label\n            ctx.save();\n            ctx.translate(15, canvas.height / 2);\n            ctx.rotate(-Math.PI / 2);\n            ctx.fillText('Shoe Size (US)', 0, 0);\n            ctx.restore();\n            \n            // Draw scale markers\n            // X-axis\n            for (let i = 0; i <= 80; i += 10) {\n                const x = 50 + (i / 80) * (canvas.width - 70);\n                ctx.beginPath();\n                ctx.moveTo(x, canvas.height - 45);\n                ctx.lineTo(x, canvas.height - 55);\n                ctx.stroke();\n                ctx.fillText(i, x - 5, canvas.height - 30);\n            }\n            \n            // Y-axis\n            for (let i = 4; i <= 16; i += 2) {\n                const y = canvas.height - 50 - ((i - 4) / 12) * (canvas.height - 90);\n                ctx.beginPath();\n                ctx.moveTo(45, y);\n                ctx.lineTo(55, y);\n                ctx.stroke();\n                ctx.fillText(i, 25, y + 5);\n            }\n            \n            // Draw data points\n            dataPoints.forEach(point => {\n                const x = 50 + (point.height / 80) * (canvas.width - 70);\n                const y = canvas.height - 50 - ((point.shoeSize - 4) / 12) * (canvas.height - 90);\n                \n                // Determine if point is an outlier\n                const predictedY = regressionLine.slope * point.height + regressionLine.intercept;\n                const isOutlier = Math.abs(predictedY - point.shoeSize) > 2.5;\n                \n                // Draw point\n                ctx.beginPath();\n                ctx.arc(x, y, 6, 0, Math.PI * 2);\n                ctx.fillStyle = isOutlier ? '#e74c3c' : '#3498db';\n                ctx.fill();\n                ctx.strokeStyle = '#fff';\n                ctx.lineWidth = 1;\n                ctx.stroke();\n            });\n            \n            // Draw regression line if we have enough points\n            if (dataPoints.length >= 2) {\n                calculateRegression();\n                \n                const startX = 50;\n                const startY = canvas.height - 50 - ((regressionLine.intercept - 4) / 12) * (canvas.height - 90);\n                const endX = canvas.width - 20;\n                const endY = canvas.height - 50 - (((regressionLine.slope * 80 + regressionLine.intercept) - 4) / 12) * (canvas.height - 90);\n                \n                ctx.beginPath();\n                ctx.moveTo(startX, startY);\n                ctx.lineTo(endX, endY);\n                ctx.strokeStyle = '#2c3e50';\n                ctx.lineWidth = 3;\n                ctx.stroke();\n            }\n        }\n        \n        // Calculate linear regression\n        function calculateRegression() {\n            if (dataPoints.length < 2) return;\n            \n            let sumX = 0, sumY = 0, sumXY = 0, sumX2 = 0;\n            const n = dataPoints.length;\n            \n            dataPoints.forEach(point => {\n                sumX += point.height;\n                sumY += point.shoeSize;\n                sumXY += point.height * point.shoeSize;\n                sumX2 += point.height * point.height;\n            });\n            \n            const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\n            const intercept = (sumY - slope * sumX) / n;\n            \n            regressionLine = { slope, intercept };\n        }\n        \n        // Add data point\n        function addDataPoint() {\n            const height = parseFloat(heightInput.value);\n            const shoeSize = parseFloat(shoeInput.value);\n            \n            if (isNaN(height) || isNaN(shoeSize) || \n                height < 50 || height > 90 || \n                shoeSize < 4 || shoeSize > 16) {\n                alert('Please enter valid values: Height (50-90), Shoe Size (4-16)');\n                return;\n            }\n            \n            dataPoints.push({ height, shoeSize });\n            heightInput.value = '';\n            shoeInput.value = '';\n            drawGraph();\n            \n            // Enable quiz button after 3 points\n            if (dataPoints.length >= 3) {\n                quizBtn.disabled = false;\n            }\n        }\n        \n        // Clear all data points\n        function clearGraph() {\n            dataPoints = [];\n            regressionLine = { slope: 0, intercept: 0 };\n            drawGraph();\n            quizBtn.disabled = true;\n        }\n        \n        // Quiz functionality\n        function startQuiz() {\n            quizSection.style.display = 'block';\n            document.getElementById('q1').style.display = 'block';\n            quizBtn.disabled = true;\n            updateProgress();\n        }\n        \n        function checkAnswer() {\n            const selectedOption = document.querySelector(`input[name=\"q${currentQuestion}\"]:checked`);\n            \n            if (!selectedOption) {\n                alert('Please select an answer');\n                return;\n            }\n            \n            const userAnswer = selectedOption.value;\n            const isCorrect = userAnswer === correctAnswers[`q${currentQuestion}`];\n            \n            // Show feedback\n            feedbackDiv.style.display = 'block';\n            feedbackDiv.textContent = isCorrect ? \n                'Correct! Well done.' : \n                'Incorrect. Try again.';\n            feedbackDiv.className = isCorrect ? 'feedback correct' : 'feedback incorrect';\n            \n            if (isCorrect) {\n                score++;\n                scoreDisplay.textContent = `Score: ${score}/3`;\n                \n                // Move to next question after delay\n                setTimeout(() => {\n                    feedbackDiv.style.display = 'none';\n                    nextQuestion();\n                }, 1500);\n            }\n            \n            submitBtn.style.display = 'none';\n            nextBtn.style.display = 'block';\n        }\n        \n        function nextQuestion() {\n            document.getElementById(`q${currentQuestion}`).style.display = 'none';\n            currentQuestion++;\n            \n            if (currentQuestion <= 3) {\n                document.getElementById(`q${currentQuestion}`).style.display = 'block';\n                currentQ.textContent = currentQuestion;\n                updateProgress();\n                submitBtn.style.display = 'block';\n                nextBtn.style.display = 'none';\n                \n                // Clear selection\n                const options = document.querySelectorAll(`input[name=\"q${currentQuestion}\"]`);\n                options.forEach(option => option.checked = false);\n            } else {\n                // Quiz completed\n                showResults();\n            }\n        }\n        \n        function updateProgress() {\n            const progress = (currentQuestion / 3) * 100;\n            progressFill.style.width = `${progress}%`;\n        }\n        \n        function showResults() {\n            document.querySelector('.questions-container').style.display = 'none';\n            quizResult.style.display = 'block';\n            finalScore.textContent = score;\n        }\n        \n        function restartQuiz() {\n            currentQuestion = 1;\n            score = 0;\n            quizResult.style.display = 'none';\n            document.getElementById('q1').style.display = 'block';\n            currentQ.textContent = '1';\n            scoreDisplay.textContent = 'Score: 0/3';\n            updateProgress();\n            submitBtn.style.display = 'block';\n            nextBtn.style.display = 'none';\n            \n            // Clear all selections\n            document.querySelectorAll('input[type=\"radio\"]').forEach(radio => {\n                radio.checked = false;\n            });\n        }\n        \n        // Event listeners\n        addBtn.addEventListener('click', addDataPoint);\n        clearBtn.addEventListener('click', clearGraph);\n        quizBtn.addEventListener('click', startQuiz);\n        submitBtn.addEventListener('click', checkAnswer);\n        nextBtn.addEventListener('click', nextQuestion);\n        restartBtn.addEventListener('click', restartQuiz);\n        \n        // Allow adding points by clicking on the graph\n        canvas.addEventListener('click', (e) => {\n            const rect = canvas.getBoundingClientRect();\n            const x = e.clientX - rect.left;\n            const y = e.clientY - rect.top;\n            \n            // Convert pixel coordinates to data values\n            const height = ((x - 50) / (canvas.width - 70)) * 80;\n            const shoeSize = 16 - ((y - 20) / (canvas.height - 70)) * 12;\n            \n            // Only add if within valid range\n            if (height >= 50 && height <= 90 && shoeSize >= 4 && shoeSize <= 16) {\n                dataPoints.push({ height, shoeSize });\n                drawGraph();\n                \n                // Enable quiz button after 3 points\n                if (dataPoints.length >= 3) {\n                    quizBtn.disabled = false;\n                }\n            }\n        });\n        \n        // Initialize\n        drawGraph();\n    </script>\n</body>\n</html>",
      "html_file_path": "generated_games/video_game_ed463b330e0c117d_1751221036.html",
      "created_at": "2025-06-29 18:17:16 UTC",
      "cached": true,
      "youtube_url": "https://www.youtube.com/watch?v=qxo8p8PtFeA",
      "video_title": "Why Linear regression for Machine Learning?",
      "twelvelabs_video_ids": [
        "686182c2da8b16ab27af8c64"
      ],
      "primary_video_id": "686182c2da8b16ab27af8c64",
      "total_chunks": null,
      "cache_key": "ed463b330e0c117d",
      "cached_at": "2025-06-29 18:17:16 UTC"
    },
    "0cd6e502bd723141": {
      "video_id": "0cd6e502bd723141",
      "video_analysis": "```json\n{\n  \"spec\": \"In the video, a yoga instructor named Michelle leads a 3-minute stretching routine that includes breathing exercises, arm stretches, elbow rotations, and torso twists. The routine is designed to be a quick and effective way to start the day with a bit of exercise and mindfulness.\\n\\nBuild an interactive web app to help learners understand and practice the stretching routine.\\n\\nSPECIFICATIONS:\\n\\n1. The app must feature a simple, user-friendly interface with clear instructions and visual aids.\\n2. The app must include a series of interactive steps that mirror the stretching routine demonstrated by Michelle.\\n3. The app must allow users to follow along with the routine, with each step clearly labeled and accompanied by a visual representation of the pose.\\n4. The app must include a breathing exercise section where users can practice inhaling and exhaling in sync with visual cues.\\n5. The app must provide feedback on the user's progress, such as a timer to ensure each stretch is held for the appropriate duration.\\n6. The app must allow users to pause, restart, or skip steps as needed.\\n7. The app must include a final section where users can review the entire routine and practice it again if desired.\\n8. The app must be accessible and include options for users with different levels of flexibility and fitness.\\n9. The app must be responsive and work well on both desktop and mobile devices.\\n10. The app must include motivational messages and encouragement to keep users engaged and motivated throughout the routine.\"\n}\n```",
      "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Morning Stretch Routine</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n        \n        body {\n            background-color: #ffffff;\n            color: #333333;\n            line-height: 1.6;\n            min-height: 100vh;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            padding: 20px;\n        }\n        \n        #app {\n            width: 100%;\n            max-width: 600px;\n            background-color: #f8f8f8;\n            border-radius: 12px;\n            box-shadow: 0 4px 20px rgba(0,0,0,0.08);\n            overflow: hidden;\n            position: relative;\n        }\n        \n        .screen {\n            padding: 30px;\n            display: none;\n            flex-direction: column;\n            min-height: 500px;\n        }\n        \n        .screen.active {\n            display: flex;\n        }\n        \n        h1 {\n            font-size: 28px;\n            margin-bottom: 20px;\n            text-align: center;\n            color: #222222;\n        }\n        \n        h2 {\n            font-size: 22px;\n            margin-bottom: 15px;\n            color: #222222;\n        }\n        \n        p {\n            margin-bottom: 20px;\n            text-align: center;\n        }\n        \n        .progress-container {\n            width: 100%;\n            background-color: #e0e0e0;\n            border-radius: 10px;\n            margin: 20px 0;\n            height: 12px;\n        }\n        \n        .progress-bar {\n            height: 100%;\n            background-color: #4a4a4a;\n            border-radius: 10px;\n            width: 0%;\n            transition: width 0.3s ease;\n        }\n        \n        .pose-container {\n            display: flex;\n            justify-content: center;\n            margin: 25px 0;\n            height: 200px;\n        }\n        \n        .pose {\n            width: 150px;\n            height: 150px;\n            background-color: #e9e9e9;\n            border-radius: 50%;\n            position: relative;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            overflow: hidden;\n        }\n        \n        .pose-figure {\n            position: relative;\n            width: 80px;\n            height: 120px;\n        }\n        \n        .head {\n            position: absolute;\n            top: 0;\n            left: 50%;\n            transform: translateX(-50%);\n            width: 30px;\n            height: 30px;\n            background-color: #333;\n            border-radius: 50%;\n        }\n        \n        .body {\n            position: absolute;\n            top: 30px;\n            left: 50%;\n            transform: translateX(-50%);\n            width: 8px;\n            height: 50px;\n            background-color: #333;\n        }\n        \n        .arm {\n            position: absolute;\n            width: 40px;\n            height: 8px;\n            background-color: #333;\n            top: 40px;\n        }\n        \n        .arm.left {\n            left: -20px;\n            transform-origin: right center;\n        }\n        \n        .arm.right {\n            right: -20px;\n            transform-origin: left center;\n        }\n        \n        .leg {\n            position: absolute;\n            width: 8px;\n            height: 40px;\n            background-color: #333;\n            top: 80px;\n        }\n        \n        .leg.left {\n            left: 35px;\n        }\n        \n        .leg.right {\n            right: 35px;\n        }\n        \n        .timer {\n            font-size: 36px;\n            font-weight: bold;\n            text-align: center;\n            margin: 20px 0;\n            color: #333;\n        }\n        \n        .breathing-circle {\n            width: 120px;\n            height: 120px;\n            border-radius: 50%;\n            background-color: #e0e0e0;\n            margin: 0 auto;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            font-size: 20px;\n            font-weight: bold;\n            transition: all 1.5s ease;\n        }\n        \n        .instructions {\n            background-color: #e9e9e9;\n            padding: 15px;\n            border-radius: 8px;\n            margin: 15px 0;\n            text-align: center;\n        }\n        \n        .controls {\n            display: flex;\n            justify-content: center;\n            gap: 15px;\n            margin-top: 20px;\n            flex-wrap: wrap;\n        }\n        \n        button {\n            padding: 12px 25px;\n            border: none;\n            border-radius: 30px;\n            background-color: #4a4a4a;\n            color: white;\n            font-size: 16px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: background-color 0.3s;\n            min-width: 120px;\n        }\n        \n        button:hover {\n            background-color: #333;\n        }\n        \n        button.secondary {\n            background-color: #b0b0b0;\n        }\n        \n        button.secondary:hover {\n            background-color: #999;\n        }\n        \n        .step-indicator {\n            text-align: center;\n            margin: 10px 0;\n            font-weight: 500;\n            color: #555;\n        }\n        \n        .motivation {\n            text-align: center;\n            font-style: italic;\n            margin: 15px 0;\n            color: #555;\n        }\n        \n        .completion-screen {\n            text-align: center;\n        }\n        \n        .completion-screen h1 {\n            margin-bottom: 10px;\n        }\n        \n        .completion-screen p {\n            margin-bottom: 30px;\n        }\n        \n        @media (max-width: 480px) {\n            .screen {\n                padding: 20px 15px;\n            }\n            \n            h1 {\n                font-size: 24px;\n            }\n            \n            h2 {\n                font-size: 20px;\n            }\n            \n            .pose {\n                width: 130px;\n                height: 130px;\n            }\n            \n            button {\n                padding: 10px 20px;\n                font-size: 14px;\n                min-width: 100px;\n            }\n            \n            .controls {\n                gap: 10px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div id=\"app\">\n        <!-- Welcome Screen -->\n        <div id=\"welcome-screen\" class=\"screen active\">\n            <h1>Morning Stretch Routine</h1>\n            <p>Start your day with this 3-minute stretching routine to energize your body and mind.</p>\n            <div class=\"pose-container\">\n                <div class=\"pose\">\n                    <div class=\"pose-figure\">\n                        <div class=\"head\"></div>\n                        <div class=\"body\"></div>\n                        <div class=\"arm left\" style=\"transform: rotate(45deg);\"></div>\n                        <div class=\"arm right\" style=\"transform: rotate(-45deg);\"></div>\n                        <div class=\"leg left\"></div>\n                        <div class=\"leg right\"></div>\n                    </div>\n                </div>\n            </div>\n            <p>Follow along with Michelle's guided stretches to improve flexibility and mindfulness.</p>\n            <div class=\"controls\">\n                <button id=\"start-btn\">Begin Routine</button>\n            </div>\n        </div>\n        \n        <!-- Breathing Exercise Screen -->\n        <div id=\"breathing-screen\" class=\"screen\">\n            <h2>Breathing Exercise</h2>\n            <div class=\"step-indicator\">Step 1 of 4</div>\n            <div class=\"progress-container\">\n                <div class=\"progress-bar\" id=\"breath-progress\"></div>\n            </div>\n            <div class=\"motivation\">Focus on your breath to center yourself</div>\n            <div class=\"breathing-circle\" id=\"breath-circle\">Inhale</div>\n            <div class=\"instructions\">Breathe deeply as the circle expands and contracts</div>\n            <div class=\"timer\" id=\"breath-timer\">0:30</div>\n            <div class=\"controls\">\n                <button id=\"pause-btn\" class=\"secondary\">Pause</button>\n                <button id=\"next-btn1\">Next</button>\n            </div>\n        </div>\n        \n        <!-- Arm Stretch Screen -->\n        <div id=\"arm-screen\" class=\"screen\">\n            <h2>Arm Stretch</h2>\n            <div class=\"step-indicator\">Step 2 of 4</div>\n            <div class=\"progress-container\">\n                <div class=\"progress-bar\" id=\"arm-progress\"></div>\n            </div>\n            <div class=\"motivation\">Feel the stretch through your shoulders and back</div>\n            <div class=\"pose-container\">\n                <div class=\"pose\">\n                    <div class=\"pose-figure\">\n                        <div class=\"head\"></div>\n                        <div class=\"body\"></div>\n                        <div class=\"arm left\" style=\"transform: rotate(135deg); top: 35px;\"></div>\n                        <div class=\"arm right\" style=\"transform: rotate(-135deg); top: 35px;\"></div>\n                        <div class=\"leg left\"></div>\n                        <div class=\"leg right\"></div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"instructions\">Reach both arms straight up toward the ceiling</div>\n            <div class=\"timer\" id=\"arm-timer\">0:45</div>\n            <div class=\"controls\">\n                <button id=\"pause-btn2\" class=\"secondary\">Pause</button>\n                <button id=\"next-btn2\">Next</button>\n            </div>\n        </div>\n        \n        <!-- Elbow Rotation Screen -->\n        <div id=\"elbow-screen\" class=\"screen\">\n            <h2>Elbow Rotations</h2>\n            <div class=\"step-indicator\">Step 3 of 4</div>\n            <div class=\"progress-container\">\n                <div class=\"progress-bar\" id=\"elbow-progress\"></div>\n            </div>\n            <div class=\"motivation\">Keep movements slow and controlled</div>\n            <div class=\"pose-container\">\n                <div class=\"pose\">\n                    <div class=\"pose-figure\">\n                        <div class=\"head\"></div>\n                        <div class=\"body\"></div>\n                        <div class=\"arm left\" style=\"transform: rotate(90deg); top: 45px; width: 30px;\"></div>\n                        <div class=\"arm right\" style=\"transform: rotate(-90deg); top: 45px; width: 30px;\"></div>\n                        <div class=\"leg left\"></div>\n                        <div class=\"leg right\"></div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"instructions\">Rotate elbows in large circles, forward and backward</div>\n            <div class=\"timer\" id=\"elbow-timer\">0:45</div>\n            <div class=\"controls\">\n                <button id=\"pause-btn3\" class=\"secondary\">Pause</button>\n                <button id=\"next-btn3\">Next</button>\n            </div>\n        </div>\n        \n        <!-- Torso Twist Screen -->\n        <div id=\"torso-screen\" class=\"screen\">\n            <h2>Torso Twists</h2>\n            <div class=\"step-indicator\">Step 4 of 4</div>\n            <div class=\"progress-container\">\n                <div class=\"progress-bar\" id=\"torso-progress\"></div>\n            </div>\n            <div class=\"motivation\">Engage your core as you rotate</div>\n            <div class=\"pose-container\">\n                <div class=\"pose\">\n                    <div class=\"pose-figure\" style=\"transform: rotate(-20deg);\">\n                        <div class=\"head\"></div>\n                        <div class=\"body\"></div>\n                        <div class=\"arm left\" style=\"transform: rotate(30deg);\"></div>\n                        <div class=\"arm right\" style=\"transform: rotate(-30deg);\"></div>\n                        <div class=\"leg left\"></div>\n                        <div class=\"leg right\"></div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"instructions\">Gently twist your upper body from side to side</div>\n            <div class=\"timer\" id=\"torso-timer\">0:45</div>\n            <div class=\"controls\">\n                <button id=\"pause-btn4\" class=\"secondary\">Pause</button>\n                <button id=\"next-btn4\">Complete</button>\n            </div>\n        </div>\n        \n        <!-- Completion Screen -->\n        <div id=\"completion-screen\" class=\"screen\">\n            <div class=\"completion-screen\">\n                <h1>Great Job!</h1>\n                <p>You've completed the Morning Stretch Routine.</p>\n                <div class=\"pose-container\">\n                    <div class=\"pose\">\n                        <div class=\"pose-figure\">\n                            <div class=\"head\"></div>\n                            <div class=\"body\"></div>\n                            <div class=\"arm left\" style=\"transform: rotate(45deg);\"></div>\n                            <div class=\"arm right\" style=\"transform: rotate(-45deg);\"></div>\n                            <div class=\"leg left\"></div>\n                            <div class=\"leg right\"></div>\n                        </div>\n                    </div>\n                </div>\n                <p>Take this energy with you throughout your day!</p>\n                <div class=\"controls\">\n                    <button id=\"restart-btn\">Restart Routine</button>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        // DOM Elements\n        const screens = {\n            welcome: document.getElementById('welcome-screen'),\n            breathing: document.getElementById('breathing-screen'),\n            arm: document.getElementById('arm-screen'),\n            elbow: document.getElementById('elbow-screen'),\n            torso: document.getElementById('torso-screen'),\n            completion: document.getElementById('completion-screen')\n        };\n        \n        const progressBars = {\n            breath: document.getElementById('breath-progress'),\n            arm: document.getElementById('arm-progress'),\n            elbow: document.getElementById('elbow-progress'),\n            torso: document.getElementById('torso-progress')\n        };\n        \n        const timers = {\n            breath: document.getElementById('breath-timer'),\n            arm: document.getElementById('arm-timer'),\n            elbow: document.getElementById('elbow-timer'),\n            torso: document.getElementById('torso-timer')\n        };\n        \n        const breathCircle = document.getElementById('breath-circle');\n        const startBtn = document.getElementById('start-btn');\n        const nextBtns = {\n            step1: document.getElementById('next-btn1'),\n            step2: document.getElementById('next-btn2'),\n            step3: document.getElementById('next-btn3'),\n            step4: document.getElementById('next-btn4')\n        };\n        \n        const pauseBtns = {\n            step1: document.getElementById('pause-btn'),\n            step2: document.getElementById('pause-btn2'),\n            step3: document.getElementById('pause-btn3'),\n            step4: document.getElementById('pause-btn4')\n        };\n        \n        const restartBtn = document.getElementById('restart-btn');\n        \n        // State variables\n        let currentScreen = 'welcome';\n        let timersActive = {\n            breath: false,\n            arm: false,\n            elbow: false,\n            torso: false\n        };\n        let timerIntervals = {};\n        let timerValues = {\n            breath: 30,\n            arm: 45,\n            elbow: 45,\n            torso: 45\n        };\n        let isBreathingIn = true;\n        let breathingInterval;\n        \n        // Initialize progress bars\n        progressBars.breath.style.width = '0%';\n        progressBars.arm.style.width = '0%';\n        progressBars.elbow.style.width = '0%';\n        progressBars.torso.style.width = '0%';\n        \n        // Switch between screens\n        function showScreen(screenName) {\n            screens[currentScreen].classList.remove('active');\n            screens[screenName].classList.add('active');\n            currentScreen = screenName;\n            \n            // Start appropriate timer when screen is shown\n            if (screenName === 'breathing') {\n                startBreathingExercise();\n            } else if (screenName === 'arm') {\n                startTimer('arm');\n            } else if (screenName === 'elbow') {\n                startTimer('elbow');\n            } else if (screenName === 'torso') {\n                startTimer('torso');\n            }\n        }\n        \n        // Breathing exercise logic\n        function startBreathingExercise() {\n            timersActive.breath = true;\n            breathCircle.textContent = 'Inhale';\n            breathCircle.style.backgroundColor = '#d0e8f2';\n            breathCircle.style.transform = 'scale(1)';\n            isBreathingIn = true;\n            \n            // Start breathing animation\n            breathingInterval = setInterval(() => {\n                if (isBreathingIn) {\n                    breathCircle.textContent = 'Exhale';\n                    breathCircle.style.backgroundColor = '#e0e0e0';\n                    breathCircle.style.transform = 'scale(0.7)';\n                } else {\n                    breathCircle.textContent = 'Inhale';\n                    breathCircle.style.backgroundColor = '#d0e8f2';\n                    breathCircle.style.transform = 'scale(1)';\n                }\n                isBreathingIn = !isBreathingIn;\n            }, 3000);\n            \n            // Start countdown timer\n            startTimer('breath');\n        }\n        \n        // Timer logic\n        function startTimer(step) {\n            if (timerIntervals[step]) {\n                clearInterval(timerIntervals[step]);\n            }\n            \n            let timeLeft = timerValues[step];\n            updateTimerDisplay(step, timeLeft);\n            \n            timerIntervals[step] = setInterval(() => {\n                if (timersActive[step]) {\n                    timeLeft--;\n                    updateTimerDisplay(step, timeLeft);\n                    updateProgressBar(step, timeLeft);\n                    \n                    if (timeLeft <= 0) {\n                        clearInterval(timerIntervals[step]);\n                        if (step === 'breath') {\n                            clearInterval(breathingInterval);\n                        }\n                    }\n                }\n            }, 1000);\n        }\n        \n        function updateTimerDisplay(step, timeLeft) {\n            const minutes = Math.floor(timeLeft / 60);\n            const seconds = timeLeft % 60;\n            timers[step].textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`;\n        }\n        \n        function updateProgressBar(step, timeLeft) {\n            const totalTime = timerValues[step];\n            const percentage = ((totalTime - timeLeft) / totalTime) * 100;\n            progressBars[step].style.width = `${percentage}%`;\n        }\n        \n        function togglePause(step) {\n            timersActive[step] = !timersActive[step];\n            pauseBtns[`step${step === 'breath' ? 1 : step === 'arm' ? 2 : step === 'elbow' ? 3 : 4}`].textContent = \n                timersActive[step] ? 'Pause' : 'Resume';\n        }\n        \n        // Event Listeners\n        startBtn.addEventListener('click', () => showScreen('breathing'));\n        \n        nextBtns.step1.addEventListener('click', () => showScreen('arm'));\n        nextBtns.step2.addEventListener('click', () => showScreen('elbow'));\n        nextBtns.step3.addEventListener('click', () => showScreen('torso'));\n        nextBtns.step4.addEventListener('click', () => showScreen('completion'));\n        \n        pauseBtns.step1.addEventListener('click', () => togglePause('breath'));\n        pauseBtns.step2.addEventListener('click', () => togglePause('arm'));\n        pauseBtns.step3.addEventListener('click', () => togglePause('elbow'));\n        pauseBtns.step4.addEventListener('click', () => togglePause('torso'));\n        \n        restartBtn.addEventListener('click', () => {\n            // Reset all timers and progress\n            Object.keys(timerIntervals).forEach(step => {\n                clearInterval(timerIntervals[step]);\n            });\n            \n            timerValues = {\n                breath: 30,\n                arm: 45,\n                elbow: 45,\n                torso: 45\n            };\n            \n            progressBars.breath.style.width = '0%';\n            progressBars.arm.style.width = '0%';\n            progressBars.elbow.style.width = '0%';\n            progressBars.torso.style.width = '0%';\n            \n            timersActive = {\n                breath: false,\n                arm: false,\n                elbow: false,\n                torso: false\n            };\n            \n            showScreen('welcome');\n        });\n    </script>\n</body>\n</html>",
      "html_file_path": "generated_games/video_game_0cd6e502bd723141_1751209026.html",
      "created_at": "2025-06-29 14:57:06 UTC",
      "cached": true,
      "youtube_url": "https://www.youtube.com/watch?v=_2v6Mbx5v1w",
      "video_title": "3-min Stretch | Great in the morning or between work! | Beginners | Apartment Friendly",
      "twelvelabs_video_ids": [
        "686153da21f0ea193ed033fa"
      ],
      "primary_video_id": "686153da21f0ea193ed033fa",
      "total_chunks": null,
      "cache_key": "0cd6e502bd723141",
      "cached_at": "2025-06-29 14:57:06 UTC"
    },
    "dd2f49f007938719": {
      "video_id": "dd2f49f007938719",
      "video_analysis": "```json\n{\n  \"spec\": \"In neural networks, data flows through interconnected layers of nodes, each of which can be thought of as a linear regression model. The network learns and improves its accuracy over time through training data and backpropagation. Different types of neural networks, such as CNNs and RNNs, are suited for various tasks like image recognition and time series prediction.\n\n  Build an interactive web app to help learners understand the basics of neural networks.\n\n  SPECIFICATIONS:\n\n  1. The app must feature a visual representation of a neural network with input, hidden, and output layers.\n  2. The app must allow users to input data into the input layer and see how it flows through the network to the output layer.\n  3. The app must showcase the concept of linear regression models within each node, showing how inputs are multiplied by weights and added to a bias term.\n  4. The app must include a section where users can adjust the weights and biases of the nodes and observe how these changes affect the output.\n  5. The app must explain the concept of backpropagation and allow users to simulate the process of adjusting weights and biases based on training data.\n  6. The app must include examples of different types of neural networks, such as CNNs and RNNs, and explain their unique architectures and applications.\n  7. The app must provide a simple, playful interface with clear instructions and feedback to promote understanding and engagement.\n  8. The app must allow users to experiment with different scenarios and observe the outcomes, reinforcing the concepts of data flow, linear regression, and backpropagation.\"\n}\n```",
      "html_content": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Neural Network Explorer</title>\n    <style>\n        * {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n\n        body {\n            background-color: #ffffff;\n            color: #333;\n            line-height: 1.6;\n            padding: 20px;\n            max-width: 1200px;\n            margin: 0 auto;\n        }\n\n        header {\n            text-align: center;\n            margin-bottom: 30px;\n            padding: 20px;\n            border-bottom: 1px solid #eee;\n        }\n\n        h1 {\n            font-size: 2.5rem;\n            margin-bottom: 10px;\n            color: #222;\n        }\n\n        .game-container {\n            display: flex;\n            flex-direction: column;\n            gap: 30px;\n        }\n\n        .panel {\n            background-color: #f8f8f8;\n            border-radius: 10px;\n            padding: 25px;\n            box-shadow: 0 4px 6px rgba(0,0,0,0.05);\n        }\n\n        h2 {\n            font-size: 1.8rem;\n            margin-bottom: 20px;\n            color: #444;\n        }\n\n        h3 {\n            font-size: 1.4rem;\n            margin: 15px 0;\n            color: #555;\n        }\n\n        .network-container {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 300px;\n            margin: 20px 0;\n            position: relative;\n        }\n\n        .layer {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            margin: 0 20px;\n        }\n\n        .node {\n            width: 60px;\n            height: 60px;\n            border-radius: 50%;\n            background-color: #e0e0e0;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            margin: 15px 0;\n            font-weight: bold;\n            position: relative;\n            z-index: 2;\n        }\n\n        .input-node {\n            background-color: #d1e7dd;\n        }\n\n        .output-node {\n            background-color: #f8d7da;\n        }\n\n        .connection {\n            position: absolute;\n            background-color: #bbb;\n            transform-origin: 0 0;\n            z-index: 1;\n        }\n\n        .controls {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n            gap: 20px;\n            margin: 20px 0;\n        }\n\n        .control-group {\n            background-color: #eee;\n            padding: 15px;\n            border-radius: 8px;\n        }\n\n        label {\n            display: block;\n            margin-bottom: 8px;\n            font-weight: 500;\n        }\n\n        input[type=\"range\"], input[type=\"number\"] {\n            width: 100%;\n            padding: 8px;\n            margin-bottom: 15px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n        }\n\n        button {\n            background-color: #4a4a4a;\n            color: white;\n            border: none;\n            padding: 12px 20px;\n            border-radius: 5px;\n            cursor: pointer;\n            font-size: 1rem;\n            font-weight: 500;\n            transition: background-color 0.3s;\n            margin: 5px;\n        }\n\n        button:hover {\n            background-color: #333;\n        }\n\n        .btn-primary {\n            background-color: #5c5c5c;\n        }\n\n        .levels {\n            display: flex;\n            justify-content: center;\n            gap: 10px;\n            margin: 20px 0;\n        }\n\n        .level-btn {\n            padding: 10px 20px;\n        }\n\n        .level-btn.active {\n            background-color: #333;\n        }\n\n        .output-display {\n            background-color: #e9ecef;\n            padding: 15px;\n            border-radius: 8px;\n            margin: 20px 0;\n            min-height: 80px;\n        }\n\n        .training-data {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 15px;\n            margin: 20px 0;\n        }\n\n        .data-point {\n            background-color: #e9ecef;\n            padding: 15px;\n            border-radius: 8px;\n            text-align: center;\n        }\n\n        .network-types {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n            gap: 20px;\n            margin-top: 20px;\n        }\n\n        .network-type {\n            background-color: #e9ecef;\n            padding: 20px;\n            border-radius: 8px;\n        }\n\n        .progress-container {\n            margin: 30px 0;\n        }\n\n        .progress-bar {\n            height: 20px;\n            background-color: #e0e0e0;\n            border-radius: 10px;\n            overflow: hidden;\n        }\n\n        .progress {\n            height: 100%;\n            background-color: #6c757d;\n            width: 0%;\n            transition: width 0.5s;\n        }\n\n        .feedback {\n            margin: 20px 0;\n            padding: 15px;\n            border-radius: 8px;\n            background-color: #e9ecef;\n        }\n\n        .hidden {\n            display: none;\n        }\n\n        @media (max-width: 768px) {\n            .controls {\n                grid-template-columns: 1fr;\n            }\n            \n            .network-types {\n                grid-template-columns: 1fr;\n            }\n            \n            .layer {\n                margin: 0 10px;\n            }\n            \n            .node {\n                width: 50px;\n                height: 50px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <header>\n        <h1>Neural Network Explorer</h1>\n        <p>Understand how neural networks process information through interactive experimentation</p>\n    </header>\n\n    <div class=\"game-container\">\n        <div class=\"panel\">\n            <h2>Interactive Neural Network</h2>\n            <div class=\"levels\">\n                <button class=\"level-btn active\" data-level=\"1\">Level 1: Basic Network</button>\n                <button class=\"level-btn\" data-level=\"2\">Level 2: Training</button>\n                <button class=\"level-btn\" data-level=\"3\">Level 3: Network Types</button>\n            </div>\n            \n            <div class=\"progress-container\">\n                <div class=\"progress-bar\">\n                    <div class=\"progress\" id=\"progress\"></div>\n                </div>\n            </div>\n            \n            <div id=\"level-1\">\n                <div class=\"network-container\" id=\"network\">\n                    <!-- Dynamically generated network -->\n                </div>\n                \n                <div class=\"controls\">\n                    <div class=\"control-group\">\n                        <h3>Input Values</h3>\n                        <label for=\"input1\">Input Node 1:</label>\n                        <input type=\"range\" id=\"input1\" min=\"0\" max=\"1\" step=\"0.1\" value=\"0.5\">\n                        <label for=\"input2\">Input Node 2:</label>\n                        <input type=\"range\" id=\"input2\" min=\"0\" max=\"1\" step=\"0.1\" value=\"0.5\">\n                    </div>\n                    \n                    <div class=\"control-group\">\n                        <h3>Weights & Biases</h3>\n                        <label for=\"weight1\">Weight 1 (Input1 → Hidden1):</label>\n                        <input type=\"range\" id=\"weight1\" min=\"-2\" max=\"2\" step=\"0.1\" value=\"0.7\">\n                        <label for=\"bias1\">Bias (Hidden Layer):</label>\n                        <input type=\"range\" id=\"bias1\" min=\"-1\" max=\"1\" step=\"0.1\" value=\"0.2\">\n                    </div>\n                </div>\n                \n                <div class=\"output-display\">\n                    <h3>Output: <span id=\"output-value\">0.00</span></h3>\n                    <p>Adjust inputs, weights, and biases to see how they affect the output</p>\n                </div>\n                \n                <div class=\"feedback\">\n                    <h3>How It Works</h3>\n                    <p>Each node calculates: (input1 × weight1) + (input2 × weight2) + bias</p>\n                    <p>The result passes through an activation function to produce the output</p>\n                </div>\n                \n                <button id=\"run-network\" class=\"btn-primary\">Run Network</button>\n            </div>\n            \n            <div id=\"level-2\" class=\"hidden\">\n                <h3>Training with Backpropagation</h3>\n                <div class=\"training-data\">\n                    <div class=\"data-point\">\n                        <p>Training Example 1</p>\n                        <p>Input: [0,0] → Expected: 0</p>\n                    </div>\n                    <div class=\"data-point\">\n                        <p>Training Example 2</p>\n                        <p>Input: [0,1] → Expected: 1</p>\n                    </div>\n                    <div class=\"data-point\">\n                        <p>Training Example 3</p>\n                        <p>Input: [1,0] → Expected: 1</p>\n                    </div>\n                    <div class=\"data-point\">\n                        <p>Training Example 4</p>\n                        <p>Input: [1,1] → Expected: 1</p>\n                    </div>\n                </div>\n                \n                <div class=\"controls\">\n                    <div class=\"control-group\">\n                        <h3>Training Parameters</h3>\n                        <label for=\"learning-rate\">Learning Rate:</label>\n                        <input type=\"range\" id=\"learning-rate\" min=\"0.01\" max=\"1\" step=\"0.01\" value=\"0.1\">\n                        <label for=\"epochs\">Training Epochs:</label>\n                        <input type=\"number\" id=\"epochs\" min=\"1\" max=\"1000\" value=\"100\">\n                    </div>\n                    \n                    <div class=\"control-group\">\n                        <h3>Current Error</h3>\n                        <p id=\"error-display\">0.0000</p>\n                        <div class=\"progress-bar\">\n                            <div class=\"progress\" id=\"error-progress\"></div>\n                        </div>\n                        <p>Lower error means better predictions</p>\n                    </div>\n                </div>\n                \n                <button id=\"train-network\" class=\"btn-primary\">Train Network</button>\n                <button id=\"reset-weights\">Reset Weights</button>\n                \n                <div class=\"feedback\">\n                    <h3>Backpropagation Explained</h3>\n                    <p>The network compares its output to the expected result and calculates the error</p>\n                    <p>This error is propagated backward through the network to adjust weights and biases</p>\n                </div>\n            </div>\n            \n            <div id=\"level-3\" class=\"hidden\">\n                <h3>Different Neural Network Architectures</h3>\n                <div class=\"network-types\">\n                    <div class=\"network-type\">\n                        <h4>Convolutional Neural Network (CNN)</h4>\n                        <p>Specialized for image processing</p>\n                        <p>Uses convolutional layers to detect features</p>\n                        <div class=\"mini-network\">\n                            <div class=\"layer\">\n                                <div class=\"node\">Input</div>\n                                <div class=\"node\">Conv</div>\n                                <div class=\"node\">Pool</div>\n                                <div class=\"node\">Output</div>\n                            </div>\n                        </div>\n                        <p>Applications: Image recognition, object detection</p>\n                    </div>\n                    \n                    <div class=\"network-type\">\n                        <h4>Recurrent Neural Network (RNN)</h4>\n                        <p>Designed for sequence data</p>\n                        <p>Has memory to process sequences</p>\n                        <div class=\"mini-network\">\n                            <div class=\"layer\">\n                                <div class=\"node\">Input</div>\n                                <div class=\"node\">RNN</div>\n                                <div class=\"node\">Output</div>\n                                <div class=\"node\">↩</div>\n                            </div>\n                        </div>\n                        <p>Applications: Language translation, time series prediction</p>\n                    </div>\n                </div>\n                \n                <div class=\"feedback\">\n                    <h3>Key Differences</h3>\n                    <p>CNNs use spatial hierarchies, RNNs handle temporal sequences</p>\n                    <p>Both can be combined for complex tasks like video analysis</p>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', function() {\n            // Game state\n            const gameState = {\n                currentLevel: 1,\n                progress: 0,\n                weights: [0.7, -0.5, 0.3, 0.8],\n                biases: [0.2, -0.1],\n                error: 1.0\n            };\n\n            // DOM Elements\n            const levelButtons = document.querySelectorAll('.level-btn');\n            const level1 = document.getElementById('level-1');\n            const level2 = document.getElementById('level-2');\n            const level3 = document.getElementById('level-3');\n            const progressBar = document.getElementById('progress');\n            const outputValue = document.getElementById('output-value');\n            const errorDisplay = document.getElementById('error-display');\n            const errorProgress = document.getElementById('error-progress');\n            const runButton = document.getElementById('run-network');\n            const trainButton = document.getElementById('train-network');\n            const resetButton = document.getElementById('reset-weights');\n            const networkContainer = document.getElementById('network');\n\n            // Initialize network visualization\n            createNetworkVisualization();\n\n            // Level switching\n            levelButtons.forEach(button => {\n                button.addEventListener('click', function() {\n                    const level = parseInt(this.dataset.level);\n                    switchLevel(level);\n                });\n            });\n\n            // Run network button\n            runButton.addEventListener('click', runNetwork);\n\n            // Train network button\n            trainButton.addEventListener('click', trainNetwork);\n\n            // Reset weights button\n            resetButton.addEventListener('click', resetWeights);\n\n            // Input change listeners\n            document.getElementById('input1').addEventListener('input', runNetwork);\n            document.getElementById('input2').addEventListener('input', runNetwork);\n            document.getElementById('weight1').addEventListener('input', runNetwork);\n            document.getElementById('bias1').addEventListener('input', runNetwork);\n\n            // Functions\n            function switchLevel(level) {\n                gameState.currentLevel = level;\n                \n                // Update UI\n                levelButtons.forEach(btn => {\n                    btn.classList.toggle('active', parseInt(btn.dataset.level) === level);\n                });\n                \n                level1.classList.toggle('hidden', level !== 1);\n                level2.classList.toggle('hidden', level !== 2);\n                level3.classList.toggle('hidden', level !== 3);\n                \n                // Update progress\n                gameState.progress = (level - 1) * 50;\n                progressBar.style.width = `${gameState.progress}%`;\n                \n                // Run network when switching to level 1\n                if (level === 1) {\n                    runNetwork();\n                }\n            }\n\n            function createNetworkVisualization() {\n                // Clear existing network\n                networkContainer.innerHTML = '';\n                \n                // Create layers\n                const layers = [\n                    {name: 'Input', nodes: 2, type: 'input'},\n                    {name: 'Hidden', nodes: 2, type: 'hidden'},\n                    {name: 'Output', nodes: 1, type: 'output'}\n                ];\n                \n                // Create SVG for connections\n                const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n                svg.setAttribute('width', '100%');\n                svg.setAttribute('height', '100%');\n                svg.style.position = 'absolute';\n                svg.style.top = '0';\n                svg.style.left = '0';\n                svg.style.zIndex = '1';\n                networkContainer.appendChild(svg);\n                \n                // Create layers and nodes\n                layers.forEach((layer, layerIndex) => {\n                    const layerDiv = document.createElement('div');\n                    layerDiv.className = `layer ${layer.type}-layer`;\n                    \n                    for (let i = 0; i < layer.nodes; i++) {\n                        const node = document.createElement('div');\n                        node.className = `node ${layer.type}-node`;\n                        node.id = `${layer.type}-node-${i}`;\n                        node.textContent = layer.type.charAt(0);\n                        layerDiv.appendChild(node);\n                        \n                        // Add connections to next layer\n                        if (layerIndex < layers.length - 1) {\n                            const nextLayer = layers[layerIndex + 1];\n                            for (let j = 0; j < nextLayer.nodes; j++) {\n                                setTimeout(() => {\n                                    const startNode = document.getElementById(`${layer.type}-node-${i}`);\n                                    const endNode = document.getElementById(`${nextLayer.type}-node-${j}`);\n                                    \n                                    if (startNode && endNode) {\n                                        const startRect = startNode.getBoundingClientRect();\n                                        const endRect = endNode.getBoundingClientRect();\n                                        const containerRect = networkContainer.getBoundingClientRect();\n                                        \n                                        const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n                                        line.setAttribute('x1', startRect.left + startRect.width/2 - containerRect.left);\n                                        line.setAttribute('y1', startRect.top + startRect.height/2 - containerRect.top);\n                                        line.setAttribute('x2', endRect.left + endRect.width/2 - containerRect.left);\n                                        line.setAttribute('y2', endRect.top + endRect.height/2 - containerRect.top);\n                                        line.setAttribute('stroke', '#999');\n                                        line.setAttribute('stroke-width', '2');\n                                        svg.appendChild(line);\n                                    }\n                                }, 100);\n                            }\n                        }\n                    }\n                    \n                    networkContainer.appendChild(layerDiv);\n                });\n            }\n\n            function runNetwork() {\n                // Get input values\n                const input1 = parseFloat(document.getElementById('input1').value);\n                const input2 = parseFloat(document.getElementById('input2').value);\n                \n                // Get weights and biases\n                const weight1 = parseFloat(document.getElementById('weight1').value);\n                const bias1 = parseFloat(document.getElementById('bias1').value);\n                \n                // Simple neural network calculation\n                const hidden1 = Math.tanh((input1 * weight1) + (input2 * 0.5) + bias1);\n                const output = Math.tanh((hidden1 * 0.8) + (0.3 * -0.2));\n                \n                // Display output\n                outputValue.textContent = output.toFixed(4);\n                \n                // Update node values in visualization\n                document.getElementById('input-node-0').textContent = input1.toFixed(1);\n                document.getElementById('input-node-1').textContent = input2.toFixed(1);\n                document.getElementById('hidden-node-0').textContent = hidden1.toFixed(2);\n                document.getElementById('output-node-0').textContent = output.toFixed(2);\n            }\n\n            function trainNetwork() {\n                // Simulate training process\n                let error = gameState.error;\n                const epochs = parseInt(document.getElementById('epochs').value);\n                const learningRate = parseFloat(document.getElementById('learning-rate').value);\n                \n                let progress = 0;\n                const interval = setInterval(() => {\n                    // Reduce error\n                    error = Math.max(0, error - (Math.random() * 0.05));\n                    gameState.error = error;\n                    \n                    // Update UI\n                    errorDisplay.textContent = error.toFixed(4);\n                    errorProgress.style.width = `${(1 - error) * 100}%`;\n                    \n                    // Update weights display\n                    document.getElementById('weight1').value = (0.7 - error * 0.3).toFixed(2);\n                    \n                    progress += 100 / epochs;\n                    if (progress >= 100) {\n                        clearInterval(interval);\n                        \n                        // Update progress\n                        gameState.progress = Math.min(100, gameState.progress + 25);\n                        progressBar.style.width = `${gameState.progress}%`;\n                    }\n                }, 50);\n            }\n\n            function resetWeights() {\n                // Reset weights and biases\n                document.getElementById('weight1').value = 0.7;\n                document.getElementById('bias1').value = 0.2;\n                \n                // Reset error\n                gameState.error = 1.0;\n                errorDisplay.textContent = gameState.error.toFixed(4);\n                errorProgress.style.width = '0%';\n                \n                runNetwork();\n            }\n\n            // Initialize\n            runNetwork();\n        });\n    </script>\n</body>\n</html>",
      "html_file_path": "generated_games/video_game_dd2f49f007938719_1751215276.html",
      "created_at": "2025-06-29 16:41:16 UTC",
      "cached": true,
      "youtube_url": "https://www.youtube.com/watch?v=jmmW0F0biz0",
      "video_title": "Neural Networks Explained in 5 minutes",
      "twelvelabs_video_ids": [
        "68616c3a042f13dfd543c91f"
      ],
      "primary_video_id": "68616c3a042f13dfd543c91f",
      "total_chunks": null,
      "cache_key": "dd2f49f007938719",
      "cached_at": "2025-06-29 16:41:16 UTC"
    }
  },
  "indexes": {
    "youtube_urls": {
      "https://www.youtube.com/watch?v=qxo8p8PtFeA": "ed463b330e0c117d",
      "https://www.youtube.com/watch?v=_2v6Mbx5v1w": "0cd6e502bd723141",
      "https://www.youtube.com/watch?v=jmmW0F0biz0": "dd2f49f007938719"
    },
    "video_titles": {
      "Why Linear regression for Machine Learning?": "ed463b330e0c117d",
      "3-min Stretch | Great in the morning or between work! | Beginners | Apartment Friendly": "0cd6e502bd723141",
      "Neural Networks Explained in 5 minutes": "dd2f49f007938719"
    },
    "video_ids": {
      "ed463b330e0c117d": "ed463b330e0c117d",
      "0cd6e502bd723141": "0cd6e502bd723141",
      "dd2f49f007938719": "dd2f49f007938719"
    },
    "twelvelabs_video_ids": {
      "686152e39eeb467404d4596e": "ed463b330e0c117d",
      "6861538c90b29e60410608c8": "0cd6e502bd723141",
      "686153da21f0ea193ed033fa": "0cd6e502bd723141",
      "68616b8390b29e6041060a25": "ed463b330e0c117d",
      "68616c3a042f13dfd543c91f": "dd2f49f007938719",
      "686181ef042f13dfd543cb86": "ed463b330e0c117d",
      "686182c2da8b16ab27af8c64": "ed463b330e0c117d"
    }
  }
}